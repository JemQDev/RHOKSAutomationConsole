// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace RHOKSAutomationConsole.EFRHOKS2020;

public partial class RHOKS_2020Context : DbContext
{
    public RHOKS_2020Context(DbContextOptions<RHOKS_2020Context> options)
        : base(options)
    {
    }

    public virtual DbSet<ACQ_COLLAR> ACQ_COLLAR { get; set; }

    public virtual DbSet<ACQ_COLLARS> ACQ_COLLARS { get; set; }

    public virtual DbSet<ACQ_DESPATCHRETURN> ACQ_DESPATCHRETURN { get; set; }

    public virtual DbSet<ACQ_DESPATCHSEND> ACQ_DESPATCHSEND { get; set; }

    public virtual DbSet<ACQ_DRILLHOLES> ACQ_DRILLHOLES { get; set; }

    public virtual DbSet<AliasFieldMapping> AliasFieldMapping { get; set; }

    public virtual DbSet<ColourCode> ColourCode { get; set; }

    public virtual DbSet<Company> Company { get; set; }

    public virtual DbSet<DMP_Tenements> DMP_Tenements { get; set; }

    public virtual DbSet<DataTypes> DataTypes { get; set; }

    public virtual DbSet<Department> Department { get; set; }

    public virtual DbSet<DespatchSend> DespatchSend { get; set; }

    public virtual DbSet<DownHolePlodHeader> DownHolePlodHeader { get; set; }

    public virtual DbSet<DownholePlodActivity> DownholePlodActivity { get; set; }

    public virtual DbSet<DownholePlodData> DownholePlodData { get; set; }

    public virtual DbSet<DownholePlodDataError> DownholePlodDataError { get; set; }

    public virtual DbSet<DownholePlodEquipmentOnsite> DownholePlodEquipmentOnsite { get; set; }

    public virtual DbSet<DownholePlodHeaderError> DownholePlodHeaderError { get; set; }

    public virtual DbSet<DownholePlodService> DownholePlodService { get; set; }

    public virtual DbSet<DownholePlodVehicle> DownholePlodVehicle { get; set; }

    public virtual DbSet<DrillBulkFuel> DrillBulkFuel { get; set; }

    public virtual DbSet<DrillBulkFuel1> DrillBulkFuel1 { get; set; }

    public virtual DbSet<DrillConsumables> DrillConsumables { get; set; }

    public virtual DbSet<DrillConsumables1> DrillConsumables1 { get; set; }

    public virtual DbSet<DrillDetails> DrillDetails { get; set; }

    public virtual DbSet<DrillDetails1> DrillDetails1 { get; set; }

    public virtual DbSet<DrillDetails_ACQV> DrillDetails_ACQV { get; set; }

    public virtual DbSet<DrillEquipment> DrillEquipment { get; set; }

    public virtual DbSet<DrillEquipment1> DrillEquipment1 { get; set; }

    public virtual DbSet<DrillHole> DrillHole { get; set; }

    public virtual DbSet<DrillHole1> DrillHole1 { get; set; }

    public virtual DbSet<DrillHydrocarbons> DrillHydrocarbons { get; set; }

    public virtual DbSet<DrillHydrocarbons1> DrillHydrocarbons1 { get; set; }

    public virtual DbSet<DrillLostGear> DrillLostGear { get; set; }

    public virtual DbSet<DrillLostGear1> DrillLostGear1 { get; set; }

    public virtual DbSet<DrillPlod> DrillPlod { get; set; }

    public virtual DbSet<DrillPlod1> DrillPlod1 { get; set; }

    public virtual DbSet<DrillPlodTasks> DrillPlodTasks { get; set; }

    public virtual DbSet<DrillRigs> DrillRigs { get; set; }

    public virtual DbSet<DrillRigs1> DrillRigs1 { get; set; }

    public virtual DbSet<DrillStage> DrillStage { get; set; }

    public virtual DbSet<DrillTarget> DrillTarget { get; set; }

    public virtual DbSet<DrillTraining> DrillTraining { get; set; }

    public virtual DbSet<DrillTraining1> DrillTraining1 { get; set; }

    public virtual DbSet<DrillTraining_ACQV> DrillTraining_ACQV { get; set; }

    public virtual DbSet<DrillType> DrillType { get; set; }

    public virtual DbSet<Drill_Design> Drill_Design { get; set; }

    public virtual DbSet<GeoLogDrilling> GeoLogDrilling { get; set; }

    public virtual DbSet<GeoLoggingMineralogical> GeoLoggingMineralogical { get; set; }

    public virtual DbSet<GeoLoggingSampling> GeoLoggingSampling { get; set; }

    public virtual DbSet<GeologySampleShape> GeologySampleShape { get; set; }

    public virtual DbSet<GeophysDetails> GeophysDetails { get; set; }

    public virtual DbSet<GeophysHeader> GeophysHeader { get; set; }

    public virtual DbSet<GeophysHeaderDetails> GeophysHeaderDetails { get; set; }

    public virtual DbSet<GeophysInrodDetails> GeophysInrodDetails { get; set; }

    public virtual DbSet<GeophysLASCurve> GeophysLASCurve { get; set; }

    public virtual DbSet<GeophysLASDetails> GeophysLASDetails { get; set; }

    public virtual DbSet<GeophysLASFileLocation> GeophysLASFileLocation { get; set; }

    public virtual DbSet<GeophysLASHeader> GeophysLASHeader { get; set; }

    public virtual DbSet<GeophysLASParameters> GeophysLASParameters { get; set; }

    public virtual DbSet<GeophysMDPDetails> GeophysMDPDetails { get; set; }

    public virtual DbSet<GeophysMDPDetails_OLD2> GeophysMDPDetails_OLD2 { get; set; }

    public virtual DbSet<GeophysMDPHeader> GeophysMDPHeader { get; set; }

    public virtual DbSet<GeophysMDPHeader_OLD2> GeophysMDPHeader_OLD2 { get; set; }

    public virtual DbSet<GeophysMWDDetails> GeophysMWDDetails { get; set; }

    public virtual DbSet<GeophysMWDDetails_OLD> GeophysMWDDetails_OLD { get; set; }

    public virtual DbSet<GeophysMWDDetails_OLD2> GeophysMWDDetails_OLD2 { get; set; }

    public virtual DbSet<GeophysMWDHeader> GeophysMWDHeader { get; set; }

    public virtual DbSet<GeophysMWDHeader_OLD> GeophysMWDHeader_OLD { get; set; }

    public virtual DbSet<GeophysMWDHeader_OLD2> GeophysMWDHeader_OLD2 { get; set; }

    public virtual DbSet<HolePurpose> HolePurpose { get; set; }

    public virtual DbSet<IRImportFieldMapping> IRImportFieldMapping { get; set; }

    public virtual DbSet<IRLASCurves> IRLASCurves { get; set; }

    public virtual DbSet<IRLASHeader> IRLASHeader { get; set; }

    public virtual DbSet<IRLASHeaderDetails> IRLASHeaderDetails { get; set; }

    public virtual DbSet<IRLASReadings> IRLASReadings { get; set; }

    public virtual DbSet<ImportFieldMapping> ImportFieldMapping { get; set; }

    public virtual DbSet<LASCurves> LASCurves { get; set; }

    public virtual DbSet<LASHeader> LASHeader { get; set; }

    public virtual DbSet<LASHeaderDetails> LASHeaderDetails { get; set; }

    public virtual DbSet<LASLoggingUpdate> LASLoggingUpdate { get; set; }

    public virtual DbSet<LASReadings> LASReadings { get; set; }

    public virtual DbSet<LifeOfMinePit> LifeOfMinePit { get; set; }

    public virtual DbSet<LoggingStrands> LoggingStrands { get; set; }

    public virtual DbSet<MinePlanningPit> MinePlanningPit { get; set; }

    public virtual DbSet<MineSite> MineSite { get; set; }

    public virtual DbSet<MineralogicalCodes> MineralogicalCodes { get; set; }

    public virtual DbSet<OreDefDrillPlanning> OreDefDrillPlanning { get; set; }

    public virtual DbSet<PlannedCollar> PlannedCollar { get; set; }

    public virtual DbSet<SURTECH_ACTIVITY> SURTECH_ACTIVITY { get; set; }

    public virtual DbSet<SURTECH_DETAILS> SURTECH_DETAILS { get; set; }

    public virtual DbSet<SURTECH_EQUIPMENT> SURTECH_EQUIPMENT { get; set; }

    public virtual DbSet<SURTECH_SHIFT> SURTECH_SHIFT { get; set; }

    public virtual DbSet<SamplePhotos> SamplePhotos { get; set; }

    public virtual DbSet<TEST_GEOPHYS_VIEWS_JZ> TEST_GEOPHYS_VIEWS_JZ { get; set; }

    public virtual DbSet<Tenements_MGA50> Tenements_MGA50 { get; set; }

    public virtual DbSet<TestCompany> TestCompany { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ACQ_COLLAR>(entity =>
        {
            entity.HasKey(e => new { e.HOLEID, e.PROJECTCODE })
                .HasName("PRIMARYKEYCOLLAR")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ACQ_COLLAR", "Admin");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ACQ_COLLARS>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID })
                .HasName("PRIMARYKEYHOLELOCATION")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ACQ_COLLARS", "Admin");

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Actual_Drill_Date).HasColumnType("datetime");
            entity.Property(e => e.Actual_RigID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Alternate_DrillDate).HasColumnType("datetime");
            entity.Property(e => e.Archive_Survey_Methd)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Archive_Survey_Valid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Archived_Survey_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Archived_Survey_Date)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Assays_Valid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Cleared)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Clearing_Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_Collar)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_DrillEquipRec)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_DupSelected)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_HoleCollared)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_HolePlugged)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_MeasureRecord)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_MetaData)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_PegLabelled)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_PlanDepthReach)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_PlannedCollar)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_PlugLabelled)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_Rehab)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_SampSizeInspec)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_StandardInsert)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_StandardSpiked)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_SurveyPickup)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_Technician)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_Water)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_Water_Reading)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_Water_Table)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Collar_Cut)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Collar_Valid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Computer_Name)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DH_Geophys)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DH_Geophys_Company)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DH_Geophys_Date).HasColumnType("datetime");
            entity.Property(e => e.DH_Geophys_LogUnit)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DND)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Data_Srce_Coll)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Data_Srce_DHSurv)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Data_Srce_MetaData)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Data_Srce_Rehab)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Data_Srce_Water)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Data_Srce_Wtr_Cond)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Data_Srce_Wtr_Readng)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Date_Bag_Slashed).HasColumnType("datetime");
            entity.Property(e => e.Date_Cleared).HasColumnType("datetime");
            entity.Property(e => e.Date_Part_Cleared).HasColumnType("datetime");
            entity.Property(e => e.Date_Partial_Rehab).HasColumnType("datetime");
            entity.Property(e => e.Date_Pegged).HasColumnType("datetime");
            entity.Property(e => e.Date_Photographed).HasColumnType("datetime");
            entity.Property(e => e.Date_Sample_Stored).HasColumnType("datetime");
            entity.Property(e => e.Date_Scarified)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date_plan_Imported).HasColumnType("datetime");
            entity.Property(e => e.Date_water_meas)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Destroyed)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Diamond_Selected)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Dipping_Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DrillEquipRecovered)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DrillPattern)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Drilled_Peg_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DrillholeType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Drum_Destroyed)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Drum_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DuplicateSelected)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ExemptRehab)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GDA)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GDP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GDP_DATE).HasColumnType("datetime");
            entity.Property(e => e.GPSCUT_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPSCUT_Date).HasColumnType("datetime");
            entity.Property(e => e.GPS_HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Geol_Interp_Valid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Historic_Hole_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HoleCollared)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HolePlugged)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Cleared_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Exported)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Pegged_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Purpose)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Validated_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Instrument_Geophys)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Landfill_Analysis)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Last_Modified).HasColumnType("datetime");
            entity.Property(e => e.Lith_Valid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Logging_Complete)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Logging_Geo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Logging_Geo_Date).HasColumnType("datetime");
            entity.Property(e => e.Machine)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MeasureDrillRecorded)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Metals_Analysis)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MineDate_2013_LOM).HasColumnType("datetime");
            entity.Property(e => e.MineDate_201508_LOMP).HasColumnType("datetime");
            entity.Property(e => e.MineDate_2015_Accel).HasColumnType("datetime");
            entity.Property(e => e.MineDate_30Month).HasColumnType("datetime");
            entity.Property(e => e.MineDate_Tails_2015).HasColumnType("datetime");
            entity.Property(e => e.Mine_Plan)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MiningProposal)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Model_Area)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Model_Release)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Model_Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MoistureTest)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Oil_Spills)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Original_TenementID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POW)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pad_Rehab)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Parent_Hole_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PegLabelled)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Peg_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Peg_Marked)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pegged)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PermitOfWork)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Photographed)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PlanDepthReached)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_Area)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_Date).HasColumnType("datetime");
            entity.Property(e => e.Planned_DrilledByDat).HasColumnType("datetime");
            entity.Property(e => e.Planned_MineDate).HasColumnType("datetime");
            entity.Property(e => e.Pln_DDte_201508_LOMP).HasColumnType("datetime");
            entity.Property(e => e.Pln_Year_201508_LOMP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pln_YrMn_201508_LOMP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pln_YrQt_201508_LOMP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PlugLabelled)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PreCollarType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Program_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Proposed_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Rehabbed_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Rej_Def_Reason)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Reliability)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Responsible_Person)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Risk_Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Rubbish)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SampSizeInspected)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Sample_Stored_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Selenium)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StandardInserted)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StandardSpiked)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SubRegion)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Sump)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SurveyValidated_Date)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Survey_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Survey_Date).HasColumnType("datetime");
            entity.Property(e => e.Survey_Method)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Survey_Valid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Survey_ValidBy)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TailType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Testing_Required)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Twin1_Hole_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Twin2_Hole_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validated)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validated_Date).HasColumnType("datetime");
            entity.Property(e => e.Water_Area)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Water_Levels)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Water_Measured_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Water_Table_Reliable)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Water_Table_Valid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Water_Valid_Notes)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.Who_Modified)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ACQ_DESPATCHRETURN>(entity =>
        {
            entity.HasKey(e => new { e.LABJOBNO, e.DESPATCHNO })
                .HasName("PRIMARYKEYDESPATCHRETURN")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ACQ_DESPATCHRETURN", "Admin");

            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.AssaysSentGeostats)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Batch_Invoiced)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.Cmnts_QAQCSummary)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ImportLayout)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceNum)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InvoicePaid)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Original_LabJobNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SourceFile)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ACQ_DESPATCHSEND>(entity =>
        {
            entity.HasKey(e => e.DESPATCHNO)
                .HasName("PRIMARYKEYDESPATCHSEND")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ACQ_DESPATCHSEND", "Admin");

            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BulkaBagNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Connote_No)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DespatchedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.PurchaseOrderNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RHMLTest)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReconciledBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Requested_By)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ACQ_DRILLHOLES>(entity =>
        {
            entity.HasKey(e => new { e.HOLEID, e.DEPTH, e.STARTDEPTH, e.ENDDEPTH });

            entity.ToTable("ACQ_DRILLHOLES", "Admin");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ExistingPlod).HasDefaultValue(false);
            entity.Property(e => e.GEO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GeoFull)
                .HasMaxLength(125)
                .IsUnicode(false);
            entity.Property(e => e.Geologist)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PLAN_REGION)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.PLAN_REGIONPIT)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PLAN_SUBREGIONPIT)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RIGID)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SUBREGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TABLET)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AliasFieldMapping>(entity =>
        {
            entity.HasKey(e => new { e.AFM_ProcessName, e.AFM_Table, e.AFM_SourceField, e.AFM_DestinationField }).HasName("PK_AliasFieldMapping_1");

            entity.ToTable("AliasFieldMapping", "Admin");

            entity.Property(e => e.AFM_ProcessName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.AFM_Table)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AFM_SourceField)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.AFM_DestinationField)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.AFM_DataType)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.AFM_DataTypeNavigation).WithMany(p => p.AliasFieldMapping)
                .HasForeignKey(d => d.AFM_DataType)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AliasFieldMapping_DataTypes");
        });

        modelBuilder.Entity<ColourCode>(entity =>
        {
            entity.HasKey(e => e.VCC_ColourCode).HasName("PK_ValidationColourCode");

            entity.ToTable("ColourCode", "Validation");

            entity.Property(e => e.VCC_ColourCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VCC_Active).HasDefaultValue(false);
            entity.Property(e => e.VCC_Description)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.C_ID);

            entity.ToTable("Company", "Admin");

            entity.Property(e => e.C_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.C_CompanyName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DMP_Tenements>(entity =>
        {
            entity.HasKey(e => e.DMP_TenementID)
                .HasName("DMP_Tenements_PK")
                .HasAnnotation("SqlServer:FillFactor", 75);

            entity.ToTable("DMP_Tenements", "Admin");

            entity.Property(e => e.DMP_TenementID).HasMaxLength(12);
            entity.Property(e => e.DMP_Comment).HasMaxLength(500);
            entity.Property(e => e.DMP_Company).HasMaxLength(80);
            entity.Property(e => e.DMP_FormattedTenementID).HasMaxLength(16);
            entity.Property(e => e.DMP_LegalArea).HasColumnType("numeric(38, 8)");
            entity.Property(e => e.DMP_ManagingCompany).HasMaxLength(31);
            entity.Property(e => e.DMP_ProjectID).HasMaxLength(50);
            entity.Property(e => e.DMP_TenementName).HasMaxLength(200);
            entity.Property(e => e.DMP_TenementStatus).HasMaxLength(10);
            entity.Property(e => e.DMP_TenementType).HasMaxLength(50);
            entity.Property(e => e.DMP_UOM).HasMaxLength(4);
        });

        modelBuilder.Entity<DataTypes>(entity =>
        {
            entity.HasKey(e => e.DT_DataType);

            entity.ToTable("DataTypes", "Admin");

            entity.Property(e => e.DT_DataType)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.RHD_ID).HasName("PK_Department_1");

            entity.ToTable("Department", "Admin");

            entity.HasIndex(e => e.RHD_Name, "NCI_DepartmentName").IsUnique();

            entity.Property(e => e.RHD_ID)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RHD_Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DespatchSend>(entity =>
        {
            entity.HasKey(e => e.DS_DespatchID).HasName("PK_MineLabDespatch");

            entity.ToTable("DespatchSend", "MineLab");

            entity.Property(e => e.DS_DespatchID).ValueGeneratedNever();
            entity.Property(e => e.DS_DespatchType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DS_Lab)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DS_Reconciled).HasDefaultValue(false);
        });

        modelBuilder.Entity<DownHolePlodHeader>(entity =>
        {
            entity.HasKey(e => e.DHPH_PlodId);

            entity.ToTable("DownHolePlodHeader", "Geophys");

            entity.Property(e => e.DHPH_PlodId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DHPH_ChargeBasis)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DHPH_Client)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DHPH_Filename)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DHPH_Lease)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DHPH_Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DHPH_Operation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DHPH_Operator)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DHPH_VehicleID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.DHPH_Vehicle).WithMany(p => p.DownHolePlodHeader)
                .HasForeignKey(d => d.DHPH_VehicleID)
                .HasConstraintName("FK_DownHolePlodHeader_DownholePlodVehicle");
        });

        modelBuilder.Entity<DownholePlodActivity>(entity =>
        {
            entity.HasKey(e => e.DPA_ActivityID);

            entity.ToTable("DownholePlodActivity", "Admin");

            entity.Property(e => e.DPA_ActivityID)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DownholePlodData>(entity =>
        {
            entity.HasKey(e => new { e.GPD_PlodID, e.GPD_TimeFrom, e.GPD_TimeTo }).HasName("PK_GeophysPlodData_1");

            entity.ToTable("DownholePlodData", "Geophys");

            entity.Property(e => e.GPD_PlodID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GPD_Activity)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPD_Comments).IsUnicode(false);
            entity.Property(e => e.GPD_DensityDepth).HasColumnType("decimal(8, 3)");
            entity.Property(e => e.GPD_DrillToDepth).HasColumnType("decimal(8, 3)");
            entity.Property(e => e.GPD_Drillhole)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPD_DummyDepth).HasColumnType("decimal(8, 3)");
            entity.Property(e => e.GPD_GPSEasting).HasColumnType("decimal(11, 3)");
            entity.Property(e => e.GPD_GPSNorthing).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPD_Geologist)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GPD_HoleCondition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GPD_MagsusDepth).HasColumnType("decimal(8, 3)");

            entity.HasOne(d => d.GPD_ActivityNavigation).WithMany(p => p.DownholePlodData)
                .HasForeignKey(d => d.GPD_Activity)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_GeophysPlodData_DownholePlodActivity");

            entity.HasOne(d => d.GPD_Plod).WithMany(p => p.DownholePlodData)
                .HasForeignKey(d => d.GPD_PlodID)
                .HasConstraintName("FK_GeophysPlodData_DownHolePlodHeader");
        });

        modelBuilder.Entity<DownholePlodDataError>(entity =>
        {
            entity.HasKey(e => new { e.DHPDE_PlodId, e.DHPDE_TimeFrom, e.DHPDE_TimeTo, e.DHPDE_ErrorLevel });

            entity.ToTable("DownholePlodDataError", "Geophys");

            entity.Property(e => e.DHPDE_PlodId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DHPDE_ErrorLevel)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DHPDE_ErrorDescription)
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.DownholePlodData).WithMany(p => p.DownholePlodDataError)
                .HasForeignKey(d => new { d.DHPDE_PlodId, d.DHPDE_TimeFrom, d.DHPDE_TimeTo })
                .HasConstraintName("FK_DownholePlodDataError_GeophysPlodData");
        });

        modelBuilder.Entity<DownholePlodEquipmentOnsite>(entity =>
        {
            entity.HasKey(e => new { e.GEO_PlodID, e.GEO_Service }).HasName("PK_EquipmentOnsite");

            entity.ToTable("DownholePlodEquipmentOnsite", "Geophys");

            entity.Property(e => e.GEO_PlodID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GEO_Service)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GEO_Manufacturer)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GEO_SerialNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GEO_ToolType)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.GEO_Plod).WithMany(p => p.DownholePlodEquipmentOnsite)
                .HasForeignKey(d => d.GEO_PlodID)
                .HasConstraintName("FK_EquipmentOnsite_DownHolePlodHeader");

            entity.HasOne(d => d.GEO_ServiceNavigation).WithMany(p => p.DownholePlodEquipmentOnsite)
                .HasForeignKey(d => d.GEO_Service)
                .HasConstraintName("FK_EquipmentOnsite_DownholePlodService");
        });

        modelBuilder.Entity<DownholePlodHeaderError>(entity =>
        {
            entity.HasKey(e => new { e.DHPHE_PlodId, e.DHPHE_ErrorLevel }).HasName("PK_DhowholePlodHeaderError");

            entity.ToTable("DownholePlodHeaderError", "Geophys");

            entity.Property(e => e.DHPHE_PlodId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DHPHE_ErrorLevel)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DHPHE_ErrorDescription)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.DHPHE_Plod).WithMany(p => p.DownholePlodHeaderError)
                .HasForeignKey(d => d.DHPHE_PlodId)
                .HasConstraintName("FK_DownholePlodHeaderError_DownHolePlodHeader");
        });

        modelBuilder.Entity<DownholePlodService>(entity =>
        {
            entity.HasKey(e => e.DPS_ServiceID);

            entity.ToTable("DownholePlodService", "Admin");

            entity.Property(e => e.DPS_ServiceID)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DownholePlodVehicle>(entity =>
        {
            entity.HasKey(e => e.DPV_VehicleID);

            entity.ToTable("DownholePlodVehicle", "Admin");

            entity.Property(e => e.DPV_VehicleID)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillBulkFuel>(entity =>
        {
            entity.HasKey(e => new { e.DBF_Plod, e.DBF_Index });

            entity.ToTable("DrillBulkFuel", "ePlod", tb => tb.HasTrigger("TemporalDrillBulkFuel"));

            entity.Property(e => e.DBF_Equipment)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DBF_SysEnd).HasDefaultValue(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999));
            entity.Property(e => e.DBF_SysStart).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<DrillBulkFuel1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DrillBulkFuel", "History");

            entity.HasIndex(e => new { e.DBF_Plod, e.DBF_Index }, "CL_Plod_Index").IsClustered();

            entity.Property(e => e.DBF_Equipment)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillConsumables>(entity =>
        {
            entity.HasKey(e => new { e.DC_Plod, e.DC_Index });

            entity.ToTable("DrillConsumables", "ePlod", tb => tb.HasTrigger("TemporalDrillConsumables"));

            entity.Property(e => e.DC_Consumable)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.DC_Quantity).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.DC_SysEnd).HasDefaultValue(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999));
            entity.Property(e => e.DC_SysStart).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.DC_UOM)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillConsumables1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DrillConsumables", "History");

            entity.HasIndex(e => new { e.DC_Plod, e.DC_Index }, "CL_Plod_Index").IsClustered();

            entity.Property(e => e.DC_Consumable)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.DC_Quantity).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.DC_UOM)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillDetails>(entity =>
        {
            entity.HasKey(e => new { e.DD_Plod, e.DD_Index }).HasName("PK_DrillDetail");

            entity.ToTable("DrillDetails", "ePlod", tb => tb.HasTrigger("TemporalDrillDetails"));

            entity.Property(e => e.DD_Finish).HasPrecision(5);
            entity.Property(e => e.DD_HoleNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DD_Start).HasPrecision(5);
            entity.Property(e => e.DD_SysEnd).HasDefaultValue(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999));
            entity.Property(e => e.DD_SysStart).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.DD_Total).HasPrecision(5);

            entity.HasOne(d => d.DD_TaskNavigation).WithMany(p => p.DrillDetails)
                .HasForeignKey(d => d.DD_Task)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DrillDetails_DrillPlodTasks");
        });

        modelBuilder.Entity<DrillDetails1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DrillDetails", "History");

            entity.HasIndex(e => new { e.DD_Plod, e.DD_Index }, "CL_Plod_Index").IsClustered();

            entity.Property(e => e.DD_Finish).HasPrecision(5);
            entity.Property(e => e.DD_HoleNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DD_Start).HasPrecision(5);
            entity.Property(e => e.DD_Total).HasPrecision(5);
        });

        modelBuilder.Entity<DrillDetails_ACQV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DrillDetails_ACQV", "ePlod");

            entity.Property(e => e.DD_Finish_H)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DD_Finish_M)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DD_Finish_S)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DD_HoleNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DD_Start_H)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DD_Start_M)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DD_Start_S)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DD_Total_H)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DD_Total_M)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DD_Total_S)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillEquipment>(entity =>
        {
            entity.HasKey(e => new { e.DE_Plod, e.DE_Index });

            entity.ToTable("DrillEquipment", "ePlod", tb => tb.HasTrigger("TemporalDrillEquipment"));

            entity.Property(e => e.DE_Equipment)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DE_Finish).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.DE_Fuel).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.DE_Onsite)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DE_Start).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.DE_SysEnd).HasDefaultValue(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999));
            entity.Property(e => e.DE_SysStart).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<DrillEquipment1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DrillEquipment", "History");

            entity.HasIndex(e => new { e.DE_Plod, e.DE_Index }, "CL_Plod_Index").IsClustered();

            entity.Property(e => e.DE_Equipment)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DE_Finish).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.DE_Onsite)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DE_Start).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<DrillHole>(entity =>
        {
            entity.HasKey(e => new { e.DH_Plod, e.DH_Index });

            entity.ToTable("DrillHole", "ePlod", tb => tb.HasTrigger("TemporalDrillHole"));

            entity.HasIndex(e => new { e.DH_HoleNumber, e.DH_From, e.DH_Plod, e.DH_To }, "NCI_DH_HoleNumber").IsUnique();

            entity.Property(e => e.DH_Bit)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.DH_Depth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DH_From).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DH_Hammer)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.DH_HoleNumber)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DH_HolePrefix)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DH_HolePurpose)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DH_SysEnd).HasDefaultValue(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999));
            entity.Property(e => e.DH_SysStart).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.DH_To).HasColumnType("decimal(5, 2)");
        });

        modelBuilder.Entity<DrillHole1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DrillHole", "History");

            entity.HasIndex(e => new { e.DH_Plod, e.DH_Index }, "CL_Plod_Index").IsClustered();

            entity.Property(e => e.DH_Bit)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.DH_Depth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DH_From).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DH_Hammer)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.DH_HoleNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DH_HolePurpose)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DH_To).HasColumnType("decimal(5, 2)");
        });

        modelBuilder.Entity<DrillHydrocarbons>(entity =>
        {
            entity.HasKey(e => new { e.DHC_Plod, e.DHC_Index });

            entity.ToTable("DrillHydrocarbons", "ePlod", tb => tb.HasTrigger("TemporalDrillHydrocarbons"));

            entity.Property(e => e.DHC_Lubricant)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DHC_SysEnd).HasDefaultValue(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999));
            entity.Property(e => e.DHC_SysStart).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<DrillHydrocarbons1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DrillHydrocarbons", "History");

            entity.HasIndex(e => new { e.DHC_Plod, e.DHC_Index }, "CL_Plod_Index").IsClustered();

            entity.Property(e => e.DHC_Lubricant)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillLostGear>(entity =>
        {
            entity.HasKey(e => new { e.DLG_Plod, e.DLG_Index });

            entity.ToTable("DrillLostGear", "ePlod", tb => tb.HasTrigger("TemporalDrillLostGear"));

            entity.Property(e => e.DLG_Gear)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DLG_Qty)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DLG_SysEnd).HasDefaultValue(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999));
            entity.Property(e => e.DLG_SysStart).HasDefaultValueSql("(sysutcdatetime())");
        });

        modelBuilder.Entity<DrillLostGear1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DrillLostGear", "History");

            entity.HasIndex(e => new { e.DLG_Plod, e.DLG_Index }, "CL_Plod_Index").IsClustered();

            entity.Property(e => e.DLG_Gear)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DLG_Qty)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillPlod>(entity =>
        {
            entity.HasKey(e => new { e.DP_Plod, e.DP_Project }).HasName("PK_DrillPlod_1");

            entity.ToTable("DrillPlod", "ePlod", tb => tb.HasTrigger("TemporalDrillPlod"));

            entity.Property(e => e.DP_Project)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DP_Client)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DP_Geologist)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DP_Location)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DP_Rig)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DP_Shift)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DP_SysEnd).HasDefaultValue(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999));
            entity.Property(e => e.DP_SysStart).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.DP_ProjectNavigation).WithMany(p => p.DrillPlod)
                .HasForeignKey(d => d.DP_Project)
                .HasConstraintName("FK_DrillPlod_Department");

            entity.HasOne(d => d.DP_RigNavigation).WithMany(p => p.DrillPlod)
                .HasForeignKey(d => d.DP_Rig)
                .HasConstraintName("FK_DrillPlod_DrillRigs");
        });

        modelBuilder.Entity<DrillPlod1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DrillPlod", "History");

            entity.HasIndex(e => new { e.DP_Plod, e.DP_Date, e.DP_Rig }, "CL_Plod_Date_Rig").IsClustered();

            entity.Property(e => e.DP_Client)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DP_Geologist)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DP_Location)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DP_Project)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DP_Rig)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DP_Shift)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillPlodTasks>(entity =>
        {
            entity.HasKey(e => e.DPT_ID);

            entity.ToTable("DrillPlodTasks", "Admin");

            entity.HasIndex(e => new { e.DPT_TaskNumber, e.DPT_Description, e.DPT_Reason, e.DPT_Chargeable }, "NCI_DPT_TDR").IsUnique();

            entity.Property(e => e.DPT_Description)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DPT_Reason)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DPT_TaskNumber)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillRigs>(entity =>
        {
            entity.HasKey(e => e.DR_ID).HasName("PK_DrillRigs_1");

            entity.ToTable("DrillRigs", "ePlod", tb => tb.HasTrigger("TemporalDrillRigs"));

            entity.Property(e => e.DR_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DR_Company)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DR_Histroical_ID)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DR_RigType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DR_SysEnd).HasDefaultValue(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999));
            entity.Property(e => e.DR_SysStart).HasDefaultValueSql("(sysutcdatetime())");

            entity.HasOne(d => d.DR_CompanyNavigation).WithMany(p => p.DrillRigs)
                .HasForeignKey(d => d.DR_Company)
                .HasConstraintName("FK_DrillRigs_Company");
        });

        modelBuilder.Entity<DrillRigs1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DrillRigs", "History");

            entity.HasIndex(e => e.DR_ID, "CL_Rig").IsClustered();

            entity.Property(e => e.DR_Company)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DR_Histroical_ID)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DR_ID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DR_RigType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillStage>(entity =>
        {
            entity.HasKey(e => e.DS_DrillStageName).HasName("PK_DrillStage_1");

            entity.ToTable("DrillStage", "Admin");

            entity.Property(e => e.DS_DrillStageName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillTarget>(entity =>
        {
            entity.HasKey(e => new { e.Year, e.Month, e.Target });
        });

        modelBuilder.Entity<DrillTraining>(entity =>
        {
            entity.HasKey(e => new { e.DT_Plod, e.DT_Index });

            entity.ToTable("DrillTraining", "ePlod", tb => tb.HasTrigger("TemporalDrillTraining"));

            entity.Property(e => e.DT_Instructor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DT_SysEnd).HasDefaultValue(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999));
            entity.Property(e => e.DT_SysStart).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.DT_Time).HasPrecision(5);
            entity.Property(e => e.DT_Trainee)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillTraining1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DrillTraining", "History");

            entity.HasIndex(e => new { e.DT_Plod, e.DT_Index }, "CL_Plod_Index").IsClustered();

            entity.Property(e => e.DT_Instructor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DT_Time).HasPrecision(5);
            entity.Property(e => e.DT_Trainee)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillTraining_ACQV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("DrillTraining_ACQV", "ePlod");

            entity.Property(e => e.DT_Instructor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DT_Time).HasPrecision(5);
            entity.Property(e => e.DT_Time_H)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DT_Time_M)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DT_Time_S)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DT_Trainee)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillType>(entity =>
        {
            entity.HasKey(e => e.DT_DrillTypeName).HasName("PK_DrillType_1");

            entity.ToTable("DrillType", "Admin");

            entity.Property(e => e.DT_DrillTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Drill_Design>(entity =>
        {
            entity.HasKey(e => e.HOLEID).HasName("PK_Drill_Design_1");

            entity.ToTable("Drill_Design", "Admin");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COLLAR_STATUS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DESIGN_VERSION)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GDP)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LEASE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MINING_SOURCE)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.MINING_VERSION)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OVERALL_STATUS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PLANNED_GRID)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.REGIONPIT)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SHORTID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SUBREGIONPIT)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SUMP)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GeoLogDrilling>(entity =>
        {
            entity.HasKey(e => new { e.GLD_HoleID, e.GLD_Date });

            entity.ToTable(tb => tb.HasTrigger("GeoLogDrillingOverlap"));

            entity.Property(e => e.GLD_HoleID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLD_Geologist)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GLD_RigId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLD_StartMetres).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GLD_StopMetres).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.GLD_Hole).WithMany(p => p.GeoLogDrilling)
                .HasForeignKey(d => d.GLD_HoleID)
                .HasConstraintName("FK_GeoLogDrilling_Drill_Design");

            entity.HasOne(d => d.GLD_Rig).WithMany(p => p.GeoLogDrilling)
                .HasForeignKey(d => d.GLD_RigId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_GeoLogDrilling_DrillRigs");
        });

        modelBuilder.Entity<GeoLoggingMineralogical>(entity =>
        {
            entity.HasKey(e => new { e.GLM_ID, e.GLM_GLS_ID, e.GLM_RecordNumber }).HasName("PK_GeoLoggingMineralogical_1");

            entity.HasIndex(e => e.GLM_MetCode, "NCI_GeoLoggingMineralogical_MetCode").IsUnique();

            entity.HasIndex(e => new { e.GLM_HOLEID, e.GLM_IntervalFrom, e.GLM_IntervalTo, e.GLM_RecordNumber }, "NCI_SPK_GeoLoggingMineralogy").IsUnique();

            entity.Property(e => e.GLM_ID).ValueGeneratedOnAdd();
            entity.Property(e => e.GLM_Carbonate)
                .HasComputedColumnSql("(case when [GLM_MetCode]='DOM' OR [GLM_MetCode]='CAR' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='CC2' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='DUR' then [GLM_MetPercentage]*(0.6)  end)", true)
                .HasColumnType("numeric(13, 1)");
            entity.Property(e => e.GLM_Clay)
                .HasComputedColumnSql("(case when [GLM_MetCode]='HS2' then [GLM_MetPercentage]*(0.7) when [GLM_MetCode]='HS3' then [GLM_MetPercentage]*(0.7) when [GLM_MetCode]='GS2' then [GLM_MetPercentage]*(0.7) when [GLM_MetCode]='GS3' then [GLM_MetPercentage]*(0.7) when [GLM_MetCode]='PIG' then [GLM_MetPercentage]*(0.5) when [GLM_MetCode]='SH2' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='SH3' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='SHF' then [GLM_MetPercentage]*(0.9) when [GLM_MetCode]='SHC' OR [GLM_MetCode]='BSH' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='CLA' then [GLM_MetPercentage]*(1.0)  end)", true)
                .HasColumnType("numeric(13, 1)");
            entity.Property(e => e.GLM_Geothite)
                .HasComputedColumnSql("(case when [GLM_MetCode]='HG1' then [GLM_MetPercentage]*(0.3) when [GLM_MetCode]='HG2' then [GLM_MetPercentage]*(0.3) when [GLM_MetCode]='HG3' then [GLM_MetPercentage]*(0.3) when [GLM_MetCode]='HG4' then [GLM_MetPercentage]*(0.3) when [GLM_MetCode]='GS2' then [GLM_MetPercentage]*(0.3) when [GLM_MetCode]='GS3' then [GLM_MetPercentage]*(0.3) when [GLM_MetCode]='GH1' then [GLM_MetPercentage]*(0.7) when [GLM_MetCode]='GH2' then [GLM_MetPercentage]*(0.7) when [GLM_MetCode]='GH3' then [GLM_MetPercentage]*(0.7) when [GLM_MetCode]='GO1' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='GO2' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='GO3' OR [GLM_MetCode]='OG3' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='GOV' OR [GLM_MetCode]='VG2' then [GLM_MetPercentage]*(1.0)  end)", true)
                .HasColumnType("numeric(13, 1)");
            entity.Property(e => e.GLM_HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLM_Hematite)
                .HasComputedColumnSql("(case when [GLM_MetCode]='HO1' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='HO2' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='HO3' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='HO4' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='HS2' then [GLM_MetPercentage]*(0.3) when [GLM_MetCode]='HS3' then [GLM_MetPercentage]*(0.3) when [GLM_MetCode]='HY1' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='HY2' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='HG1' then [GLM_MetPercentage]*(0.7) when [GLM_MetCode]='HG2' then [GLM_MetPercentage]*(0.7) when [GLM_MetCode]='HG3' then [GLM_MetPercentage]*(0.7) when [GLM_MetCode]='HG4' then [GLM_MetPercentage]*(0.7) when [GLM_MetCode]='GH1' then [GLM_MetPercentage]*(0.3) when [GLM_MetCode]='GH2' then [GLM_MetPercentage]*(0.3) when [GLM_MetCode]='GH3' then [GLM_MetPercentage]*(0.3) when [GLM_MetCode]='SHF' then [GLM_MetPercentage]*(0.1) when [GLM_MetCode]='MAG' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='OH' then [GLM_MetPercentage]*(1.0)  end)", true)
                .HasColumnType("numeric(13, 1)");
            entity.Property(e => e.GLM_IntervalFrom).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.GLM_IntervalTo).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.GLM_Manganese)
                .HasComputedColumnSql("(case when [GLM_MetCode]='MN1' OR [GLM_MetCode]='MNO' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='MN3' then [GLM_MetPercentage]*(1.0)  end)", true)
                .HasColumnType("numeric(13, 1)");
            entity.Property(e => e.GLM_MetCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLM_Other)
                .HasComputedColumnSql("(case when [GLM_MetCode]='DO1' OR [GLM_MetCode]='DOL' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='FIB' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='ASB' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='NSR' then [GLM_MetPercentage]*(1.0)  end)", true)
                .HasColumnType("numeric(13, 1)");
            entity.Property(e => e.GLM_Quartz)
                .HasComputedColumnSql("(case when [GLM_MetCode]='PIG' then [GLM_MetPercentage]*(0.5) when [GLM_MetCode]='CH1' OR [GLM_MetCode]='CHT' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='CH4' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='QZ1' OR [GLM_MetCode]='SIL' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='QZ4' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='DO3' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='SC2' then [GLM_MetPercentage]*(1.0) when [GLM_MetCode]='DUR' then [GLM_MetPercentage]*(0.4)  end)", true)
                .HasColumnType("numeric(13, 1)");
            entity.Property(e => e.GLM_Sulphide)
                .HasComputedColumnSql("(case when [GLM_MetCode]='PYR' then [GLM_MetPercentage]*(1.0)  end)", true)
                .HasColumnType("numeric(13, 1)");

            entity.HasOne(d => d.GLM_GLS).WithMany(p => p.GeoLoggingMineralogical)
                .HasForeignKey(d => d.GLM_GLS_ID)
                .HasConstraintName("FK_GeoLoggingMineralogical_GeoLoggingSampling");

            entity.HasOne(d => d.GLM_HOLE).WithMany(p => p.GeoLoggingMineralogical)
                .HasForeignKey(d => d.GLM_HOLEID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GeoLoggingMineralogical_Drill_Design");

            entity.HasOne(d => d.GLM_MetCodeNavigation).WithOne(p => p.GeoLoggingMineralogical)
                .HasForeignKey<GeoLoggingMineralogical>(d => d.GLM_MetCode)
                .HasConstraintName("FK_GeoLoggingMineralogical_MineralogicalCodes");
        });

        modelBuilder.Entity<GeoLoggingSampling>(entity =>
        {
            entity.HasKey(e => e.GLS_ID);

            entity.HasIndex(e => new { e.GLS_HOLEID, e.GLS_IntervalFrom, e.GLS_IntervalTo }, "NCI_SPK_GeoLogSampling").IsUnique();

            entity.Property(e => e.GLS_Alteration)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.GLS_Assay).HasDefaultValue(false);
            entity.Property(e => e.GLS_ContaminateHammerOil).HasDefaultValue(false);
            entity.Property(e => e.GLS_ContaminatePlastic).HasDefaultValue(false);
            entity.Property(e => e.GLS_DuplicateNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GLS_FDUPAssay).HasDefaultValue(false);
            entity.Property(e => e.GLS_FieldDup)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GLS_GeoLoggedStrand)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLS_HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLS_Hue)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.GLS_IntervalFrom).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.GLS_IntervalTo).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.GLS_LoggingGeo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLS_Manganese).HasDefaultValue(false);
            entity.Property(e => e.GLS_PrimaryColour)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLS_STD).HasDefaultValue(false);
            entity.Property(e => e.GLS_SampleId)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GLS_SecondaryColour)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLS_Shape)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.GLS_GeoLoggedStrandNavigation).WithMany(p => p.GeoLoggingSampling)
                .HasForeignKey(d => d.GLS_GeoLoggedStrand)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_GeoLoggingSampling_LoggingStrands");

            entity.HasOne(d => d.GLS_PrimaryColourNavigation).WithMany(p => p.GeoLoggingSampling)
                .HasForeignKey(d => d.GLS_PrimaryColour)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_GeoLoggingSampling_ColourCode");

            entity.HasOne(d => d.GLS_ShapeNavigation).WithMany(p => p.GeoLoggingSampling)
                .HasForeignKey(d => d.GLS_Shape)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_GeoLoggingSampling_GeologySampleShape");
        });

        modelBuilder.Entity<GeologySampleShape>(entity =>
        {
            entity.HasKey(e => e.VS_ShapeCode);

            entity.ToTable("GeologySampleShape", "Validation");

            entity.Property(e => e.VS_ShapeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VS_Active).HasDefaultValue(false);
            entity.Property(e => e.VS_Description)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GeophysDetails>(entity =>
        {
            entity.HasKey(e => new { e.GPD_Drillhole, e.GPD_Program, e.GPD_DateLogged, e.GPD_MeasurementDepth });

            entity.ToTable("GeophysDetails", "McPhee");

            entity.Property(e => e.GPD_Drillhole)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPD_Program)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GPD_MeasurementDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_Azimuth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_Caliper).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_Density).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_DensityH).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPD_Dip).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_Distance).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_EastDeviation).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_GamGam).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_MagneticVector).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_NSG_Azimuth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_NSG_Dip).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_NSG_Distance).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_NSG_EastDeviation).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_NSG_NorthDeviation).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_NSG_Sang).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_NSG_SangB).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_NaturalGamma).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_NorthDeviation).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_Sang).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_SangB).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_Stat).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPD_Susceptability).HasColumnType("decimal(8, 3)");
        });

        modelBuilder.Entity<GeophysHeader>(entity =>
        {
            entity.HasKey(e => new { e.GPH_Drillhole, e.GPH_Program, e.GPH_DateLogged });

            entity.ToTable("GeophysHeader", "McPhee");

            entity.Property(e => e.GPH_Drillhole)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPH_Program)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GPH_AzimuthUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_BitSize).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPH_CaliperUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_CompositeDensityUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_DeltaTMatrix).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPH_DensityHUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_DensityMatrix).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPH_DensityToolSerial)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_DensityToolSource)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_DensityUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_DepthUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_DeviationOrientation).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPH_DistanceUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_DrillersDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPH_EastDeviationUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_Easting).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPH_FileIdentifier)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_FluidLevel).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPH_FluidType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_GamGamUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_GyroSerial)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_LogToDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPH_LoggingUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_LoggingUser)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_LongSpaceDensityUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_MagsusSerial)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_NSG_AzimuthUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_NSG_DipUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_NSG_DistanceUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_NSG_EastDeviationUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_NSG_NorthDeviationUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_NSG_SangBUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_NSG_SangUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_NeutronMatrix)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_NorthDeviationUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_Northing).HasColumnType("decimal(11, 3)");
            entity.Property(e => e.GPH_NullValue).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPH_SangBUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_SangUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_ServiceCompany)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPH_ShortSpaceDensityUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_SonicSerial)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_StartMetres).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPH_StepMetres).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPH_StopMetres).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPH_SurveyType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPH_SusceptabilityUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_SystemSerialNumber)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_SystemVersion)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_TruckCalibrationNumber)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GeophysHeaderDetails>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("GeophysHeaderDetails");

            entity.Property(e => e.GLH_Company)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Country)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Department)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_DrillStage)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_DrillType)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Easting).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_HolePurpose)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Holeid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Latitude).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_LicenceNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Location)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Longitude).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_MineSite)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.GLH_NULLSubstituteValue).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_Northing).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_Province)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_ServiceCompany)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLH_StartDepth).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_StartDepthUnits)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.GLH_StepInterval).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_StepIntervalUnits)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.GLH_StopDepth).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_StopDepthUnits)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.GLH_WellIdentifier)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_BitSize).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_CasingBottom)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_CasingDiameter).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_CasingLogger)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_CasingThickness)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_CasingType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Comment1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Comment2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Comment3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_DeltaTMatrix).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_DensityMatrix).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_DrillerDepth).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_DrillerMeasuredFrom)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Easting).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_ElectronCutoff).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_ElevationGroundLevel)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_ElevationPermanentData)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_FileType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_FileTypeIdentifier)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_FluidType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Holeid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Latitude).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_LogMeasuredFrom)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_LoggingUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Longitude).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_MagneticDeclination).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_MudResistivity)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_MudSampleSource)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_MudTemperature)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_MudWeight).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_NeutronMatrix)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Northing).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_PermanentData)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_RecordedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_ResistivityMudCake)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_SourceId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_SystemVersion)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_SystsemSerialNumber).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_TemperatureGradient)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_TimeCirculationStopped)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_TimeHrHrMinMin).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_ToolSerialNumber).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_TruckCalibrationNumber).HasColumnType("decimal(12, 5)");
        });

        modelBuilder.Entity<GeophysInrodDetails>(entity =>
        {
            entity.HasKey(e => new { e.GPID_Drillhole, e.GPID_Program, e.GPID_DateLogged, e.GPID_MeasurementDepth });

            entity.ToTable("GeophysInrodDetails", "McPhee");

            entity.Property(e => e.GPID_Drillhole)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPID_Program)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GPID_MeasurementDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPID_ComapositeDensity).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPID_LongSpaceDensity).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPID_ShortSpaceDensity).HasColumnType("decimal(10, 3)");
        });

        modelBuilder.Entity<GeophysLASCurve>(entity =>
        {
            entity.HasKey(e => e.GLC_Holeid);

            entity.ToTable("GeophysLASCurve", "Downhole");

            entity.Property(e => e.GLC_Holeid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_Azimuth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_AzimuthUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_Caliper)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_CaliperUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DIP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DIPUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_Density)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DensityH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DensityHUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DensityPorosity)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DensityPorosityUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DensityUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_Depth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DepthUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_Distance)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DistanceUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_EastDeviation)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_EastDeviationUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_FluidResistivity)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_FluidResistivityUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_GamGam)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_GamGamUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_GamNat)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_GamNatUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_MagneticVector)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_MagneticVectorUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NSGAZIMUTH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NSGAZIMUTHUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NSGDIP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NSGDIPUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NSGDISTANCE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NSGDISTANCEUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NSGEDEV)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NSGEDEVUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NSGNDEV)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NSGNDEVUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NSGSANG)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NSGSANGB)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NSGSANGBUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NSGSANGUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NorthDeviation)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NorthDeviationUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_RGamNat)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_RGamNatUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_Sangle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_SangleBeta)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_SangleBetaUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_SangleUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_Susceptability)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_SusceptabilityUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_YFlux)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_YFluxUnits)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GeophysLASDetails>(entity =>
        {
            entity.HasKey(e => new { e.GLD_Holeid, e.GLD_Depth }).HasName("PK_DownholeGeophysLASDetails");

            entity.ToTable("GeophysLASDetails", "Downhole");

            entity.Property(e => e.GLD_Holeid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLD_Depth).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_Azimuth).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_Caliper).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_DIP).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_Density).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_DensityH).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_Distance).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_EastDeviation).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_GamGam).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_GamNat).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_NSGAZIMUTH).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_NSGDIP).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_NSGDISTANCE).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_NSGEDEV).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_NSGNDEV).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_NSGSANG).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_NSGSANGB).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_NorthDeviation).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_Sang).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_SangBeta).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_Susceptability).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_TL_CompDensity).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_TL_LongSpace).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_TL_ShortSpace).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_WSG_CompDensity).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_WSG_LongSpace).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLD_WSG_ShortSpace).HasColumnType("decimal(12, 3)");
        });

        modelBuilder.Entity<GeophysLASFileLocation>(entity =>
        {
            entity.HasKey(e => new { e.GLFL_HistoricHoleid, e.GLFL_ProcessDateTime, e.GLFL_FileLocation, e.GLFL_Status });

            entity.ToTable("GeophysLASFileLocation", "Downhole");

            entity.Property(e => e.GLFL_HistoricHoleid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLFL_FileLocation)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.GLFL_Status)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GeophysLASHeader>(entity =>
        {
            entity.HasKey(e => e.GLH_Holeid).HasName("PK_GeophysLASHeader_1");

            entity.ToTable("GeophysLASHeader", "Downhole");

            entity.Property(e => e.GLH_Holeid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Company)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Country)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Department)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_DrillStage)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_DrillType)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Easting).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_HolePurpose)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Latitude).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_LicenceNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Location)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Longitude).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_MineSite)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.GLH_NULLSubstituteValue).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_Northing).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_Province)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_ServiceCompany)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLH_StartDepth).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_StartDepthUnits)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.GLH_StepInterval).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_StepIntervalUnits)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.GLH_StopDepth).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_StopDepthUnits)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.GLH_SurveyType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLH_WellIdentifier)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GeophysLASParameters>(entity =>
        {
            entity.HasKey(e => e.GLP_Holeid);

            entity.ToTable("GeophysLASParameters", "Downhole");

            entity.Property(e => e.GLP_Holeid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_ArrivalTime)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_BitSize).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_CasingBottom)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_CasingDiameter).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_CasingLogger)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_CasingThickness)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_CasingType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Comment1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Comment2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Comment3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_DeltaTFluid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_DeltaTMatrix).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_DensityMatrix).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_DensityToolSerialNumber).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_DensityToolSourceNumber)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_DepartureTime)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_DrillerDepth).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_DrillerMeasuredFrom)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Easting).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_ElectronCutoff).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_ElevationDF)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_ElevationGroundLevel)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_ElevationKellyBushing)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_ElevationPermanentData)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_FileType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_FileTypeIdentifier)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_FluidLevel).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_FluidType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_FluidViscosity)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_FuildPH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_GyroToolSerialNumber).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_Latitude).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_LogMeasuredFrom)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_LoggerTD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_LoggingUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Longitude).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_MagSuscToolSerialNumber).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_MagneticDeclination).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_MeanSurfaceTemperature)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_MudResistivity)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_MudSampleSource)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_MudTemperature)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_MudWeight).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_NeutronMatrix)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Northing).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_PermanentData)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_RecordedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_ResistivityMudCake)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_ResistivityMudFiltrate)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_RigNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_SonicToolSerialNumber).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_SourceId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_SystemVersion)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_SystsemSerialNumber).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_TemperatureGradient)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_TemperatureMudCake)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_TemperatureMudFiltrate)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_TimeCirculationStopped)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_TimeHrHrMinMin).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_ToolSerialNumber).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_TruckCalibrationNumber).HasColumnType("decimal(12, 5)");
        });

        modelBuilder.Entity<GeophysMDPDetails>(entity =>
        {
            entity.HasKey(e => new { e.GMD_Holeid, e.GMD_Depth }).HasName("PK_GeophysMDP");

            entity.Property(e => e.GMD_Holeid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GMD_Depth).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_HammerVibration).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_HeadSpeed).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_MCS).HasColumnType("decimal(30, 3)");
            entity.Property(e => e.GMD_PenRate).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_Torque).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_UCS).HasColumnType("decimal(30, 3)");
            entity.Property(e => e.GMD_WeightOnBit).HasColumnType("decimal(10, 3)");
        });

        modelBuilder.Entity<GeophysMDPDetails_OLD2>(entity =>
        {
            entity.HasKey(e => new { e.GMD_Holeid, e.GMD_Depth }).HasName("PK_GeophysMDPDetails");

            entity.ToTable("GeophysMDPDetails_OLD2", "Downhole");

            entity.Property(e => e.GMD_Holeid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GMD_Depth).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_HammerVibration).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_HeadSpeed).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_MCS).HasColumnType("decimal(20, 3)");
            entity.Property(e => e.GMD_PenRate).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_Torque).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_UCS).HasColumnType("decimal(20, 3)");
            entity.Property(e => e.GMD_WeightOnBit).HasColumnType("decimal(10, 3)");
        });

        modelBuilder.Entity<GeophysMDPHeader>(entity =>
        {
            entity.HasKey(e => e.GMH_Holeid);

            entity.Property(e => e.GMH_Holeid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Api)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Company)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_HammerType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Null).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Province)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Rigid)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GMH_ServiceCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Start).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Step).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Stop).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_WellIdentifier)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GeophysMDPHeader_OLD2>(entity =>
        {
            entity.HasKey(e => e.GMH_Holeid).HasName("PK_GeophysMDPHeader");

            entity.ToTable("GeophysMDPHeader_OLD2", "Downhole");

            entity.Property(e => e.GMH_Holeid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Api)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Company)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_HammerType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Null).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Province)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Rigid)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GMH_ServiceCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Start).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Step).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Stop).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_WellIdentifier)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GeophysMWDDetails>(entity =>
        {
            entity.HasKey(e => new { e.GMD_Holeid, e.GMD_Depth });

            entity.Property(e => e.GMD_Holeid)
                .HasMaxLength(21)
                .IsUnicode(false);
            entity.Property(e => e.GMD_Depth).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_HammerVibration).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_HeadSpeed).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_MCS).HasColumnType("decimal(30, 3)");
            entity.Property(e => e.GMD_PenRate).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_Torque).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_UCS).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_WeightOnBit).HasColumnType("decimal(10, 3)");
        });

        modelBuilder.Entity<GeophysMWDDetails_OLD>(entity =>
        {
            entity.HasKey(e => new { e.GMD_Holeid, e.GMD_Depth });

            entity.ToTable("GeophysMWDDetails_OLD", "Downhole");

            entity.Property(e => e.GMD_Holeid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GMD_Depth).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_HammerVibration).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_HeadSpeed).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_MCS).HasColumnType("decimal(20, 3)");
            entity.Property(e => e.GMD_PenRate).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_Torque).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_UCS).HasColumnType("decimal(20, 3)");
            entity.Property(e => e.GMD_WeightOnBit).HasColumnType("decimal(10, 3)");
        });

        modelBuilder.Entity<GeophysMWDDetails_OLD2>(entity =>
        {
            entity.HasKey(e => new { e.GMD_Holeid, e.GMD_Depth }).HasName("PK_GeophysMWDDetails");

            entity.ToTable("GeophysMWDDetails_OLD2", "Downhole");

            entity.Property(e => e.GMD_Holeid)
                .HasMaxLength(21)
                .IsUnicode(false);
            entity.Property(e => e.GMD_Depth).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_HammerVibration).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_HeadSpeed).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_MCS).HasColumnType("decimal(20, 3)");
            entity.Property(e => e.GMD_PenRate).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_Torque).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GMD_UCS).HasColumnType("decimal(20, 3)");
            entity.Property(e => e.GMD_WeightOnBit).HasColumnType("decimal(10, 3)");
        });

        modelBuilder.Entity<GeophysMWDHeader>(entity =>
        {
            entity.HasKey(e => e.GMH_Holeid);

            entity.Property(e => e.GMH_Holeid)
                .HasMaxLength(21)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Api)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Company)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_HammerType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Null).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Province)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Rigid)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GMH_ServiceCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Start).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Step).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Stop).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_WellIdentifier)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GeophysMWDHeader_OLD>(entity =>
        {
            entity.HasKey(e => e.GMH_Holeid);

            entity.ToTable("GeophysMWDHeader_OLD", "Downhole");

            entity.Property(e => e.GMH_Holeid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Api)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Company)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_HammerType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Null).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Province)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Rigid)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GMH_ServiceCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Start).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Step).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Stop).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_WellIdentifier)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GeophysMWDHeader_OLD2>(entity =>
        {
            entity.HasKey(e => e.GMH_Holeid).HasName("PK_GeophysMWDHeader");

            entity.ToTable("GeophysMWDHeader_OLD2", "Downhole");

            entity.Property(e => e.GMH_Holeid)
                .HasMaxLength(21)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Api)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Company)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_HammerType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Null).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Province)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Rigid)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GMH_ServiceCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GMH_Start).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Step).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_Stop).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GMH_WellIdentifier)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HolePurpose>(entity =>
        {
            entity.HasKey(e => e.HP_PurposeType).HasName("PK_HolePurpose_1");

            entity.ToTable("HolePurpose", "Admin");

            entity.Property(e => e.HP_PurposeType)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IRImportFieldMapping>(entity =>
        {
            entity.HasKey(e => new { e.IRLDM_LASField, e.IRLDM_DatabaseField, e.IRLDM_ImportType });

            entity.ToTable("IRImportFieldMapping", "Admin");

            entity.Property(e => e.IRLDM_LASField)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRLDM_DatabaseField)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IRLDM_ImportType)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IRLASCurves>(entity =>
        {
            entity.HasKey(e => new { e.IRGPC_Drillhole, e.IRGPC_ColumnOrder, e.IRGPC_Field }).HasName("PK_IRCurve");

            entity.ToTable("IRLASCurves", "Geophys");

            entity.Property(e => e.IRGPC_Drillhole)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGPC_Field)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGPC_APICode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGPC_Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IRGPC_Units)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.IRGPC_DrillholeNavigation).WithMany(p => p.IRLASCurves)
                .HasForeignKey(d => d.IRGPC_Drillhole)
                .HasConstraintName("FK_IRCurve_IRHeader");
        });

        modelBuilder.Entity<IRLASHeader>(entity =>
        {
            entity.HasKey(e => e.IRGPH_Drillhole);

            entity.ToTable("IRLASHeader", "Geophys");

            entity.Property(e => e.IRGPH_Drillhole)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGPH_County)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGPH_FieldName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGPH_LASVersion)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IRGPH_LicenceNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGPH_Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IRGPH_Mine)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGPH_Province)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGPH_ServiceCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IRGPH_StartDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.IRGPH_StartDepthUnits)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IRGPH_State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IRGPH_StepDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.IRGPH_StepDepthUnits)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IRGPH_StopDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.IRGPH_StopDepthUnits)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IRGPH_SurveyType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IRGPH_TargetCompany)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IRLASHeaderDetails>(entity =>
        {
            entity.HasKey(e => new { e.IRGHD_Drillhole, e.IRGHD_FileIdentifier }).HasName("PK_IRHeaderDetails");

            entity.ToTable("IRLASHeaderDetails", "Geophys");

            entity.Property(e => e.IRGHD_Drillhole)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_FileIdentifier)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_BitSize).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.IRGHD_CasingBottom).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.IRGHD_CasingDiameter).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.IRGHD_CasingThickness).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.IRGHD_CasingType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_DeltaTMatrix).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.IRGHD_DensityMatrix).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.IRGHD_DensityToolSerial)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_DensityToolSource)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_DeviationOrientation).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.IRGHD_DrillerMeasuredFrom)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_DrillersDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.IRGHD_Easting).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGHD_ElectronCutoff).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGHD_ElevationGroundLevel).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.IRGHD_Filetype)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_FluidLevel).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.IRGHD_FluidType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_GyroToolSerial)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_Latitude).HasColumnType("decimal(10, 7)");
            entity.Property(e => e.IRGHD_LogMeasuredFrom)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_LoggingBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_LoggingUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_Longitude).HasColumnType("decimal(10, 7)");
            entity.Property(e => e.IRGHD_MagneticDeclination).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.IRGHD_MagneticSusceptabilityToolSerial)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_NeutronMatrix)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_Northing).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGHD_OtherServicePrimary)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_OtherServiceSecondary)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_OtherServiceTertiary)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_PermanentData)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_ReadingTime)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_SonicToolSerial)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_SourceIdentifier)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_SystemSerial)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_SystemVersion)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_ToolSerialNumber)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IRGHD_TruckCalibrationNumber)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.IRGHD_DrillholeNavigation).WithMany(p => p.IRLASHeaderDetails)
                .HasForeignKey(d => d.IRGHD_Drillhole)
                .HasConstraintName("FK_IRHeaderDetails_IRHeader");
        });

        modelBuilder.Entity<IRLASReadings>(entity =>
        {
            entity.HasKey(e => new { e.IRGPR_Drillhole, e.IRGPR_ReadingDepth });

            entity.ToTable("IRLASReadings", "Geophys");

            entity.Property(e => e.IRGPR_Drillhole)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IRGPR_ReadingDepth).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_Azimuth).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_Caliper).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_Density).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_DensityH).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_DensityPorosity).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_DepthDifference).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_Dip).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_Distance).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_EastDeviation).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_FluidResistivity).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_InRodGamma).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_LSD).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_LSDCorrected).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_MagVect).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_NaturalGamma).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_NorthDeviation).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_OpenHoleGamma).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_SAngle).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_SAngleB).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_SSD).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_ShortGuardResistivity).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_SingleNeutron).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_Stat).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_Susceptibility).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_Temperature).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_TrueDepth).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_XInclination).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_YFlux).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.IRGPR_ZFlux).HasColumnType("decimal(10, 3)");

            entity.HasOne(d => d.IRGPR_DrillholeNavigation).WithMany(p => p.IRLASReadings)
                .HasForeignKey(d => d.IRGPR_Drillhole)
                .HasConstraintName("FK_IRReadings_IRHeader");
        });

        modelBuilder.Entity<ImportFieldMapping>(entity =>
        {
            entity.HasKey(e => new { e.LDM_LASField, e.LDM_DatabaseField, e.LDM_ImportType });

            entity.ToTable("ImportFieldMapping", "Admin");

            entity.Property(e => e.LDM_LASField)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LDM_DatabaseField)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LDM_ImportType)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LASCurves>(entity =>
        {
            entity.HasKey(e => new { e.GPC_Drillhole, e.GPC_ColumnOrder, e.GPC_Field }).HasName("PK_Curve");

            entity.ToTable("LASCurves", "Geophys");

            entity.Property(e => e.GPC_Drillhole)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPC_Field)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPC_APICode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPC_Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GPC_Units)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.GPC_DrillholeNavigation).WithMany(p => p.LASCurves)
                .HasForeignKey(d => d.GPC_Drillhole)
                .HasConstraintName("FK_Curve_Header");
        });

        modelBuilder.Entity<LASHeader>(entity =>
        {
            entity.HasKey(e => e.GPH_Drillhole).HasName("PK_Header_1");

            entity.ToTable("LASHeader", "Geophys");

            entity.Property(e => e.GPH_Drillhole)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPH_County)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPH_FieldName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPH_LASVersion)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_LicenceNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPH_Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GPH_Mine)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPH_Province)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPH_ServiceCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GPH_StartDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPH_StartDepthUnits)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GPH_StepDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPH_StepDepthUnits)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_StopDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GPH_StopDepthUnits)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_SurveyType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GPH_TargetCompany)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LASHeaderDetails>(entity =>
        {
            entity.HasKey(e => new { e.GHD_Drillhole, e.GHD_FileIdentifier }).HasName("PK_HeaderDetails");

            entity.ToTable("LASHeaderDetails", "Geophys");

            entity.Property(e => e.GHD_Drillhole)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GHD_FileIdentifier)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GHD_BitSize).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GHD_CasingBottom).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GHD_CasingDiameter).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GHD_CasingThickness).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GHD_CasingType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GHD_DeltaTMatrix).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GHD_DensityMatrix).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GHD_DensityToolSerial)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GHD_DensityToolSource)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GHD_DeviationOrientation).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GHD_DrillerMeasuredFrom)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GHD_DrillersDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GHD_Easting).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GHD_ElectronCutoff).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GHD_ElevationGroundLevel).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GHD_Filetype)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GHD_FluidLevel).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GHD_FluidType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GHD_GyroToolSerial)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GHD_Latitude).HasColumnType("decimal(10, 7)");
            entity.Property(e => e.GHD_LogMeasuredFrom)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GHD_LoggingBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GHD_LoggingUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GHD_Longitude).HasColumnType("decimal(10, 7)");
            entity.Property(e => e.GHD_MagneticDeclination).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GHD_MagneticSusceptabilityToolSerial)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GHD_NeutronMatrix)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GHD_Northing).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GHD_OtherServicePrimary)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GHD_OtherServiceSecondary)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GHD_OtherServiceTertiary)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GHD_PermanentData)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GHD_ReadingTime)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GHD_SonicToolSerial)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GHD_SourceIdentifier)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GHD_SystemSerial)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GHD_SystemVersion)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GHD_ToolSerialNumber)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GHD_TruckCalibrationNumber)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.GHD_DrillholeNavigation).WithMany(p => p.LASHeaderDetails)
                .HasForeignKey(d => d.GHD_Drillhole)
                .HasConstraintName("FK_HeaderDetails_Header");
        });

        modelBuilder.Entity<LASLoggingUpdate>(entity =>
        {
            entity.HasKey(e => e.GLU_Drillhole).HasName("PK_LoggingUpdate");

            entity.ToTable("LASLoggingUpdate", "Geophys");

            entity.Property(e => e.GLU_Drillhole)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GLU_ATVDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GLU_ApproxWaterTableDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GLU_DensityDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GLU_DensitySourceNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLU_DensityToolNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLU_DrilledDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GLU_Easting).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GLU_GyroDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GLU_GyroToolHangupDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GLU_InRodOperator)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLU_InRodServiceCompany)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLU_InRodTruckNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLU_LoggingOperatorsComments).IsUnicode(false);
            entity.Property(e => e.GLU_MagsusDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GLU_Northing).HasColumnType("decimal(11, 3)");
            entity.Property(e => e.GLU_OTVDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GLU_OpenHoleOperator)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLU_OpenHoleServiceCompany)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLU_OpenHoleTVOperator)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLU_OpenHoleTVServiceCompany)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLU_OpenHoleTVTruckNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLU_OpenHoleTruckNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLU_Operation)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GLU_OpticalBoreholeVisibility)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLU_OpticalWaterVisibility)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLU_PadConditionWhenLeft).IsUnicode(false);
            entity.Property(e => e.GLU_PegNumber)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GLU_PercentageOpenHoleLogged).HasColumnType("decimal(4, 1)");
            entity.Property(e => e.GLU_PlannedAzimuth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GLU_PlannedDip).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GLU_RGammaDepth).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.GLU_RGammaToolHangupDepth).HasColumnType("decimal(6, 3)");
        });

        modelBuilder.Entity<LASReadings>(entity =>
        {
            entity.HasKey(e => new { e.GPR_Drillhole, e.GPR_ReadingDepth }).HasName("PK_Readings_1");

            entity.ToTable("LASReadings", "Geophys");

            entity.Property(e => e.GPR_Drillhole)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPR_ReadingDepth).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_Azimuth).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_Caliper).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_Density).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_DensityH).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_DensityPorosity).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_DepthDifference).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_Dip).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_Distance).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_EastDeviation).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_FluidResistivity).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_InRodGamma).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_LSD).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_LSDCorrected).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_MagVect).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_NaturalGamma).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_NorthDeviation).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_OpenHoleGamma).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_SAngle).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_SAngleB).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_SSD).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_ShortGuardResistivity).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_SingleNeutron).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_Stat).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_Susceptibility).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_TL_LSD).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_TL_LSDCorrected).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_TL_SSD).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_Temperature).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_TrueDepth).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_XInclination).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_YFlux).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.GPR_ZFlux).HasColumnType("decimal(10, 3)");

            entity.HasOne(d => d.GPR_DrillholeNavigation).WithMany(p => p.LASReadings)
                .HasForeignKey(d => d.GPR_Drillhole)
                .HasConstraintName("FK_Readings_Header");
        });

        modelBuilder.Entity<LifeOfMinePit>(entity =>
        {
            entity.HasKey(e => e.LOMP_OBJECT);

            entity.ToTable("LifeOfMinePit", "Admin");

            entity.Property(e => e.LOMP_OBJECT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LOMP_Name).HasMaxLength(50);
            entity.Property(e => e.LOMP_SubPit).HasMaxLength(50);
        });

        modelBuilder.Entity<LoggingStrands>(entity =>
        {
            entity.HasKey(e => e.LS_Strand);

            entity.ToTable("LoggingStrands", "Validation");

            entity.Property(e => e.LS_Strand)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LS_Description)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MinePlanningPit>(entity =>
        {
            entity.HasKey(e => new { e.MPP_LoadDate, e.MPP_Region });

            entity.ToTable("MinePlanningPit", "Admin");

            entity.Property(e => e.MPP_Region)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MineSite>(entity =>
        {
            entity.HasKey(e => e.MS_MineSiteName).HasName("PK_MineSite_1");

            entity.ToTable("MineSite", "Admin");

            entity.Property(e => e.MS_MineSiteName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MineralogicalCodes>(entity =>
        {
            entity.HasKey(e => e.MC_Code);

            entity.ToTable("MineralogicalCodes", "Admin");

            entity.Property(e => e.MC_Code)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MC_Active).HasDefaultValue(false);
            entity.Property(e => e.MC_Description)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OreDefDrillPlanning>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.OD_Weekday)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PlannedCollar>(entity =>
        {
            entity.HasKey(e => new { e.PC_Easting, e.PC_Northing });

            entity.ToTable("PlannedCollar", "Admin");

            entity.HasIndex(e => new { e.PC_HistoricID, e.PC_Line820500 }, "NCI_HoleId_Line").IsUnique();

            entity.Property(e => e.PC_HistoricID)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("((''RHRC''+right(''0000''+CONVERT([varchar],abs([DBO].[fn_MROUND]([PC_EASTING],(25))-(820500))/(25)+(1)),(4)))+right(''0000''+CONVERT([varchar],abs([DBO].[fn_MROUND]([PC_Northing],(25))-(7516475))/(25)+(1)),(4)))+pc_tenement");
            entity.Property(e => e.PC_Latitude).HasColumnType("decimal(18, 10)");
            entity.Property(e => e.PC_Line820500)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComputedColumnSql("(case when [PC_EASTING]<=(820500) then 'W' else 'E' end)", false);
            entity.Property(e => e.PC_Longitude).HasColumnType("decimal(18, 10)");
            entity.Property(e => e.PC_Tenement)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SURTECH_ACTIVITY>(entity =>
        {
            entity.HasKey(e => new { e.SA_VEHICLE, e.SA_DATE, e.SA_FROM, e.SA_TO, e.SA_ACTIVITY });

            entity.ToTable("SURTECH_ACTIVITY", "Downhole");

            entity.Property(e => e.SA_VEHICLE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SA_ACTIVITY)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.SA_COMMENT)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SA_DENSITY).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SA_DUMMY).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SA_GEO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SA_HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SA_HOLE_CONDITION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SA_MAGSUS).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.SURTECH_SHIFT).WithMany(p => p.SURTECH_ACTIVITY)
                .HasForeignKey(d => new { d.SA_VEHICLE, d.SA_DATE })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SURTECH_ACTIVITY");
        });

        modelBuilder.Entity<SURTECH_DETAILS>(entity =>
        {
            entity.HasKey(e => new { e.SD_DATE, e.SD_VEHICLE });

            entity.ToTable("SURTECH_DETAILS", "Downhole");

            entity.Property(e => e.SD_VEHICLE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SD_DETAIL)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SD_D_INROD).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SD_INROD).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SD_OPENHOLE).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SD_PCT_IN_ROD).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SD_PCT_LOG).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SD_PCT_OPEN_HOLE).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SD_TOTAL_LOG).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.SURTECH_SHIFT).WithMany(p => p.SURTECH_DETAILS)
                .HasForeignKey(d => new { d.SD_VEHICLE, d.SD_DATE })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SURTECH_DETAILS");
        });

        modelBuilder.Entity<SURTECH_EQUIPMENT>(entity =>
        {
            entity.HasKey(e => new { e.SE_DATE, e.SE_VEHICLE, e.SE_SERVICE, e.SE_MANUFACTURER, e.SE_TOOLTYPE });

            entity.ToTable("SURTECH_EQUIPMENT", "Downhole");

            entity.Property(e => e.SE_VEHICLE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SE_SERVICE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SE_MANUFACTURER)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SE_TOOLTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SE_DESCRIPTION)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SE_SN)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.SURTECH_SHIFT).WithMany(p => p.SURTECH_EQUIPMENT)
                .HasForeignKey(d => new { d.SE_VEHICLE, d.SE_DATE })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SURTECH_EQUIPMENT");
        });

        modelBuilder.Entity<SURTECH_SHIFT>(entity =>
        {
            entity.HasKey(e => new { e.SS_VEHICLE, e.SS_DATE });

            entity.ToTable("SURTECH_SHIFT", "Downhole");

            entity.Property(e => e.SS_VEHICLE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SS_CLIENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SS_LEASE)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.SS_LOCATION)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.SS_OPERATOR)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SS_PROJECT)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SamplePhotos>(entity =>
        {
            entity.HasKey(e => new { e.SP_HoleID, e.SP_From, e.SP_To });

            entity.Property(e => e.SP_HoleID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SP_From).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SP_To).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SP_B).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SP_G).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SP_InAcquire).HasDefaultValue(false);
            entity.Property(e => e.SP_Path)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SP_R).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<TEST_GEOPHYS_VIEWS_JZ>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("TEST_GEOPHYS_VIEWS_JZ");

            entity.Property(e => e.GLC_Azimuth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_AzimuthUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_Caliper)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_CaliperUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_Density)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DensityH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DensityHUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DensityPorosity)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DensityPorosityUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DensityUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_Depth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DepthUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_Distance)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_DistanceUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_EastDeviation)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_EastDeviationUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_FluidResistivity)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_FluidResistivityUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_GamGam)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_GamGamUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_GamNat)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_GamNatUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_Holeid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_MagneticVector)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_MagneticVectorUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NorthDeviation)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_NorthDeviationUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_RGamNat)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_RGamNatUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_Sangle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_SangleBeta)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_SangleBetaUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_SangleUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_Susceptability)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_SusceptabilityUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLC_YFlux)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLC_YFluxUnits)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Company)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Country)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Department)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_DrillStage)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_DrillType)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Easting).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_HolePurpose)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Holeid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Latitude).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_LicenceNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Location)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_Longitude).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_MineSite)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.GLH_NULLSubstituteValue).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_Northing).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_Province)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLH_ServiceCompany)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLH_StartDepth).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_StartDepthUnits)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.GLH_StepInterval).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_StepIntervalUnits)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.GLH_StopDepth).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLH_StopDepthUnits)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.GLH_WellIdentifier)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_BitSize).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_CasingBottom)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_CasingDiameter).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_CasingLogger)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_CasingThickness)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_CasingType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Comment1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Comment2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Comment3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_DeltaTMatrix).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_DensityMatrix).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_DrillerDepth).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_DrillerMeasuredFrom)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Easting).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_ElectronCutoff).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_ElevationGroundLevel)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_ElevationPermanentData)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_FileType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_FileTypeIdentifier)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_FluidType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Holeid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Latitude).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_LogMeasuredFrom)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_LoggingUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Longitude).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_MagneticDeclination).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_MudResistivity)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_MudSampleSource)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_MudTemperature)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_MudWeight).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_NeutronMatrix)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_Northing).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_PermanentData)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_RecordedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GLP_ResistivityMudCake)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_SourceId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_SystemVersion)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GLP_SystsemSerialNumber).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_TemperatureGradient)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_TimeCirculationStopped)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLP_TimeHrHrMinMin).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_ToolSerialNumber).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.GLP_TruckCalibrationNumber).HasColumnType("decimal(12, 5)");
        });

        modelBuilder.Entity<Tenements_MGA50>(entity =>
        {
            entity.HasKey(e => new { e.TENID, e.ZONE }).HasName("PK_Tenements_MGA50_1");

            entity.Property(e => e.TENID)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FMT_TENID)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.HOLDER)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LEGAL_AREA).HasColumnType("decimal(15, 6)");
            entity.Property(e => e.SURVEY_STATUS)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UNIT_OF_ME)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TestCompany>(entity =>
        {
            entity.HasKey(e => new { e.C_ID, e.C_From, e.C_To });

            entity.ToTable("TestCompany", "Admin");

            entity.Property(e => e.C_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.C_From).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.C_To).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.C_CompanyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.C_TF1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.C_TF2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.C_TF3).HasColumnType("decimal(6, 2)");
        });

        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}