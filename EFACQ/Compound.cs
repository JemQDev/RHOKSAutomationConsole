// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;

namespace RHOKSAutomationConsole.EFACQ;

/// <summary>
/// Details the compounds the meta system is aware of.
/// </summary>
public partial class Compound
{
    /// <summary>
    /// The auto incrementing integer primary key.
    /// </summary>
    public int CompoundId { get; set; }

    /// <summary>
    /// The Name of the compound.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// The Label of the compound to be used for display purposes.
    /// </summary>
    public string Label { get; set; }

    /// <summary>
    /// The Compound Level representing the level as defined in CompoundLevel for this compound.
    /// </summary>
    public int? CompoundLevelId { get; set; }

    /// <summary>
    /// Is this compound based on a single table.
    /// </summary>
    public bool IsSingleTable { get; set; }

    /// <summary>
    /// The type of the compound, is the compound a System or User Compound.
    /// </summary>
    public string CompoundType { get; set; }

    public int? TemplateId { get; set; }

    /// <summary>
    /// Flag representing if a compound row should be hidden when there are no virtual fields values.
    /// </summary>
    public bool HideRowWhenNoVirtual { get; set; }

    /// <summary>
    /// Flag representing if the compound should be grouped by its base table fields. This is to flag acQuire 4.x self joining compounds.
    /// </summary>
    public bool GroupByBaseTableFields { get; set; }

    /// <summary>
    /// The Compound Behaviour Type of this compound.
    /// </summary>
    public int CompoundBehaviourTypeId { get; set; }

    /// <summary>
    /// The XML representing the optional filter condition to apply to all queries against this compound.
    /// </summary>
    public string FilterCondition { get; set; }

    /// <summary>
    /// The compound style (e.g. Reference, Data).
    /// </summary>
    public string CompoundStyle { get; set; }

    /// <summary>
    /// The data source which the details of this record were primarily obtained from.
    /// </summary>
    public short DataSourceId { get; set; }

    /// <summary>
    /// Whether or not attributes for fields in this compound need to be loaded to support business logic.
    /// </summary>
    public bool FieldAttributesRequired { get; set; }

    /// <summary>
    /// Id of the parent compound from which this is derived.
    /// </summary>
    public int? ParentCompoundId { get; set; }

    /// <summary>
    /// Whether entities in this compound can be secured.
    /// </summary>
    public bool IsSecured { get; set; }

    /// <summary>
    /// Integer packed set of boolean compound flags.
    /// </summary>
    public int Flags { get; set; }

    public virtual ICollection<AdmCoordinateData> AdmCoordinateData { get; set; } = new List<AdmCoordinateData>();

    public virtual ICollection<CompoundAttribute> CompoundAttribute { get; set; } = new List<CompoundAttribute>();

    public virtual CompoundBehaviourType CompoundBehaviourType { get; set; }

    public virtual ICollection<CompoundField> CompoundField { get; set; } = new List<CompoundField>();

    public virtual ICollection<CompoundKeyAttribute> CompoundKeyAttribute { get; set; } = new List<CompoundKeyAttribute>();

    public virtual CompoundLevel CompoundLevel { get; set; }

    public virtual ICollection<CompoundTable> CompoundTable { get; set; } = new List<CompoundTable>();

    public virtual ICollection<CompoundUniqueness> CompoundUniqueness { get; set; } = new List<CompoundUniqueness>();

    public virtual ICollection<CompoundUserObjectCategory> CompoundUserObjectCategory { get; set; } = new List<CompoundUserObjectCategory>();

    public virtual DataSource DataSource { get; set; }

    public virtual ICollection<DatabaseTable> DatabaseTable { get; set; } = new List<DatabaseTable>();

    public virtual ICollection<FormElement> FormElement { get; set; } = new List<FormElement>();

    public virtual ICollection<Compound> InverseParentCompound { get; set; } = new List<Compound>();

    public virtual Compound ParentCompound { get; set; }

    public virtual ICollection<Range> Range { get; set; } = new List<Range>();

    public virtual ICollection<Relationship> RelationshipCompound1 { get; set; } = new List<Relationship>();

    public virtual ICollection<Relationship> RelationshipCompound2 { get; set; } = new List<Relationship>();

    public virtual Template Template { get; set; }

    public virtual ICollection<ObjectCategory> ObjectCategoryGlobal { get; set; } = new List<ObjectCategory>();

    public virtual ICollection<PropertyObject> PropertyObjectGlobal { get; set; } = new List<PropertyObject>();
}