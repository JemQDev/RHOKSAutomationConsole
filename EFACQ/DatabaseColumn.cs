// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;

namespace RHOKSAutomationConsole.EFACQ;

/// <summary>
/// Details the columns in the database.
/// </summary>
public partial class DatabaseColumn
{
    /// <summary>
    /// The auto incrementing integer primary key.
    /// </summary>
    public int DatabaseColumnId { get; set; }

    /// <summary>
    /// The database table or view this column belongs to.
    /// </summary>
    public int DatabaseTableId { get; set; }

    /// <summary>
    /// The Name of the database column.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// The Order in which the fields exist in the table or view.
    /// </summary>
    public int OrderNumber { get; set; }

    /// <summary>
    /// The datatype of the field.
    /// </summary>
    public string Datatype { get; set; }

    /// <summary>
    /// The Mica datatype associated with this field&apos;s SQL Server datatype.
    /// </summary>
    public string MicaDatatype { get; set; }

    /// <summary>
    /// The Size of the field.
    /// </summary>
    public int? Size { get; set; }

    /// <summary>
    /// Is the field part of the primary key .
    /// </summary>
    public bool IsPrimaryKeyField { get; set; }

    /// <summary>
    /// Is the field nullable.
    /// </summary>
    public bool IsNullable { get; set; }

    /// <summary>
    /// The field type to be inherited by compound fields based on this column, where this differs from Datatype.
    /// </summary>
    public int? FieldTypeId { get; set; }

    /// <summary>
    /// Can the fields value be created by the database on insert.
    /// </summary>
    public bool IsGenerated { get; set; }

    public virtual ICollection<CompoundField> CompoundField { get; set; } = new List<CompoundField>();

    public virtual DatabaseTable DatabaseTable { get; set; }

    public virtual ICollection<VirtualField> VirtualFieldCodeColumn { get; set; } = new List<VirtualField>();

    public virtual ICollection<VirtualField> VirtualFieldValueColumn { get; set; } = new List<VirtualField>();
}