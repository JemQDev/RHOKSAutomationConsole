// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;

namespace RHOKSAutomationConsole.EFACQ;

/// <summary>
/// Details the compounds which will be listed in AcQuire Object Models.
/// </summary>
public partial class AdmQomCompound
{
    /// <summary>
    /// The auto incrementing integer primary key.
    /// </summary>
    public int AdmQomCompoundId { get; set; }

    /// <summary>
    /// A template to use for the internal name of this compound. Can use %name% as a placeholder to be substitued or can simply be a straight name requiring no substitution.
    /// </summary>
    public string NameTemplate { get; set; }

    /// <summary>
    /// A template to use for the external name that will be shown in the UI. Can use %name% as a placeholder to be substitued or can simply be a straight name requiring no substitution.
    /// </summary>
    public string LabelTemplate { get; set; }

    /// <summary>
    /// The schema of the table on which this compound is primarily based.
    /// </summary>
    public string PrimaryBaseTableSchema { get; set; }

    /// <summary>
    /// The table on which this compound is primarily based.
    /// </summary>
    public string PrimaryBaseTableName { get; set; }

    /// <summary>
    /// The schema of the table from which the compound&apos;s filter condition can be applied.
    /// </summary>
    public string FilterTableSchema { get; set; }

    /// <summary>
    /// The table from which the left hand side of the compound&apos;s filter condition can be applied.
    /// </summary>
    public string FilterTableName { get; set; }

    /// <summary>
    /// The field in the filter table from which the left hand side of the compound&apos;s filter condition can be applied.
    /// </summary>
    public string FilterFieldName { get; set; }

    /// <summary>
    /// The operator to apply to the filter condition.
    /// </summary>
    public string FilterConditionOperator { get; set; }

    /// <summary>
    /// The value to apply to the right hand side of the filter condition.
    /// </summary>
    public string FilterConditionValue { get; set; }

    /// <summary>
    /// Preformatted details of any filter required to be applied. Mutually exclusive with the unformatted Filter columns.
    /// </summary>
    public string FilterCondition { get; set; }

    /// <summary>
    /// Whether or not the row represents a set of Geology Intervals. If true, a set of compounds will be generated, one each for the rows in GEOLOGYCODEPRIMARY.
    /// </summary>
    public bool IsGeologyInterval { get; set; }

    /// <summary>
    /// Whether or not the compounds related to this record should be joined to other Geology type compounds using range based derived relationships.
    /// </summary>
    public bool IsGeologyIntervalJoin { get; set; }

    /// <summary>
    /// Whether or not compound(s) defined by this record should have a range attribute associated with them.
    /// </summary>
    public bool IsRangeCompound { get; set; }

    /// <summary>
    /// If IsRangeCompound is set, this is the name of the range&apos;s from field to use in the compound created.
    /// </summary>
    public string RangeFromFieldName { get; set; }

    /// <summary>
    /// If IsRangeCompound is set, this is the name of the range&apos;s to field to use in the compound created.
    /// </summary>
    public string RangeToFieldName { get; set; }

    /// <summary>
    /// The compound style (e.g. Reference, Data).
    /// </summary>
    public string CompoundStyle { get; set; }

    /// <summary>
    /// The name of the ADM module to which the QOM compound is related.
    /// </summary>
    public string AdmModuleName { get; set; }

    /// <summary>
    /// The minimum meta version, as determined by METATABLEVERSION.METAVERSION, for which the compound is valid.
    /// </summary>
    public short? MinimumAdmMetaVersion { get; set; }

    /// <summary>
    /// The name of the compound behaviour type to be associated with this QOM compound.
    /// </summary>
    public string CompoundBehaviourTypeName { get; set; }

    /// <summary>
    /// The presentation style of the compound.
    /// </summary>
    public bool IsLegacy { get; set; }

    /// <summary>
    /// When true mark all derived fields unavailable.
    /// </summary>
    public bool HideDerivedFields { get; set; }

    /// <summary>
    /// When true mark coordinates should be unavailable for this compound.
    /// </summary>
    public bool HideCoordinates { get; set; }

    public virtual ICollection<AdmQomCompoundAttribute> AdmQomCompoundAttribute { get; set; } = new List<AdmQomCompoundAttribute>();

    public virtual ICollection<AdmQomCompoundBaseTable> AdmQomCompoundBaseTable { get; set; } = new List<AdmQomCompoundBaseTable>();

    public virtual ICollection<AdmQomCompoundCategoryPath> AdmQomCompoundCategoryPath { get; set; } = new List<AdmQomCompoundCategoryPath>();

    public virtual ICollection<AdmQomCompoundField> AdmQomCompoundField { get; set; } = new List<AdmQomCompoundField>();

    public virtual ICollection<AdmQomCompoundRangeGroupingElement> AdmQomCompoundRangeGroupingElement { get; set; } = new List<AdmQomCompoundRangeGroupingElement>();

    public virtual ICollection<AdmQomCompoundVirtualTable> AdmQomCompoundVirtualTable { get; set; } = new List<AdmQomCompoundVirtualTable>();

    public virtual ICollection<AdmQomInheritedCompound> AdmQomInheritedCompound { get; set; } = new List<AdmQomInheritedCompound>();

    public virtual ICollection<AdmQomRelationship> AdmQomRelationshipSourceQomCompound { get; set; } = new List<AdmQomRelationship>();

    public virtual ICollection<AdmQomRelationship> AdmQomRelationshipTargetQomCompound { get; set; } = new List<AdmQomRelationship>();

    public virtual CompoundBehaviourType CompoundBehaviourTypeNameNavigation { get; set; }

    public virtual ICollection<AdmQomObjectCategory> ObjectCategoryGlobal { get; set; } = new List<AdmQomObjectCategory>();

    public virtual ICollection<AdmQomContextDefinition> PropertyObjectGlobal { get; set; } = new List<AdmQomContextDefinition>();
}