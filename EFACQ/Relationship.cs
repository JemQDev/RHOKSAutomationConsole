// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;

namespace RHOKSAutomationConsole.EFACQ;

/// <summary>
/// Details the relationships between compounds.
/// </summary>
public partial class Relationship
{
    /// <summary>
    /// The auto incrementing integer primary key.
    /// </summary>
    public int RelationshipId { get; set; }

    /// <summary>
    /// The Name of the relationship.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// The First Compound in the relationship.
    /// </summary>
    public int Compound1Id { get; set; }

    /// <summary>
    /// The Second Compound in the relationship.
    /// </summary>
    public int Compound2Id { get; set; }

    /// <summary>
    /// Outlines the type of relationship between the two compounds, Either &quot;OneToMany&quot;, &quot;ManyToOne&quot;, &quot;ManyToMany&quot;, or &quot;OneToOne&quot;.
    /// </summary>
    public string RelationshipDirection { get; set; }

    /// <summary>
    /// Outlines if the source compound is a parent compound of the target.
    /// </summary>
    public bool IsParent { get; set; }

    /// <summary>
    /// The Type of join between the two tables, either Equality or Derived.
    /// </summary>
    public string JoinType { get; set; }

    public string DefaultOrderingCondition { get; set; }

    public string DefaultFilterCondition { get; set; }

    /// <summary>
    /// The link to the same relationship in the opposite direction.
    /// </summary>
    public int? ReverseRelationshipId { get; set; }

    /// <summary>
    /// The join condition string for this relationship.
    /// </summary>
    public string JoinCondition { get; set; }

    /// <summary>
    /// Should the relationship be visible to users.
    /// </summary>
    public bool IsVisible { get; set; }

    /// <summary>
    /// The data source which the details of this record were primarily obtained from.
    /// </summary>
    public short DataSourceId { get; set; }

    /// <summary>
    /// The Label of the relationship.
    /// </summary>
    public string Label { get; set; }

    /// <summary>
    /// Flag indicating that the relationship must be set on the source compound.
    /// </summary>
    public bool IsRequired { get; set; }

    /// <summary>
    /// Specifies kind of relationship with respect to rule propagation.
    /// </summary>
    public string RuleBehavior { get; set; }

    public virtual Compound Compound1 { get; set; }

    public virtual Compound Compound2 { get; set; }

    public virtual ICollection<CompoundTableRelationship> CompoundTableRelationship { get; set; } = new List<CompoundTableRelationship>();

    public virtual ICollection<CompoundUniquenessField> CompoundUniquenessField { get; set; } = new List<CompoundUniquenessField>();

    public virtual DataSource DataSource { get; set; }

    public virtual ICollection<DerivedRelationshipIndirectRelationship> DerivedRelationshipIndirectRelationshipDerivedRelationship { get; set; } = new List<DerivedRelationshipIndirectRelationship>();

    public virtual ICollection<DerivedRelationshipIndirectRelationship> DerivedRelationshipIndirectRelationshipIndirectRelationship { get; set; } = new List<DerivedRelationshipIndirectRelationship>();

    public virtual ICollection<Relationship> InverseReverseRelationship { get; set; } = new List<Relationship>();

    public virtual ICollection<RangeGroupingElement> RangeGroupingElement { get; set; } = new List<RangeGroupingElement>();

    public virtual ICollection<RelationshipConditionalJoin> RelationshipConditionalJoin { get; set; } = new List<RelationshipConditionalJoin>();

    public virtual ICollection<RelationshipJoin> RelationshipJoin { get; set; } = new List<RelationshipJoin>();

    public virtual ICollection<RelationshipOrdering> RelationshipOrdering { get; set; } = new List<RelationshipOrdering>();

    public virtual RelationshipPathing RelationshipPathing { get; set; }

    public virtual Relationship ReverseRelationship { get; set; }
}