// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;

namespace RHOKSAutomationConsole.EFACQ;

/// <summary>
/// Details the tables and views in the database.
/// </summary>
public partial class DatabaseTable
{
    /// <summary>
    /// The auto incrementing integer primary key.
    /// </summary>
    public int DatabaseTableId { get; set; }

    /// <summary>
    /// The Name of the database table or view, this can include synonyms.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// The Schema the database table or view belongs to.
    /// </summary>
    public string Schema { get; set; }

    /// <summary>
    /// The Table Category of this table.
    /// </summary>
    public int TableCategoryId { get; set; }

    /// <summary>
    /// The order in which the tables should be loaded.
    /// </summary>
    public int? LoadOrder { get; set; }

    /// <summary>
    /// The Type of Table, Base Table, View, etc.
    /// </summary>
    public string TableType { get; set; }

    /// <summary>
    /// The Name of the base table for this table. This is to allow for cases where a table has a covering synonym.
    /// </summary>
    public string BaseTableName { get; set; }

    /// <summary>
    /// The Table Object Id as according to sys.tables.
    /// </summary>
    public int TableObjectId { get; set; }

    /// <summary>
    /// The Table Compound definition that relates to this table.
    /// </summary>
    public int? CompoundId { get; set; }

    /// <summary>
    /// The data source which the details of this record were primarily obtained from.
    /// </summary>
    public short DataSourceId { get; set; }

    public virtual Compound Compound { get; set; }

    public virtual ICollection<CompoundField> CompoundField { get; set; } = new List<CompoundField>();

    public virtual ICollection<CompoundTable> CompoundTable { get; set; } = new List<CompoundTable>();

    public virtual DataSource DataSource { get; set; }

    public virtual ICollection<DatabaseColumn> DatabaseColumn { get; set; } = new List<DatabaseColumn>();

    public virtual TableCategory TableCategory { get; set; }
}