// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;

namespace RHOKSAutomationConsole.EFACQ;

/// <summary>
/// Details the unique key combinations for each compound.
/// </summary>
public partial class CompoundUniqueness
{
    /// <summary>
    /// The auto incrementing integer primary key.
    /// </summary>
    public int CompoundUniquenessId { get; set; }

    /// <summary>
    /// A unique name generated for this uniqueness. This is based on the Name of the compound, and the keys making comprising uniqueness.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// The Compound this uniqueness relates to.
    /// </summary>
    public int CompoundId { get; set; }

    /// <summary>
    /// Is this unique key the primary key.
    /// </summary>
    public bool IsPrimaryKey { get; set; }

    /// <summary>
    /// Whether or not this uniqueness should be the uniqueness used to uniquely identify records in this table by the system. Generally this is the primary key, but could be a unique key in the absence of a primary key.
    /// </summary>
    public bool IsUniqueId { get; set; }

    /// <summary>
    /// Whether or not this uniqueness represents the physical order of the data in the table (i.e. whether or not it is the clustered index).
    /// </summary>
    public bool IsPhysicalOrder { get; set; }

    /// <summary>
    /// Whether or not this uniqueness represents the natural key of the data in the compound. Generally this will be the same as the primary and unique key, except when a surrogate key system is in use.
    /// </summary>
    public bool IsNaturalKey { get; set; }

    /// <summary>
    /// The data source which the details of this record were primarily obtained from.
    /// </summary>
    public short DataSourceId { get; set; }

    /// <summary>
    /// For compound uniquenesses based on a database constraint, the constraint name.
    /// </summary>
    public string ConstraintName { get; set; }

    /// <summary>
    /// For all records where this condition is met the uniqueness is enforced.
    /// </summary>
    public string FilterCondition { get; set; }

    /// <summary>
    /// Whether or not this uniqueness represents the primary local unique identifier of the data in the compound.
    /// </summary>
    public bool IsLocalId { get; set; }

    /// <summary>
    /// Whether or not this uniqueness represents the global identifier of the data in the compound.
    /// </summary>
    public bool IsGlobalId { get; set; }

    public virtual Compound Compound { get; set; }

    public virtual ICollection<CompoundUniquenessField> CompoundUniquenessField { get; set; } = new List<CompoundUniquenessField>();
}