// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace RHOKSAutomationConsole.EFACQ;

public partial class ACQContext : DbContext
{
    public ACQContext(DbContextOptions<ACQContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AA_ASSAY_tblStandardSamp> AA_ASSAY_tblStandardSamp { get; set; }

    public virtual DbSet<AA_ASSAY_tblStandardSampP1> AA_ASSAY_tblStandardSampP1 { get; set; }

    public virtual DbSet<AA_ASSAY_tblStandardSampP2> AA_ASSAY_tblStandardSampP2 { get; set; }

    public virtual DbSet<AA_ASSAY_tblStandardSampQC> AA_ASSAY_tblStandardSampQC { get; set; }

    public virtual DbSet<AA_DRILL_DESIGN_DETAILS_EXTENDED> AA_DRILL_DESIGN_DETAILS_EXTENDED { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORT> AC_ACTIVITYREPORT { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORTBIGCOMMENT> AC_ACTIVITYREPORTBIGCOMMENT { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORTBIGCOMMENTCODE> AC_ACTIVITYREPORTBIGCOMMENTCODE { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORTCODE> AC_ACTIVITYREPORTCODE { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORTCOMMENT> AC_ACTIVITYREPORTCOMMENT { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORTCOMMENTCODE> AC_ACTIVITYREPORTCOMMENTCODE { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORTDETAILS> AC_ACTIVITYREPORTDETAILS { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORTITEM> AC_ACTIVITYREPORTITEM { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORTITEMBIGCOMMENT> AC_ACTIVITYREPORTITEMBIGCOMMENT { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORTITEMBIGCOMMENTCODE> AC_ACTIVITYREPORTITEMBIGCOMMENTCODE { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORTITEMCODE> AC_ACTIVITYREPORTITEMCODE { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORTITEMCOMMENT> AC_ACTIVITYREPORTITEMCOMMENT { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORTITEMCOMMENTCODE> AC_ACTIVITYREPORTITEMCOMMENTCODE { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORTITEMDETAILS> AC_ACTIVITYREPORTITEMDETAILS { get; set; }

    public virtual DbSet<AC_ACTIVITYREPORTITEMPARAMETER> AC_ACTIVITYREPORTITEMPARAMETER { get; set; }

    public virtual DbSet<AC_CONTRACT> AC_CONTRACT { get; set; }

    public virtual DbSet<AC_CONTRACTBIGCOMMENT> AC_CONTRACTBIGCOMMENT { get; set; }

    public virtual DbSet<AC_CONTRACTBIGCOMMENTCODE> AC_CONTRACTBIGCOMMENTCODE { get; set; }

    public virtual DbSet<AC_CONTRACTCATEGORY> AC_CONTRACTCATEGORY { get; set; }

    public virtual DbSet<AC_CONTRACTCODE> AC_CONTRACTCODE { get; set; }

    public virtual DbSet<AC_CONTRACTCOMMENT> AC_CONTRACTCOMMENT { get; set; }

    public virtual DbSet<AC_CONTRACTCOMMENTCODE> AC_CONTRACTCOMMENTCODE { get; set; }

    public virtual DbSet<AC_CONTRACTDETAILS> AC_CONTRACTDETAILS { get; set; }

    public virtual DbSet<AC_CONTRACTITEM> AC_CONTRACTITEM { get; set; }

    public virtual DbSet<AC_CONTRACTITEMTYPE> AC_CONTRACTITEMTYPE { get; set; }

    public virtual DbSet<AC_CONTRACTITEMTYPEGROUP> AC_CONTRACTITEMTYPEGROUP { get; set; }

    public virtual DbSet<AC_DESPATCHSENDACTIVITYREPORTITEM> AC_DESPATCHSENDACTIVITYREPORTITEM { get; set; }

    public virtual DbSet<AC_EQUIPMENTTYPE> AC_EQUIPMENTTYPE { get; set; }

    public virtual DbSet<AC_HOLELOCATIONACTIVITYREPORTITEM> AC_HOLELOCATIONACTIVITYREPORTITEM { get; set; }

    public virtual DbSet<AC_INVOICE> AC_INVOICE { get; set; }

    public virtual DbSet<AC_INVOICEACTIVITY> AC_INVOICEACTIVITY { get; set; }

    public virtual DbSet<AC_INVOICEBIGCOMMENT> AC_INVOICEBIGCOMMENT { get; set; }

    public virtual DbSet<AC_INVOICEBIGCOMMENTCODE> AC_INVOICEBIGCOMMENTCODE { get; set; }

    public virtual DbSet<AC_INVOICECODE> AC_INVOICECODE { get; set; }

    public virtual DbSet<AC_INVOICEDETAILS> AC_INVOICEDETAILS { get; set; }

    public virtual DbSet<AC_INVOICELOCK> AC_INVOICELOCK { get; set; }

    public virtual DbSet<AC_JOB> AC_JOB { get; set; }

    public virtual DbSet<AC_JOBBIGCOMMENT> AC_JOBBIGCOMMENT { get; set; }

    public virtual DbSet<AC_JOBBIGCOMMENTCODE> AC_JOBBIGCOMMENTCODE { get; set; }

    public virtual DbSet<AC_JOBCODE> AC_JOBCODE { get; set; }

    public virtual DbSet<AC_JOBCOMMENT> AC_JOBCOMMENT { get; set; }

    public virtual DbSet<AC_JOBCOMMENTCODE> AC_JOBCOMMENTCODE { get; set; }

    public virtual DbSet<AC_JOBDETAILS> AC_JOBDETAILS { get; set; }

    public virtual DbSet<ANALYSISMETHOD> ANALYSISMETHOD { get; set; }

    public virtual DbSet<ANALYSISSUITE> ANALYSISSUITE { get; set; }

    public virtual DbSet<AREA> AREA { get; set; }

    public virtual DbSet<AREACODE> AREACODE { get; set; }

    public virtual DbSet<AREADETAILS> AREADETAILS { get; set; }

    public virtual DbSet<ASSAYDETECTION> ASSAYDETECTION { get; set; }

    public virtual DbSet<ASSAYGENERICCODE> ASSAYGENERICCODE { get; set; }

    public virtual DbSet<ASSAYLABORATORY> ASSAYLABORATORY { get; set; }

    public virtual DbSet<ASSAYTRANSLATION> ASSAYTRANSLATION { get; set; }

    public virtual DbSet<ASSAYTYPE> ASSAYTYPE { get; set; }

    public virtual DbSet<AUTO_CACHEGROUP> AUTO_CACHEGROUP { get; set; }

    public virtual DbSet<AUTO_CACHEGROUPFORM> AUTO_CACHEGROUPFORM { get; set; }

    public virtual DbSet<AUTO_INTEGRATION> AUTO_INTEGRATION { get; set; }

    public virtual DbSet<AUTO_INTEGRATIONSECTION> AUTO_INTEGRATIONSECTION { get; set; }

    public virtual DbSet<AUTO_JOB> AUTO_JOB { get; set; }

    public virtual DbSet<AUTO_JOBRUN> AUTO_JOBRUN { get; set; }

    public virtual DbSet<AUTO_JOBTASK> AUTO_JOBTASK { get; set; }

    public virtual DbSet<AUTO_LOG> AUTO_LOG { get; set; }

    public virtual DbSet<AUTO_MAILATTACHMENT> AUTO_MAILATTACHMENT { get; set; }

    public virtual DbSet<AUTO_MAILQUEUE> AUTO_MAILQUEUE { get; set; }

    public virtual DbSet<AUTO_MAILTEMPLATE> AUTO_MAILTEMPLATE { get; set; }

    public virtual DbSet<AUTO_SCHEDULE> AUTO_SCHEDULE { get; set; }

    public virtual DbSet<AV_BESTCOORDS> AV_BESTCOORDS { get; set; }

    public virtual DbSet<AV_BESTCOORDSNOTCALCULATED> AV_BESTCOORDSNOTCALCULATED { get; set; }

    public virtual DbSet<AV_GIS_ApprovedHole_NotDrilledYet> AV_GIS_ApprovedHole_NotDrilledYet { get; set; }

    public virtual DbSet<AV_GIS_Holes_Completed_DateFormatted> AV_GIS_Holes_Completed_DateFormatted { get; set; }

    public virtual DbSet<AV_GIS_Holes_Rehabbed> AV_GIS_Holes_Rehabbed { get; set; }

    public virtual DbSet<AV_GIS_MaxAssays> AV_GIS_MaxAssays { get; set; }

    public virtual DbSet<AV_GIS_Water_Conductivity> AV_GIS_Water_Conductivity { get; set; }

    public virtual DbSet<AV_GIS_Water_Dipping> AV_GIS_Water_Dipping { get; set; }

    public virtual DbSet<AV_GIS_Water_Monitoring> AV_GIS_Water_Monitoring { get; set; }

    public virtual DbSet<AV_MOD_Assay> AV_MOD_Assay { get; set; }

    public virtual DbSet<AV_MOD_Assay_Valid> AV_MOD_Assay_Valid { get; set; }

    public virtual DbSet<AV_MOD_Collar> AV_MOD_Collar { get; set; }

    public virtual DbSet<AV_MOD_Collar_Status> AV_MOD_Collar_Status { get; set; }

    public virtual DbSet<AV_MOD_Collar_Valid> AV_MOD_Collar_Valid { get; set; }

    public virtual DbSet<AV_MOD_Data> AV_MOD_Data { get; set; }

    public virtual DbSet<AV_MOD_Geology> AV_MOD_Geology { get; set; }

    public virtual DbSet<AV_MOD_Geology_Valid> AV_MOD_Geology_Valid { get; set; }

    public virtual DbSet<AV_MOD_Geophys> AV_MOD_Geophys { get; set; }

    public virtual DbSet<AV_MOD_Geophys_Valid> AV_MOD_Geophys_Valid { get; set; }

    public virtual DbSet<AV_MOD_Planned> AV_MOD_Planned { get; set; }

    public virtual DbSet<AV_MOD_Survey> AV_MOD_Survey { get; set; }

    public virtual DbSet<AV_MOD_Survey_Valid> AV_MOD_Survey_Valid { get; set; }

    public virtual DbSet<AV_MS_Collar> AV_MS_Collar { get; set; }

    public virtual DbSet<AV_QAQC_Field_Duplicate_Stats> AV_QAQC_Field_Duplicate_Stats { get; set; }

    public virtual DbSet<AV_QAQC_Lab_Standard_Stats> AV_QAQC_Lab_Standard_Stats { get; set; }

    public virtual DbSet<AZIMUTHTYPE> AZIMUTHTYPE { get; set; }

    public virtual DbSet<AccessRights> AccessRights { get; set; }

    public virtual DbSet<AdmAssayType> AdmAssayType { get; set; }

    public virtual DbSet<AdmCategoryObjectCategory> AdmCategoryObjectCategory { get; set; }

    public virtual DbSet<AdmChangeLevel> AdmChangeLevel { get; set; }

    public virtual DbSet<AdmCompoundBehaviour> AdmCompoundBehaviour { get; set; }

    public virtual DbSet<AdmCompoundVirtualTable> AdmCompoundVirtualTable { get; set; }

    public virtual DbSet<AdmCoordinateData> AdmCoordinateData { get; set; }

    public virtual DbSet<AdmDateRange> AdmDateRange { get; set; }

    public virtual DbSet<AdmDateRangeFieldType> AdmDateRangeFieldType { get; set; }

    public virtual DbSet<AdmDerivedField> AdmDerivedField { get; set; }

    public virtual DbSet<AdmDerivedFieldParameter> AdmDerivedFieldParameter { get; set; }

    public virtual DbSet<AdmElement> AdmElement { get; set; }

    public virtual DbSet<AdmElementRankingWarning> AdmElementRankingWarning { get; set; }

    public virtual DbSet<AdmErrorMessage> AdmErrorMessage { get; set; }

    public virtual DbSet<AdmErrorMessageProcedure> AdmErrorMessageProcedure { get; set; }

    public virtual DbSet<AdmFailedDerivedField> AdmFailedDerivedField { get; set; }

    public virtual DbSet<AdmFailedVirtualField> AdmFailedVirtualField { get; set; }

    public virtual DbSet<AdmHoleGridLocalRankedCoordinate> AdmHoleGridLocalRankedCoordinate { get; set; }

    public virtual DbSet<AdmHoleGridProjectedRankedCoordinate> AdmHoleGridProjectedRankedCoordinate { get; set; }

    public virtual DbSet<AdmHoleProjectedRankedCoordinate> AdmHoleProjectedRankedCoordinate { get; set; }

    public virtual DbSet<AdmHoleRankedLocalCoordinate> AdmHoleRankedLocalCoordinate { get; set; }

    public virtual DbSet<AdmHoleRankedProjectedCoordinate> AdmHoleRankedProjectedCoordinate { get; set; }

    public virtual DbSet<AdmIntegration> AdmIntegration { get; set; }

    public virtual DbSet<AdmIntegrationSection> AdmIntegrationSection { get; set; }

    public virtual DbSet<AdmJob> AdmJob { get; set; }

    public virtual DbSet<AdmJobRun> AdmJobRun { get; set; }

    public virtual DbSet<AdmJobTask> AdmJobTask { get; set; }

    public virtual DbSet<AdmMailAttachment> AdmMailAttachment { get; set; }

    public virtual DbSet<AdmMailQueue> AdmMailQueue { get; set; }

    public virtual DbSet<AdmMailTemplate> AdmMailTemplate { get; set; }

    public virtual DbSet<AdmManualCompoundInclusion> AdmManualCompoundInclusion { get; set; }

    public virtual DbSet<AdmManualUriField> AdmManualUriField { get; set; }

    public virtual DbSet<AdmMvtGeologyCompound> AdmMvtGeologyCompound { get; set; }

    public virtual DbSet<AdmProcessingTypeEventType> AdmProcessingTypeEventType { get; set; }

    public virtual DbSet<AdmProcessingWarning> AdmProcessingWarning { get; set; }

    public virtual DbSet<AdmProcessingWarningCache> AdmProcessingWarningCache { get; set; }

    public virtual DbSet<AdmProjectValidation> AdmProjectValidation { get; set; }

    public virtual DbSet<AdmQomCategoryPath> AdmQomCategoryPath { get; set; }

    public virtual DbSet<AdmQomCompound> AdmQomCompound { get; set; }

    public virtual DbSet<AdmQomCompoundAttribute> AdmQomCompoundAttribute { get; set; }

    public virtual DbSet<AdmQomCompoundBaseTable> AdmQomCompoundBaseTable { get; set; }

    public virtual DbSet<AdmQomCompoundCategoryPath> AdmQomCompoundCategoryPath { get; set; }

    public virtual DbSet<AdmQomCompoundField> AdmQomCompoundField { get; set; }

    public virtual DbSet<AdmQomCompoundName> AdmQomCompoundName { get; set; }

    public virtual DbSet<AdmQomCompoundRangeGroupingElement> AdmQomCompoundRangeGroupingElement { get; set; }

    public virtual DbSet<AdmQomCompoundResolved> AdmQomCompoundResolved { get; set; }

    public virtual DbSet<AdmQomCompoundResolvedAttribute> AdmQomCompoundResolvedAttribute { get; set; }

    public virtual DbSet<AdmQomCompoundVirtualTable> AdmQomCompoundVirtualTable { get; set; }

    public virtual DbSet<AdmQomContextDefinition> AdmQomContextDefinition { get; set; }

    public virtual DbSet<AdmQomGeologyIntervalCompoundVirtualField> AdmQomGeologyIntervalCompoundVirtualField { get; set; }

    public virtual DbSet<AdmQomInheritedCompound> AdmQomInheritedCompound { get; set; }

    public virtual DbSet<AdmQomObjectCategory> AdmQomObjectCategory { get; set; }

    public virtual DbSet<AdmQomRelationship> AdmQomRelationship { get; set; }

    public virtual DbSet<AdmRelationshipRange> AdmRelationshipRange { get; set; }

    public virtual DbSet<AdmRelationshipRangeDefaultFilter> AdmRelationshipRangeDefaultFilter { get; set; }

    public virtual DbSet<AdmRelationshipRangeDefaultOrder> AdmRelationshipRangeDefaultOrder { get; set; }

    public virtual DbSet<AdmRelationshipRangeIntersectPath> AdmRelationshipRangeIntersectPath { get; set; }

    public virtual DbSet<AdmSampleGridLocalRankedCoordinate> AdmSampleGridLocalRankedCoordinate { get; set; }

    public virtual DbSet<AdmSampleGridProjectedRankedCoordinate> AdmSampleGridProjectedRankedCoordinate { get; set; }

    public virtual DbSet<AdmSampleProjectedRankedCoordinate> AdmSampleProjectedRankedCoordinate { get; set; }

    public virtual DbSet<AdmSampleRankedLocalCoordinate> AdmSampleRankedLocalCoordinate { get; set; }

    public virtual DbSet<AdmSampleRankedProjectedCoordinate> AdmSampleRankedProjectedCoordinate { get; set; }

    public virtual DbSet<AdmTableCompound> AdmTableCompound { get; set; }

    public virtual DbSet<AdmValueRange> AdmValueRange { get; set; }

    public virtual DbSet<AdmValueRangeFieldType> AdmValueRangeFieldType { get; set; }

    public virtual DbSet<AdmViewCompoundCompound> AdmViewCompoundCompound { get; set; }

    public virtual DbSet<AdmViewCompoundInheritedCompound> AdmViewCompoundInheritedCompound { get; set; }

    public virtual DbSet<AdmViewCompoundScriptFilter> AdmViewCompoundScriptFilter { get; set; }

    public virtual DbSet<AdmViewValidationExclusion> AdmViewValidationExclusion { get; set; }

    public virtual DbSet<BAK_QLR_CHECKSAMPLE2020_02_05_11_23_27> BAK_QLR_CHECKSAMPLE2020_02_05_11_23_27 { get; set; }

    public virtual DbSet<BAK_QLR_GEOINTERVAL2020_02_05_11_23_29> BAK_QLR_GEOINTERVAL2020_02_05_11_23_29 { get; set; }

    public virtual DbSet<BAK_QLR_HOLELOCATION2020_02_05_11_23_30> BAK_QLR_HOLELOCATION2020_02_05_11_23_30 { get; set; }

    public virtual DbSet<BAK_QLR_METAFORMDEFINITION2020_02_05_11_23_31> BAK_QLR_METAFORMDEFINITION2020_02_05_11_23_31 { get; set; }

    public virtual DbSet<BAK_QLR_SAMPLE2020_02_05_11_23_31> BAK_QLR_SAMPLE2020_02_05_11_23_31 { get; set; }

    public virtual DbSet<CF_COMPOSITE> CF_COMPOSITE { get; set; }

    public virtual DbSet<CF_COMPOSITECATEGORY> CF_COMPOSITECATEGORY { get; set; }

    public virtual DbSet<CF_COMPOSITEMETHOD> CF_COMPOSITEMETHOD { get; set; }

    public virtual DbSet<CF_COMPOSITESAMPLETREE> CF_COMPOSITESAMPLETREE { get; set; }

    public virtual DbSet<CF_COMPOSITESAMPLETREEBIGCOMMENT> CF_COMPOSITESAMPLETREEBIGCOMMENT { get; set; }

    public virtual DbSet<CF_COMPOSITESAMPLETREECOMMENT> CF_COMPOSITESAMPLETREECOMMENT { get; set; }

    public virtual DbSet<CF_COMPOSITESAMPLETREEDETAILS> CF_COMPOSITESAMPLETREEDETAILS { get; set; }

    public virtual DbSet<CF_COMPOSITETYPE> CF_COMPOSITETYPE { get; set; }

    public virtual DbSet<CF_DOMAIN> CF_DOMAIN { get; set; }

    public virtual DbSet<CF_FIELDRULE> CF_FIELDRULE { get; set; }

    public virtual DbSet<CF_FRACTION> CF_FRACTION { get; set; }

    public virtual DbSet<CF_FRACTIONCATEGORY> CF_FRACTIONCATEGORY { get; set; }

    public virtual DbSet<CF_FRACTIONCODE> CF_FRACTIONCODE { get; set; }

    public virtual DbSet<CF_FRACTIONCOMMENT> CF_FRACTIONCOMMENT { get; set; }

    public virtual DbSet<CF_FRACTIONCOMMENTCODE> CF_FRACTIONCOMMENTCODE { get; set; }

    public virtual DbSet<CF_FRACTIONDETAILS> CF_FRACTIONDETAILS { get; set; }

    public virtual DbSet<CF_FRACTIONMETHOD> CF_FRACTIONMETHOD { get; set; }

    public virtual DbSet<CF_FRACTIONMETHODCODE> CF_FRACTIONMETHODCODE { get; set; }

    public virtual DbSet<CF_FRACTIONMETHODCOMMENT> CF_FRACTIONMETHODCOMMENT { get; set; }

    public virtual DbSet<CF_FRACTIONMETHODCOMMENTCODE> CF_FRACTIONMETHODCOMMENTCODE { get; set; }

    public virtual DbSet<CF_FRACTIONMETHODDETAILS> CF_FRACTIONMETHODDETAILS { get; set; }

    public virtual DbSet<CF_FRACTIONSUITE> CF_FRACTIONSUITE { get; set; }

    public virtual DbSet<CF_FRACTIONSUITEDEFINITION> CF_FRACTIONSUITEDEFINITION { get; set; }

    public virtual DbSet<CF_FRACTIONUNIT> CF_FRACTIONUNIT { get; set; }

    public virtual DbSet<CF_FRACTIONUNITIDENTITY> CF_FRACTIONUNITIDENTITY { get; set; }

    public virtual DbSet<CHECKASSAY> CHECKASSAY { get; set; }

    public virtual DbSet<CHECKBIGCOMMENT> CHECKBIGCOMMENT { get; set; }

    public virtual DbSet<CHECKCOMMENT> CHECKCOMMENT { get; set; }

    public virtual DbSet<CHECKDESPATCH> CHECKDESPATCH { get; set; }

    public virtual DbSet<CHECKDESPATCHCOMMENT> CHECKDESPATCHCOMMENT { get; set; }

    public virtual DbSet<CHECKDESPATCHDETAILS> CHECKDESPATCHDETAILS { get; set; }

    public virtual DbSet<CHECKDETAILS> CHECKDETAILS { get; set; }

    public virtual DbSet<CHECKGEOBIGCOMMENT> CHECKGEOBIGCOMMENT { get; set; }

    public virtual DbSet<CHECKGEOCOMMENT> CHECKGEOCOMMENT { get; set; }

    public virtual DbSet<CHECKGEOLOGY> CHECKGEOLOGY { get; set; }

    public virtual DbSet<CHECKSAMPLE> CHECKSAMPLE { get; set; }

    public virtual DbSet<CHECKSTAGE> CHECKSTAGE { get; set; }

    public virtual DbSet<COMPANY> COMPANY { get; set; }

    public virtual DbSet<COMPANYCODE> COMPANYCODE { get; set; }

    public virtual DbSet<COMPANYCOMMENT> COMPANYCOMMENT { get; set; }

    public virtual DbSet<COMPANYCOMMENTCODE> COMPANYCOMMENTCODE { get; set; }

    public virtual DbSet<COMPANYDETAILS> COMPANYDETAILS { get; set; }

    public virtual DbSet<CONTRACT> CONTRACT { get; set; }

    public virtual DbSet<CONTRACTCOMMENT> CONTRACTCOMMENT { get; set; }

    public virtual DbSet<CONTRACTCOMMENTCODE> CONTRACTCOMMENTCODE { get; set; }

    public virtual DbSet<CONTRACTDETAILS> CONTRACTDETAILS { get; set; }

    public virtual DbSet<CORPASSAYSTATUS> CORPASSAYSTATUS { get; set; }

    public virtual DbSet<CORPASSAYTRANS> CORPASSAYTRANS { get; set; }

    public virtual DbSet<CORPASSAYTYPE_CMB> CORPASSAYTYPE_CMB { get; set; }

    public virtual DbSet<CORPASSAYTYPE_LJN> CORPASSAYTYPE_LJN { get; set; }

    public virtual DbSet<CORPASSAYTYPE_ODR> CORPASSAYTYPE_ODR { get; set; }

    public virtual DbSet<CORPASSAYTYPE_T> CORPASSAYTYPE_T { get; set; }

    public virtual DbSet<CORPCHECKASSAY> CORPCHECKASSAY { get; set; }

    public virtual DbSet<CORPCHECKASSAY_CMB> CORPCHECKASSAY_CMB { get; set; }

    public virtual DbSet<CORPCHECKASSAY_LJN> CORPCHECKASSAY_LJN { get; set; }

    public virtual DbSet<CORPCHECKASSAY_N> CORPCHECKASSAY_N { get; set; }

    public virtual DbSet<CORPCHECKASSAY_ODR> CORPCHECKASSAY_ODR { get; set; }

    public virtual DbSet<CORPCHECKASSAY_PEND_CMB> CORPCHECKASSAY_PEND_CMB { get; set; }

    public virtual DbSet<CORPCHECKASSAY_PEND_LJN> CORPCHECKASSAY_PEND_LJN { get; set; }

    public virtual DbSet<CORPCHECKASSAY_PEND_N> CORPCHECKASSAY_PEND_N { get; set; }

    public virtual DbSet<CORPCHECKASSAY_PEND_ODR> CORPCHECKASSAY_PEND_ODR { get; set; }

    public virtual DbSet<CORPCHECKASSAY_PEND_T> CORPCHECKASSAY_PEND_T { get; set; }

    public virtual DbSet<CORPCHECKASSAY_T> CORPCHECKASSAY_T { get; set; }

    public virtual DbSet<CORPLABPROPERTIES> CORPLABPROPERTIES { get; set; }

    public virtual DbSet<CORPSAMPLEASSAY> CORPSAMPLEASSAY { get; set; }

    public virtual DbSet<CORPSAMPLEASSAY_CMB> CORPSAMPLEASSAY_CMB { get; set; }

    public virtual DbSet<CORPSAMPLEASSAY_LJN> CORPSAMPLEASSAY_LJN { get; set; }

    public virtual DbSet<CORPSAMPLEASSAY_N> CORPSAMPLEASSAY_N { get; set; }

    public virtual DbSet<CORPSAMPLEASSAY_ODR> CORPSAMPLEASSAY_ODR { get; set; }

    public virtual DbSet<CORPSAMPLEASSAY_PEND_CMB> CORPSAMPLEASSAY_PEND_CMB { get; set; }

    public virtual DbSet<CORPSAMPLEASSAY_PEND_LJN> CORPSAMPLEASSAY_PEND_LJN { get; set; }

    public virtual DbSet<CORPSAMPLEASSAY_PEND_N> CORPSAMPLEASSAY_PEND_N { get; set; }

    public virtual DbSet<CORPSAMPLEASSAY_PEND_ODR> CORPSAMPLEASSAY_PEND_ODR { get; set; }

    public virtual DbSet<CORPSAMPLEASSAY_PEND_T> CORPSAMPLEASSAY_PEND_T { get; set; }

    public virtual DbSet<CORPSAMPLEASSAY_T> CORPSAMPLEASSAY_T { get; set; }

    public virtual DbSet<COST> COST { get; set; }

    public virtual DbSet<COSTCODE> COSTCODE { get; set; }

    public virtual DbSet<COSTCOMMENT> COSTCOMMENT { get; set; }

    public virtual DbSet<COSTCOMMENTCODE> COSTCOMMENTCODE { get; set; }

    public virtual DbSet<COSTDETAILS> COSTDETAILS { get; set; }

    public virtual DbSet<CacheGroup> CacheGroup { get; set; }

    public virtual DbSet<CacheGroupViewCompound> CacheGroupViewCompound { get; set; }

    public virtual DbSet<Canvas> Canvas { get; set; }

    public virtual DbSet<Compound> Compound { get; set; }

    public virtual DbSet<CompoundAttribute> CompoundAttribute { get; set; }

    public virtual DbSet<CompoundBehaviourType> CompoundBehaviourType { get; set; }

    public virtual DbSet<CompoundField> CompoundField { get; set; }

    public virtual DbSet<CompoundFlags> CompoundFlags { get; set; }

    public virtual DbSet<CompoundKeyAttribute> CompoundKeyAttribute { get; set; }

    public virtual DbSet<CompoundLevel> CompoundLevel { get; set; }

    public virtual DbSet<CompoundSelfRelationshipDetails> CompoundSelfRelationshipDetails { get; set; }

    public virtual DbSet<CompoundTable> CompoundTable { get; set; }

    public virtual DbSet<CompoundTableRelationship> CompoundTableRelationship { get; set; }

    public virtual DbSet<CompoundUniqueness> CompoundUniqueness { get; set; }

    public virtual DbSet<CompoundUniquenessField> CompoundUniquenessField { get; set; }

    public virtual DbSet<CompoundUserObjectCategory> CompoundUserObjectCategory { get; set; }

    public virtual DbSet<CompoundValidationExclusion> CompoundValidationExclusion { get; set; }

    public virtual DbSet<CoordinateMethod> CoordinateMethod { get; set; }

    public virtual DbSet<CoordinateSystem> CoordinateSystem { get; set; }

    public virtual DbSet<Coordinates> Coordinates { get; set; }

    public virtual DbSet<CoordinatesEntityType> CoordinatesEntityType { get; set; }

    public virtual DbSet<CustomFieldAttributeType> CustomFieldAttributeType { get; set; }

    public virtual DbSet<DATATYPE> DATATYPE { get; set; }

    public virtual DbSet<DATELIST> DATELIST { get; set; }

    public virtual DbSet<DD_ACQGEOPHYSDETAILS> DD_ACQGEOPHYSDETAILS { get; set; }

    public virtual DbSet<DD_ACQGEOPHYSDETAILS_DM> DD_ACQGEOPHYSDETAILS_DM { get; set; }

    public virtual DbSet<DD_CollarStatus> DD_CollarStatus { get; set; }

    public virtual DbSet<DD_Collars> DD_Collars { get; set; }

    public virtual DbSet<DD_Drilling> DD_Drilling { get; set; }

    public virtual DbSet<DD_GEOPHYSDETAILS_DM> DD_GEOPHYSDETAILS_DM { get; set; }

    public virtual DbSet<DD_GEOPHYSDETAILS_UPDATE_DM> DD_GEOPHYSDETAILS_UPDATE_DM { get; set; }

    public virtual DbSet<DD_Geology> DD_Geology { get; set; }

    public virtual DbSet<DD_GeologyValidated> DD_GeologyValidated { get; set; }

    public virtual DbSet<DD_GeophysDetails> DD_GeophysDetails { get; set; }

    public virtual DbSet<DD_Geophysics> DD_Geophysics { get; set; }

    public virtual DbSet<DD_HoleCoords> DD_HoleCoords { get; set; }

    public virtual DbSet<DD_SampleAssays> DD_SampleAssays { get; set; }

    public virtual DbSet<DD_SampleSamples> DD_SampleSamples { get; set; }

    public virtual DbSet<DD_Sampling> DD_Sampling { get; set; }

    public virtual DbSet<DESPATCHBIGCOMMENT> DESPATCHBIGCOMMENT { get; set; }

    public virtual DbSet<DESPATCHBIGCOMMENTCODE> DESPATCHBIGCOMMENTCODE { get; set; }

    public virtual DbSet<DESPATCHCODE> DESPATCHCODE { get; set; }

    public virtual DbSet<DESPATCHDETAILS> DESPATCHDETAILS { get; set; }

    public virtual DbSet<DESPATCHRETBIGCOMCODE> DESPATCHRETBIGCOMCODE { get; set; }

    public virtual DbSet<DESPATCHRETBIGCOMMENT> DESPATCHRETBIGCOMMENT { get; set; }

    public virtual DbSet<DESPATCHRETCODE> DESPATCHRETCODE { get; set; }

    public virtual DbSet<DESPATCHRETCOMCODE> DESPATCHRETCOMCODE { get; set; }

    public virtual DbSet<DESPATCHRETCOMMENT> DESPATCHRETCOMMENT { get; set; }

    public virtual DbSet<DESPATCHRETDETAILS> DESPATCHRETDETAILS { get; set; }

    public virtual DbSet<DESPATCHRETURN> DESPATCHRETURN { get; set; }

    public virtual DbSet<DESPATCHSEND> DESPATCHSEND { get; set; }

    public virtual DbSet<DIAMETERTYPE> DIAMETERTYPE { get; set; }

    public virtual DbSet<DIGESTDEGREE> DIGESTDEGREE { get; set; }

    public virtual DbSet<DIGESTTYPE> DIGESTTYPE { get; set; }

    public virtual DbSet<DRILLHOLEDIAMCODE> DRILLHOLEDIAMCODE { get; set; }

    public virtual DbSet<DRILLHOLEDIAMDETAILS> DRILLHOLEDIAMDETAILS { get; set; }

    public virtual DbSet<DRILLHOLEDIAMETER> DRILLHOLEDIAMETER { get; set; }

    public virtual DbSet<DRILLINGACTIVITY> DRILLINGACTIVITY { get; set; }

    public virtual DbSet<DRILLINGDETAIL> DRILLINGDETAIL { get; set; }

    public virtual DbSet<DRILLING_PLANNED> DRILLING_PLANNED { get; set; }

    public virtual DbSet<DRILLTYPE> DRILLTYPE { get; set; }

    public virtual DbSet<DataNode> DataNode { get; set; }

    public virtual DbSet<DataSource> DataSource { get; set; }

    public virtual DbSet<DatabaseColumn> DatabaseColumn { get; set; }

    public virtual DbSet<DatabaseFiles> DatabaseFiles { get; set; }

    public virtual DbSet<DatabaseTable> DatabaseTable { get; set; }

    public virtual DbSet<DatabaseTableValidationExclusion> DatabaseTableValidationExclusion { get; set; }

    public virtual DbSet<DateQtrWeek> DateQtrWeek { get; set; }

    public virtual DbSet<Datum> Datum { get; set; }

    public virtual DbSet<DefaultStyling> DefaultStyling { get; set; }

    public virtual DbSet<DerivedRelationshipIndirectRelationship> DerivedRelationshipIndirectRelationship { get; set; }

    public virtual DbSet<ELEMENT> ELEMENT { get; set; }

    public virtual DbSet<ELEMENTTYPE> ELEMENTTYPE { get; set; }

    public virtual DbSet<EQUIPMENT> EQUIPMENT { get; set; }

    public virtual DbSet<EQUIPMENTBIGCOMMENT> EQUIPMENTBIGCOMMENT { get; set; }

    public virtual DbSet<EQUIPMENTBIGCOMMENTCODE> EQUIPMENTBIGCOMMENTCODE { get; set; }

    public virtual DbSet<EQUIPMENTCODE> EQUIPMENTCODE { get; set; }

    public virtual DbSet<EQUIPMENTCOMMENT> EQUIPMENTCOMMENT { get; set; }

    public virtual DbSet<EQUIPMENTCOMMENTCODE> EQUIPMENTCOMMENTCODE { get; set; }

    public virtual DbSet<EQUIPMENTCONFIG> EQUIPMENTCONFIG { get; set; }

    public virtual DbSet<EQUIPMENTCONFIGBIGCOMMENT> EQUIPMENTCONFIGBIGCOMMENT { get; set; }

    public virtual DbSet<EQUIPMENTCONFIGBIGCOMMENTCODE> EQUIPMENTCONFIGBIGCOMMENTCODE { get; set; }

    public virtual DbSet<EQUIPMENTCONFIGCODE> EQUIPMENTCONFIGCODE { get; set; }

    public virtual DbSet<EQUIPMENTCONFIGCOMMENT> EQUIPMENTCONFIGCOMMENT { get; set; }

    public virtual DbSet<EQUIPMENTCONFIGCOMMENTCODE> EQUIPMENTCONFIGCOMMENTCODE { get; set; }

    public virtual DbSet<EQUIPMENTCONFIGDETAILS> EQUIPMENTCONFIGDETAILS { get; set; }

    public virtual DbSet<EQUIPMENTDETAILS> EQUIPMENTDETAILS { get; set; }

    public virtual DbSet<EQUIPMENTMODEL> EQUIPMENTMODEL { get; set; }

    public virtual DbSet<EQUIPMENTMODELBIGCOMMENT> EQUIPMENTMODELBIGCOMMENT { get; set; }

    public virtual DbSet<EQUIPMENTMODELBIGCOMMENTCODE> EQUIPMENTMODELBIGCOMMENTCODE { get; set; }

    public virtual DbSet<EQUIPMENTMODELCODE> EQUIPMENTMODELCODE { get; set; }

    public virtual DbSet<EQUIPMENTMODELCOMMENT> EQUIPMENTMODELCOMMENT { get; set; }

    public virtual DbSet<EQUIPMENTMODELCOMMENTCODE> EQUIPMENTMODELCOMMENTCODE { get; set; }

    public virtual DbSet<EQUIPMENTMODELDETAILS> EQUIPMENTMODELDETAILS { get; set; }

    public virtual DbSet<EQUIPMENTTYPE> EQUIPMENTTYPE { get; set; }

    public virtual DbSet<ErrorMessage> ErrorMessage { get; set; }

    public virtual DbSet<Expression> Expression { get; set; }

    public virtual DbSet<FieldAttribute> FieldAttribute { get; set; }

    public virtual DbSet<FieldType> FieldType { get; set; }

    public virtual DbSet<FieldTypeAcceptableValueText> FieldTypeAcceptableValueText { get; set; }

    public virtual DbSet<File> File { get; set; }

    public virtual DbSet<ForeignKeyRelationships> ForeignKeyRelationships { get; set; }

    public virtual DbSet<Form> Form { get; set; }

    public virtual DbSet<FormElement> FormElement { get; set; }

    public virtual DbSet<GDCOORDINATESET> GDCOORDINATESET { get; set; }

    public virtual DbSet<GDCOORDINATESYSTEM> GDCOORDINATESYSTEM { get; set; }

    public virtual DbSet<GDDATUM> GDDATUM { get; set; }

    public virtual DbSet<GDGRIDTYPE> GDGRIDTYPE { get; set; }

    public virtual DbSet<GDLOCALDATUMTRANSFORM> GDLOCALDATUMTRANSFORM { get; set; }

    public virtual DbSet<GDPROJECTION> GDPROJECTION { get; set; }

    public virtual DbSet<GDSURVEYMETHOD> GDSURVEYMETHOD { get; set; }

    public virtual DbSet<GDTRANSFORMATIONTYPE> GDTRANSFORMATIONTYPE { get; set; }

    public virtual DbSet<GDUNITS> GDUNITS { get; set; }

    public virtual DbSet<GEOBIGCOMMENT> GEOBIGCOMMENT { get; set; }

    public virtual DbSet<GEOBIGCOMMENTCODE> GEOBIGCOMMENTCODE { get; set; }

    public virtual DbSet<GEOCOMMENT> GEOCOMMENT { get; set; }

    public virtual DbSet<GEOCOMMENTCODE> GEOCOMMENTCODE { get; set; }

    public virtual DbSet<GEOCONTINUITY> GEOCONTINUITY { get; set; }

    public virtual DbSet<GEODETAILS> GEODETAILS { get; set; }

    public virtual DbSet<GEOINTERVAL> GEOINTERVAL { get; set; }

    public virtual DbSet<GEOINTERVALPRIMARYCODE> GEOINTERVALPRIMARYCODE { get; set; }

    public virtual DbSet<GEOLOGYCODEPRIMARY> GEOLOGYCODEPRIMARY { get; set; }

    public virtual DbSet<GEOLOGYCODESECONDARY> GEOLOGYCODESECONDARY { get; set; }

    public virtual DbSet<GEOPHYSCODE> GEOPHYSCODE { get; set; }

    public virtual DbSet<GEOPHYSCODECATEGORY> GEOPHYSCODECATEGORY { get; set; }

    public virtual DbSet<GEOPHYSDETAILS> GEOPHYSDETAILS { get; set; }

    public virtual DbSet<GEOPHYSHEADER> GEOPHYSHEADER { get; set; }

    public virtual DbSet<GEOPHYSHEADERBIGCOMMENT> GEOPHYSHEADERBIGCOMMENT { get; set; }

    public virtual DbSet<GEOPHYSHEADERBIGCOMMENTCODE> GEOPHYSHEADERBIGCOMMENTCODE { get; set; }

    public virtual DbSet<GEOPHYSHEADERCATEGORY> GEOPHYSHEADERCATEGORY { get; set; }

    public virtual DbSet<GEOPHYSHEADERCOMMENT> GEOPHYSHEADERCOMMENT { get; set; }

    public virtual DbSet<GEOPHYSHEADERCOMMENTCODE> GEOPHYSHEADERCOMMENTCODE { get; set; }

    public virtual DbSet<GEOPHYSHEADERDETAILS> GEOPHYSHEADERDETAILS { get; set; }

    public virtual DbSet<GEOPHYSHEADERDETAILSCODE> GEOPHYSHEADERDETAILSCODE { get; set; }

    public virtual DbSet<GEOPHYSIDENTITY> GEOPHYSIDENTITY { get; set; }

    public virtual DbSet<GEOPHYSLOOP> GEOPHYSLOOP { get; set; }

    public virtual DbSet<GEOPHYSLOOPCODE> GEOPHYSLOOPCODE { get; set; }

    public virtual DbSet<GEOPHYSLOOPCOORD> GEOPHYSLOOPCOORD { get; set; }

    public virtual DbSet<GEOPHYSLOOPDETAILS> GEOPHYSLOOPDETAILS { get; set; }

    public virtual DbSet<GEOPHYSPROPERTY> GEOPHYSPROPERTY { get; set; }

    public virtual DbSet<GEOPHYSTYPE> GEOPHYSTYPE { get; set; }

    public virtual DbSet<GRID> GRID { get; set; }

    public virtual DbSet<GRIDCODE> GRIDCODE { get; set; }

    public virtual DbSet<GRIDDETAILS> GRIDDETAILS { get; set; }

    public virtual DbSet<GRIDPICKUP> GRIDPICKUP { get; set; }

    public virtual DbSet<GridSystem> GridSystem { get; set; }

    public virtual DbSet<HOLEBIGCOMMENT> HOLEBIGCOMMENT { get; set; }

    public virtual DbSet<HOLEBIGCOMMENTCODE> HOLEBIGCOMMENTCODE { get; set; }

    public virtual DbSet<HOLECODE> HOLECODE { get; set; }

    public virtual DbSet<HOLECOMMENT> HOLECOMMENT { get; set; }

    public virtual DbSet<HOLECOMMENTCODE> HOLECOMMENTCODE { get; set; }

    public virtual DbSet<HOLECOORD> HOLECOORD { get; set; }

    public virtual DbSet<HOLECOORDBIGCOMMENT> HOLECOORDBIGCOMMENT { get; set; }

    public virtual DbSet<HOLECOORDBIGCOMMENTCODE> HOLECOORDBIGCOMMENTCODE { get; set; }

    public virtual DbSet<HOLECOORDCODE> HOLECOORDCODE { get; set; }

    public virtual DbSet<HOLECOORDCOMMENT> HOLECOORDCOMMENT { get; set; }

    public virtual DbSet<HOLECOORDCOMMENTCODE> HOLECOORDCOMMENTCODE { get; set; }

    public virtual DbSet<HOLECOORDDETAILS> HOLECOORDDETAILS { get; set; }

    public virtual DbSet<HOLEDETAILS> HOLEDETAILS { get; set; }

    public virtual DbSet<HOLEDETAILS_PIVOT> HOLEDETAILS_PIVOT { get; set; }

    public virtual DbSet<HOLELOCATION> HOLELOCATION { get; set; }

    public virtual DbSet<HOLESURVEY> HOLESURVEY { get; set; }

    public virtual DbSet<HOLETYPE> HOLETYPE { get; set; }

    public virtual DbSet<IDENTITYRANGE> IDENTITYRANGE { get; set; }

    public virtual DbSet<Image> Image { get; set; }

    public virtual DbSet<LocalPermission> LocalPermission { get; set; }

    public virtual DbSet<LocalProfileValueDefinition> LocalProfileValueDefinition { get; set; }

    public virtual DbSet<LocalRole> LocalRole { get; set; }

    public virtual DbSet<LocalRoleParentRole> LocalRoleParentRole { get; set; }

    public virtual DbSet<Log> Log { get; set; }

    public virtual DbSet<LogType> LogType { get; set; }

    public virtual DbSet<Logger> Logger { get; set; }

    public virtual DbSet<META3600UPGRADEEXCLUSION> META3600UPGRADEEXCLUSION { get; set; }

    public virtual DbSet<META3600UPGRADEOBJECT> META3600UPGRADEOBJECT { get; set; }

    public virtual DbSet<METAACQ2ACQ> METAACQ2ACQ { get; set; }

    public virtual DbSet<METAACQ2ACQREF> METAACQ2ACQREF { get; set; }

    public virtual DbSet<METAASSAYEXPORT> METAASSAYEXPORT { get; set; }

    public virtual DbSet<METAASSAYRULE> METAASSAYRULE { get; set; }

    public virtual DbSet<METACALCULATEDFIELD> METACALCULATEDFIELD { get; set; }

    public virtual DbSet<METACLIENTALIASES> METACLIENTALIASES { get; set; }

    public virtual DbSet<METACONSTRAINTERRORMESSAGE> METACONSTRAINTERRORMESSAGE { get; set; }

    public virtual DbSet<METADBOBJECT> METADBOBJECT { get; set; }

    public virtual DbSet<METADCVIEW> METADCVIEW { get; set; }

    public virtual DbSet<METADCVIEWSUB> METADCVIEWSUB { get; set; }

    public virtual DbSet<METADEFAULTS> METADEFAULTS { get; set; }

    public virtual DbSet<METAFIELD> METAFIELD { get; set; }

    public virtual DbSet<METAFORMDEFINITION> METAFORMDEFINITION { get; set; }

    public virtual DbSet<METAFORMDEFINITIONDETAILS> METAFORMDEFINITIONDETAILS { get; set; }

    public virtual DbSet<METAFORMDEFINITIONFIELD> METAFORMDEFINITIONFIELD { get; set; }

    public virtual DbSet<METAFORMDEFINITIONFILTER> METAFORMDEFINITIONFILTER { get; set; }

    public virtual DbSet<METAFUNCTION> METAFUNCTION { get; set; }

    public virtual DbSet<METAIMPORTALIASES> METAIMPORTALIASES { get; set; }

    public virtual DbSet<METAPROFILE> METAPROFILE { get; set; }

    public virtual DbSet<METASQL> METASQL { get; set; }

    public virtual DbSet<METASQLEXP> METASQLEXP { get; set; }

    public virtual DbSet<METASQLEXPFIELD> METASQLEXPFIELD { get; set; }

    public virtual DbSet<METASQLEXPREF> METASQLEXPREF { get; set; }

    public virtual DbSet<METASQLFUNC> METASQLFUNC { get; set; }

    public virtual DbSet<METASQLFUNCPARAM> METASQLFUNCPARAM { get; set; }

    public virtual DbSet<METASQLFUNCPARAMFIELD> METASQLFUNCPARAMFIELD { get; set; }

    public virtual DbSet<METASQLREF> METASQLREF { get; set; }

    public virtual DbSet<METATABLE> METATABLE { get; set; }

    public virtual DbSet<METATABLEVERSION> METATABLEVERSION { get; set; }

    public virtual DbSet<METATRACKINGCATEGORY> METATRACKINGCATEGORY { get; set; }

    public virtual DbSet<METATRACKINGPROPERTY> METATRACKINGPROPERTY { get; set; }

    public virtual DbSet<METATRACKINGREF> METATRACKINGREF { get; set; }

    public virtual DbSet<METATRACKINGSUSPENDED> METATRACKINGSUSPENDED { get; set; }

    public virtual DbSet<METATRACKINGTABLE> METATRACKINGTABLE { get; set; }

    public virtual DbSet<METAVALIDATION> METAVALIDATION { get; set; }

    public virtual DbSet<METAVIEW> METAVIEW { get; set; }

    public virtual DbSet<METAVIEWSUB> METAVIEWSUB { get; set; }

    public virtual DbSet<METAVIEWTYPE> METAVIEWTYPE { get; set; }

    public virtual DbSet<MM_DefineSample> MM_DefineSample { get; set; }

    public virtual DbSet<ManualCompound> ManualCompound { get; set; }

    public virtual DbSet<ManualCompoundFieldOverride> ManualCompoundFieldOverride { get; set; }

    public virtual DbSet<ManualCompoundObjectCategory> ManualCompoundObjectCategory { get; set; }

    public virtual DbSet<ManualCompoundOverride> ManualCompoundOverride { get; set; }

    public virtual DbSet<ManualCompoundTable> ManualCompoundTable { get; set; }

    public virtual DbSet<ManualCompoundUniqueness> ManualCompoundUniqueness { get; set; }

    public virtual DbSet<ManualCompoundUniquenessField> ManualCompoundUniquenessField { get; set; }

    public virtual DbSet<ManualCoordinate> ManualCoordinate { get; set; }

    public virtual DbSet<ManualDatabaseColumn> ManualDatabaseColumn { get; set; }

    public virtual DbSet<ManualDerivedRelationship> ManualDerivedRelationship { get; set; }

    public virtual DbSet<ManualDerivedRelationshipDetail> ManualDerivedRelationshipDetail { get; set; }

    public virtual DbSet<ManualDerivedRelationshipIndirectRelationship> ManualDerivedRelationshipIndirectRelationship { get; set; }

    public virtual DbSet<ManualEqualityRelationship> ManualEqualityRelationship { get; set; }

    public virtual DbSet<ManualEqualityRelationshipDetail> ManualEqualityRelationshipDetail { get; set; }

    public virtual DbSet<ManualEqualityRelationshipJoin> ManualEqualityRelationshipJoin { get; set; }

    public virtual DbSet<ManualExtendedRelationship> ManualExtendedRelationship { get; set; }

    public virtual DbSet<ManualExtendedRelationshipDetail> ManualExtendedRelationshipDetail { get; set; }

    public virtual DbSet<ManualMimeField> ManualMimeField { get; set; }

    public virtual DbSet<ManualObjectCategory> ManualObjectCategory { get; set; }

    public virtual DbSet<ManualRange> ManualRange { get; set; }

    public virtual DbSet<ManualRangeGroupingElement> ManualRangeGroupingElement { get; set; }

    public virtual DbSet<ManualSurrogateKeyParent> ManualSurrogateKeyParent { get; set; }

    public virtual DbSet<ManualTableInclusion> ManualTableInclusion { get; set; }

    public virtual DbSet<ManualTableInclusionKey> ManualTableInclusionKey { get; set; }

    public virtual DbSet<ManualVirtualFieldTable> ManualVirtualFieldTable { get; set; }

    public virtual DbSet<MigratedFormPropertyObject> MigratedFormPropertyObject { get; set; }

    public virtual DbSet<MigratedViewPropertyObject> MigratedViewPropertyObject { get; set; }

    public virtual DbSet<Module> Module { get; set; }

    public virtual DbSet<ModuleDependencyOrder> ModuleDependencyOrder { get; set; }

    public virtual DbSet<ModuleType> ModuleType { get; set; }

    public virtual DbSet<ModuleVersioning> ModuleVersioning { get; set; }

    public virtual DbSet<Numbers> Numbers { get; set; }

    public virtual DbSet<ObjectCategory> ObjectCategory { get; set; }

    public virtual DbSet<POINTGEOBIGCOMMENT> POINTGEOBIGCOMMENT { get; set; }

    public virtual DbSet<POINTGEOCOMMENT> POINTGEOCOMMENT { get; set; }

    public virtual DbSet<POINTGEOLOGY> POINTGEOLOGY { get; set; }

    public virtual DbSet<PREPARATION> PREPARATION { get; set; }

    public virtual DbSet<PROJECT> PROJECT { get; set; }

    public virtual DbSet<PROJECTCODE> PROJECTCODE { get; set; }

    public virtual DbSet<PROJECTDETAILS> PROJECTDETAILS { get; set; }

    public virtual DbSet<PROSPECT> PROSPECT { get; set; }

    public virtual DbSet<PROSPECTCODE> PROSPECTCODE { get; set; }

    public virtual DbSet<PROSPECTDETAILS> PROSPECTDETAILS { get; set; }

    public virtual DbSet<ProcessingEventType> ProcessingEventType { get; set; }

    public virtual DbSet<ProcessingRequest> ProcessingRequest { get; set; }

    public virtual DbSet<ProcessingType> ProcessingType { get; set; }

    public virtual DbSet<ProcessingTypeEventType> ProcessingTypeEventType { get; set; }

    public virtual DbSet<Profile> Profile { get; set; }

    public virtual DbSet<ProfileRole> ProfileRole { get; set; }

    public virtual DbSet<Projection> Projection { get; set; }

    public virtual DbSet<PropertyObject> PropertyObject { get; set; }

    public virtual DbSet<PropertyObjectEntity> PropertyObjectEntity { get; set; }

    public virtual DbSet<QLR_LOGDELETEMSG> QLR_LOGDELETEMSG { get; set; }

    public virtual DbSet<QT_CHECKSAMPLE_CHECKSTAGE_PATH> QT_CHECKSAMPLE_CHECKSTAGE_PATH { get; set; }

    public virtual DbSet<QT_CHECKSAMPLE_FRACTIONID_PATH> QT_CHECKSAMPLE_FRACTIONID_PATH { get; set; }

    public virtual DbSet<QT_CHECKSAMPLE_ROOT_PARENT> QT_CHECKSAMPLE_ROOT_PARENT { get; set; }

    public virtual DbSet<QT_COMPOSITELEVEL> QT_COMPOSITELEVEL { get; set; }

    public virtual DbSet<QT_FME_COORDSYS> QT_FME_COORDSYS { get; set; }

    public virtual DbSet<QT_FRACTIONASSAY> QT_FRACTIONASSAY { get; set; }

    public virtual DbSet<QT_GEODETAILS_STRUCTURE_ERROR> QT_GEODETAILS_STRUCTURE_ERROR { get; set; }

    public virtual DbSet<QT_PIVOT> QT_PIVOT { get; set; }

    public virtual DbSet<QV_AC_ACTIVITYANDCONTRACTDETAILS_RO> QV_AC_ACTIVITYANDCONTRACTDETAILS_RO { get; set; }

    public virtual DbSet<QV_AC_ACTIVITYREPORTCONTRACTMATCHES_RO> QV_AC_ACTIVITYREPORTCONTRACTMATCHES_RO { get; set; }

    public virtual DbSet<QV_AC_ACTIVITYREPORTCOSTDETAILSNOTFULLYCOVERED_RO> QV_AC_ACTIVITYREPORTCOSTDETAILSNOTFULLYCOVERED_RO { get; set; }

    public virtual DbSet<QV_AC_ACTIVITYREPORTCOSTDETAILS_RO> QV_AC_ACTIVITYREPORTCOSTDETAILS_RO { get; set; }

    public virtual DbSet<QV_AC_ACTIVITYREPORTCOST_RO> QV_AC_ACTIVITYREPORTCOST_RO { get; set; }

    public virtual DbSet<QV_AC_ACTIVITYREPORTITEM> QV_AC_ACTIVITYREPORTITEM { get; set; }

    public virtual DbSet<QV_AC_ACTIVITYREPORTITEM5LEVELS> QV_AC_ACTIVITYREPORTITEM5LEVELS { get; set; }

    public virtual DbSet<QV_AC_ACTIVITYREPORTITEMEXTENDED_RO> QV_AC_ACTIVITYREPORTITEMEXTENDED_RO { get; set; }

    public virtual DbSet<QV_AC_CONTRACT> QV_AC_CONTRACT { get; set; }

    public virtual DbSet<QV_AC_CONTRACTCODESBYTOPLEVELCODE_RO> QV_AC_CONTRACTCODESBYTOPLEVELCODE_RO { get; set; }

    public virtual DbSet<QV_AC_CONTRACTDATES_RO> QV_AC_CONTRACTDATES_RO { get; set; }

    public virtual DbSet<QV_AC_CONTRACTDETAILS_RO> QV_AC_CONTRACTDETAILS_RO { get; set; }

    public virtual DbSet<QV_AC_CONTRACTITEM> QV_AC_CONTRACTITEM { get; set; }

    public virtual DbSet<QV_AC_CONTRACTITEMTYPEHIERARCHY_RO> QV_AC_CONTRACTITEMTYPEHIERARCHY_RO { get; set; }

    public virtual DbSet<QV_AC_CONTRACTITEMTYPE_LEVEL_RO> QV_AC_CONTRACTITEMTYPE_LEVEL_RO { get; set; }

    public virtual DbSet<QV_AC_CONTRACTRATEDATES_RO> QV_AC_CONTRACTRATEDATES_RO { get; set; }

    public virtual DbSet<QV_AC_CURRENTCONTRACTDETAILS_RO> QV_AC_CURRENTCONTRACTDETAILS_RO { get; set; }

    public virtual DbSet<QV_AC_DESPATCHSENDBYACTIVITYREPORTITEM_RO> QV_AC_DESPATCHSENDBYACTIVITYREPORTITEM_RO { get; set; }

    public virtual DbSet<QV_AC_HOLELOCATIONBYACTIVITYREPORTITEM_RO> QV_AC_HOLELOCATIONBYACTIVITYREPORTITEM_RO { get; set; }

    public virtual DbSet<QV_AC_INVOICEACTIVITYREPORTCOSTDETAILS_RO> QV_AC_INVOICEACTIVITYREPORTCOSTDETAILS_RO { get; set; }

    public virtual DbSet<QV_AC_INVOICEMATCHEDPREDICTEDCOST_RO> QV_AC_INVOICEMATCHEDPREDICTEDCOST_RO { get; set; }

    public virtual DbSet<QV_ASSAYTYPE_TEXT> QV_ASSAYTYPE_TEXT { get; set; }

    public virtual DbSet<QV_AUDIT_ACQ_DB_OBJ_INVALID_MISS_OR_DISABLED> QV_AUDIT_ACQ_DB_OBJ_INVALID_MISS_OR_DISABLED { get; set; }

    public virtual DbSet<QV_AUDIT_ACQ_DB_OBJ_VALID_AND_ENABLED> QV_AUDIT_ACQ_DB_OBJ_VALID_AND_ENABLED { get; set; }

    public virtual DbSet<QV_AUDIT_DB_OBJ_FOREIGN_TO_ACQ> QV_AUDIT_DB_OBJ_FOREIGN_TO_ACQ { get; set; }

    public virtual DbSet<QV_BESTASSAYTYPE> QV_BESTASSAYTYPE { get; set; }

    public virtual DbSet<QV_BESTASSAYTYPE_NAME> QV_BESTASSAYTYPE_NAME { get; set; }

    public virtual DbSet<QV_BESTASSAYTYPE_TEXT> QV_BESTASSAYTYPE_TEXT { get; set; }

    public virtual DbSet<QV_BESTASSAYTYPE_TEXT_NAME> QV_BESTASSAYTYPE_TEXT_NAME { get; set; }

    public virtual DbSet<QV_BESTASSAY_NAME> QV_BESTASSAY_NAME { get; set; }

    public virtual DbSet<QV_BESTASSAY_TEXT_NAME> QV_BESTASSAY_TEXT_NAME { get; set; }

    public virtual DbSet<QV_BESTCHECKASSAY_NAME> QV_BESTCHECKASSAY_NAME { get; set; }

    public virtual DbSet<QV_BESTCHECKASSAY_TEXT_NAME> QV_BESTCHECKASSAY_TEXT_NAME { get; set; }

    public virtual DbSet<QV_B_ASS> QV_B_ASS { get; set; }

    public virtual DbSet<QV_B_ASS_N> QV_B_ASS_N { get; set; }

    public virtual DbSet<QV_B_AT_N> QV_B_AT_N { get; set; }

    public virtual DbSet<QV_B_CHASS_N> QV_B_CHASS_N { get; set; }

    public virtual DbSet<QV_B_DG_ASS> QV_B_DG_ASS { get; set; }

    public virtual DbSet<QV_B_DG_ASS_N> QV_B_DG_ASS_N { get; set; }

    public virtual DbSet<QV_B_DG_AT> QV_B_DG_AT { get; set; }

    public virtual DbSet<QV_B_DG_AT_N> QV_B_DG_AT_N { get; set; }

    public virtual DbSet<QV_B_DG_CHASS> QV_B_DG_CHASS { get; set; }

    public virtual DbSet<QV_B_DG_CHASS_N> QV_B_DG_CHASS_N { get; set; }

    public virtual DbSet<QV_B_ELDD_ASS> QV_B_ELDD_ASS { get; set; }

    public virtual DbSet<QV_B_ELDD_ASS_N> QV_B_ELDD_ASS_N { get; set; }

    public virtual DbSet<QV_B_ELDD_AT> QV_B_ELDD_AT { get; set; }

    public virtual DbSet<QV_B_ELDD_AT_N> QV_B_ELDD_AT_N { get; set; }

    public virtual DbSet<QV_B_ELDD_CHASS> QV_B_ELDD_CHASS { get; set; }

    public virtual DbSet<QV_B_ELDD_CHASS_N> QV_B_ELDD_CHASS_N { get; set; }

    public virtual DbSet<QV_B_EL_ASS> QV_B_EL_ASS { get; set; }

    public virtual DbSet<QV_B_EL_ASS_N> QV_B_EL_ASS_N { get; set; }

    public virtual DbSet<QV_B_EL_AT> QV_B_EL_AT { get; set; }

    public virtual DbSet<QV_B_EL_AT_N> QV_B_EL_AT_N { get; set; }

    public virtual DbSet<QV_B_EL_AT_TEXT> QV_B_EL_AT_TEXT { get; set; }

    public virtual DbSet<QV_B_EL_AT_TEXT_N> QV_B_EL_AT_TEXT_N { get; set; }

    public virtual DbSet<QV_B_EL_CHASS> QV_B_EL_CHASS { get; set; }

    public virtual DbSet<QV_B_EL_CHASS_N> QV_B_EL_CHASS_N { get; set; }

    public virtual DbSet<QV_B_GN_ASS> QV_B_GN_ASS { get; set; }

    public virtual DbSet<QV_B_GN_ASS_N> QV_B_GN_ASS_N { get; set; }

    public virtual DbSet<QV_B_GN_AT> QV_B_GN_AT { get; set; }

    public virtual DbSet<QV_B_GN_AT_N> QV_B_GN_AT_N { get; set; }

    public virtual DbSet<QV_B_GN_AT_TEXT> QV_B_GN_AT_TEXT { get; set; }

    public virtual DbSet<QV_B_GN_CHASS> QV_B_GN_CHASS { get; set; }

    public virtual DbSet<QV_B_GN_CHASS_N> QV_B_GN_CHASS_N { get; set; }

    public virtual DbSet<QV_CF_COMPOSITE> QV_CF_COMPOSITE { get; set; }

    public virtual DbSet<QV_CF_COMPOSITESAMPLETREE_BC> QV_CF_COMPOSITESAMPLETREE_BC { get; set; }

    public virtual DbSet<QV_CF_COMPOSITESAMPLE_RO> QV_CF_COMPOSITESAMPLE_RO { get; set; }

    public virtual DbSet<QV_CF_COMPOSITE_RO> QV_CF_COMPOSITE_RO { get; set; }

    public virtual DbSet<QV_CF_FRACTIONASSAYTYPE_CMB_RO> QV_CF_FRACTIONASSAYTYPE_CMB_RO { get; set; }

    public virtual DbSet<QV_CF_FRACTIONASSAYTYPE_LJN_RO> QV_CF_FRACTIONASSAYTYPE_LJN_RO { get; set; }

    public virtual DbSet<QV_CF_FRACTIONASSAYTYPE_ODR_RO> QV_CF_FRACTIONASSAYTYPE_ODR_RO { get; set; }

    public virtual DbSet<QV_CF_FRACTIONASSAYTYPE_RO> QV_CF_FRACTIONASSAYTYPE_RO { get; set; }

    public virtual DbSet<QV_CF_FRACTIONASSAYTYPE_T_RO> QV_CF_FRACTIONASSAYTYPE_T_RO { get; set; }

    public virtual DbSet<QV_CF_FRACTIONASSAY_CMB_RO> QV_CF_FRACTIONASSAY_CMB_RO { get; set; }

    public virtual DbSet<QV_CF_FRACTIONASSAY_LJN_RO> QV_CF_FRACTIONASSAY_LJN_RO { get; set; }

    public virtual DbSet<QV_CF_FRACTIONASSAY_N_RO> QV_CF_FRACTIONASSAY_N_RO { get; set; }

    public virtual DbSet<QV_CF_FRACTIONASSAY_ODR_RO> QV_CF_FRACTIONASSAY_ODR_RO { get; set; }

    public virtual DbSet<QV_CF_FRACTIONASSAY_T_RO> QV_CF_FRACTIONASSAY_T_RO { get; set; }

    public virtual DbSet<QV_CF_FRACTIONCATEGORY> QV_CF_FRACTIONCATEGORY { get; set; }

    public virtual DbSet<QV_CF_FRACTIONUNIT> QV_CF_FRACTIONUNIT { get; set; }

    public virtual DbSet<QV_CF_FRACTION_REF> QV_CF_FRACTION_REF { get; set; }

    public virtual DbSet<QV_CF_MULTIHOLECOMPOSITE> QV_CF_MULTIHOLECOMPOSITE { get; set; }

    public virtual DbSet<QV_CF_SAMPLEFRACTION_RO> QV_CF_SAMPLEFRACTION_RO { get; set; }

    public virtual DbSet<QV_CHECKSAMPLE_LEVEL_Q> QV_CHECKSAMPLE_LEVEL_Q { get; set; }

    public virtual DbSet<QV_CHECKSAMPLE_ROOT_PARENT> QV_CHECKSAMPLE_ROOT_PARENT { get; set; }

    public virtual DbSet<QV_CHECKSAMPLE_ROOT_PARENT_KEYS> QV_CHECKSAMPLE_ROOT_PARENT_KEYS { get; set; }

    public virtual DbSet<QV_CORPBESTASSAY> QV_CORPBESTASSAY { get; set; }

    public virtual DbSet<QV_CORPBESTASSAY_NM> QV_CORPBESTASSAY_NM { get; set; }

    public virtual DbSet<QV_CORPBESTASSAY_NM_PR> QV_CORPBESTASSAY_NM_PR { get; set; }

    public virtual DbSet<QV_CORPBESTASSAY_PR> QV_CORPBESTASSAY_PR { get; set; }

    public virtual DbSet<QV_CORPBESTASSAY_TEXT> QV_CORPBESTASSAY_TEXT { get; set; }

    public virtual DbSet<QV_CORPBESTASSAY_TEXT_NM> QV_CORPBESTASSAY_TEXT_NM { get; set; }

    public virtual DbSet<QV_CORPBESTASSAY_TEXT_PR> QV_CORPBESTASSAY_TEXT_PR { get; set; }

    public virtual DbSet<QV_CORPBESTCHECKASSAY> QV_CORPBESTCHECKASSAY { get; set; }

    public virtual DbSet<QV_CORPBESTCHECKASSAY_NM> QV_CORPBESTCHECKASSAY_NM { get; set; }

    public virtual DbSet<QV_CORPBESTCHECKASSAY_NM_PR> QV_CORPBESTCHECKASSAY_NM_PR { get; set; }

    public virtual DbSet<QV_CORPBESTCHECKASSAY_PR> QV_CORPBESTCHECKASSAY_PR { get; set; }

    public virtual DbSet<QV_CORPBESTCHECKASSAY_TEXT> QV_CORPBESTCHECKASSAY_TEXT { get; set; }

    public virtual DbSet<QV_CORPBESTCHECKASSAY_TEXT_NM> QV_CORPBESTCHECKASSAY_TEXT_NM { get; set; }

    public virtual DbSet<QV_CORPBESTCHECKASSAY_TEXT_PR> QV_CORPBESTCHECKASSAY_TEXT_PR { get; set; }

    public virtual DbSet<QV_CORPBESTDGASSAY> QV_CORPBESTDGASSAY { get; set; }

    public virtual DbSet<QV_CORPBESTDGASSAY_NM> QV_CORPBESTDGASSAY_NM { get; set; }

    public virtual DbSet<QV_CORPBESTDGASSAY_NM_PR> QV_CORPBESTDGASSAY_NM_PR { get; set; }

    public virtual DbSet<QV_CORPBESTDGASSAY_PR> QV_CORPBESTDGASSAY_PR { get; set; }

    public virtual DbSet<QV_CORPBESTDGCHECKASSAY> QV_CORPBESTDGCHECKASSAY { get; set; }

    public virtual DbSet<QV_CORPBESTDGCHECKASSAY_NM> QV_CORPBESTDGCHECKASSAY_NM { get; set; }

    public virtual DbSet<QV_CORPBESTDGCHECKASSAY_NM_PR> QV_CORPBESTDGCHECKASSAY_NM_PR { get; set; }

    public virtual DbSet<QV_CORPBESTDGCHECKASSAY_PR> QV_CORPBESTDGCHECKASSAY_PR { get; set; }

    public virtual DbSet<QV_CORPBESTELASSAY> QV_CORPBESTELASSAY { get; set; }

    public virtual DbSet<QV_CORPBESTELASSAY_NM> QV_CORPBESTELASSAY_NM { get; set; }

    public virtual DbSet<QV_CORPBESTELASSAY_NM_PR> QV_CORPBESTELASSAY_NM_PR { get; set; }

    public virtual DbSet<QV_CORPBESTELASSAY_PR> QV_CORPBESTELASSAY_PR { get; set; }

    public virtual DbSet<QV_CORPBESTELCHECKASSAY> QV_CORPBESTELCHECKASSAY { get; set; }

    public virtual DbSet<QV_CORPBESTELCHECKASSAY_NM> QV_CORPBESTELCHECKASSAY_NM { get; set; }

    public virtual DbSet<QV_CORPBESTELCHECKASSAY_NM_PR> QV_CORPBESTELCHECKASSAY_NM_PR { get; set; }

    public virtual DbSet<QV_CORPBESTELCHECKASSAY_PR> QV_CORPBESTELCHECKASSAY_PR { get; set; }

    public virtual DbSet<QV_CORPBESTELDDASSAY> QV_CORPBESTELDDASSAY { get; set; }

    public virtual DbSet<QV_CORPBESTELDDASSAY_NM> QV_CORPBESTELDDASSAY_NM { get; set; }

    public virtual DbSet<QV_CORPBESTELDDCHECKASSAY> QV_CORPBESTELDDCHECKASSAY { get; set; }

    public virtual DbSet<QV_CORPBESTELDDCHECKASSAY_NM> QV_CORPBESTELDDCHECKASSAY_NM { get; set; }

    public virtual DbSet<QV_CORPBESTGNASSAY> QV_CORPBESTGNASSAY { get; set; }

    public virtual DbSet<QV_CORPBESTGNASSAY_NM> QV_CORPBESTGNASSAY_NM { get; set; }

    public virtual DbSet<QV_CORPBESTGNASSAY_NM_PR> QV_CORPBESTGNASSAY_NM_PR { get; set; }

    public virtual DbSet<QV_CORPBESTGNASSAY_PR> QV_CORPBESTGNASSAY_PR { get; set; }

    public virtual DbSet<QV_CORPBESTGNCHECKASSAY> QV_CORPBESTGNCHECKASSAY { get; set; }

    public virtual DbSet<QV_CORPBESTGNCHECKASSAY_NM> QV_CORPBESTGNCHECKASSAY_NM { get; set; }

    public virtual DbSet<QV_CORPBESTGNCHECKASSAY_NM_PR> QV_CORPBESTGNCHECKASSAY_NM_PR { get; set; }

    public virtual DbSet<QV_CORPBESTGNCHECKASSAY_PR> QV_CORPBESTGNCHECKASSAY_PR { get; set; }

    public virtual DbSet<QV_CORPCHECKASSAY> QV_CORPCHECKASSAY { get; set; }

    public virtual DbSet<QV_CORPCHECKASSAY_PR> QV_CORPCHECKASSAY_PR { get; set; }

    public virtual DbSet<QV_CORPCHECKASSAY_TEXT> QV_CORPCHECKASSAY_TEXT { get; set; }

    public virtual DbSet<QV_CORPCHECKASSAY_TEXT_PR> QV_CORPCHECKASSAY_TEXT_PR { get; set; }

    public virtual DbSet<QV_CORPSAMPLEASSAY> QV_CORPSAMPLEASSAY { get; set; }

    public virtual DbSet<QV_CORPSAMPLEASSAY_PR> QV_CORPSAMPLEASSAY_PR { get; set; }

    public virtual DbSet<QV_CORPSAMPLEASSAY_TEXT> QV_CORPSAMPLEASSAY_TEXT { get; set; }

    public virtual DbSet<QV_CORPSAMPLEASSAY_TEXT_PR> QV_CORPSAMPLEASSAY_TEXT_PR { get; set; }

    public virtual DbSet<QV_CORP_AT_PR> QV_CORP_AT_PR { get; set; }

    public virtual DbSet<QV_CORP_CA_PR> QV_CORP_CA_PR { get; set; }

    public virtual DbSet<QV_CORP_LABORATORYANALYSES_RO> QV_CORP_LABORATORYANALYSES_RO { get; set; }

    public virtual DbSet<QV_CORP_LABORATORYANALYSES_RW> QV_CORP_LABORATORYANALYSES_RW { get; set; }

    public virtual DbSet<QV_CORP_SAMPLECHECKASSAYCOMBINEDDETAILS_RO> QV_CORP_SAMPLECHECKASSAYCOMBINEDDETAILS_RO { get; set; }

    public virtual DbSet<QV_CORP_SAMPLECHECKASSAYCOMBINEDDETAILS_RW> QV_CORP_SAMPLECHECKASSAYCOMBINEDDETAILS_RW { get; set; }

    public virtual DbSet<QV_CORP_SAMPLE_CHECK_ASSAY_CMB> QV_CORP_SAMPLE_CHECK_ASSAY_CMB { get; set; }

    public virtual DbSet<QV_CORP_SAMPLE_CHECK_LJN> QV_CORP_SAMPLE_CHECK_LJN { get; set; }

    public virtual DbSet<QV_CORP_SAMPLE_CHECK_ODR> QV_CORP_SAMPLE_CHECK_ODR { get; set; }

    public virtual DbSet<QV_CORP_SAMPLE_CHECK_PEND_LJN> QV_CORP_SAMPLE_CHECK_PEND_LJN { get; set; }

    public virtual DbSet<QV_CORP_SAMPLE_CHECK_PEND_ODR> QV_CORP_SAMPLE_CHECK_PEND_ODR { get; set; }

    public virtual DbSet<QV_CORP_SAMPLE_CHECK_P_ASSAY_C> QV_CORP_SAMPLE_CHECK_P_ASSAY_C { get; set; }

    public virtual DbSet<QV_CORP_SA_PR> QV_CORP_SA_PR { get; set; }

    public virtual DbSet<QV_CORP_SMPCHK_ASSAY_DESPATCH_PIVOT_REJ_PEN_AC> QV_CORP_SMPCHK_ASSAY_DESPATCH_PIVOT_REJ_PEN_AC { get; set; }

    public virtual DbSet<QV_CORP_SMPCHK_ASSAY_DESPATCH_REJ_PEN_AC> QV_CORP_SMPCHK_ASSAY_DESPATCH_REJ_PEN_AC { get; set; }

    public virtual DbSet<QV_CORP_SMPCHK_ASSAY_DESPATCH_REJ_PEN_AC_TEXT> QV_CORP_SMPCHK_ASSAY_DESPATCH_REJ_PEN_AC_TEXT { get; set; }

    public virtual DbSet<QV_CORP_SMPCHK_BESTASSAY_DESPATCH_PIVOT_REJ_PEN_AC> QV_CORP_SMPCHK_BESTASSAY_DESPATCH_PIVOT_REJ_PEN_AC { get; set; }

    public virtual DbSet<QV_CORP_SMPCHK_BESTASSAY_DESPATCH_REJ_PEN_AC> QV_CORP_SMPCHK_BESTASSAY_DESPATCH_REJ_PEN_AC { get; set; }

    public virtual DbSet<QV_CORP_SMPCHK_BESTASSAY_DESPATCH_REJ_PEN_AC_TEXT> QV_CORP_SMPCHK_BESTASSAY_DESPATCH_REJ_PEN_AC_TEXT { get; set; }

    public virtual DbSet<QV_DERIVED_FIELD_DEPENDS> QV_DERIVED_FIELD_DEPENDS { get; set; }

    public virtual DbSet<QV_DESPATCHSEND_ORIGDESP> QV_DESPATCHSEND_ORIGDESP { get; set; }

    public virtual DbSet<QV_DE_GEOBIGCOMMENT> QV_DE_GEOBIGCOMMENT { get; set; }

    public virtual DbSet<QV_DE_GEOCOMMENT> QV_DE_GEOCOMMENT { get; set; }

    public virtual DbSet<QV_DE_GEODETAILS> QV_DE_GEODETAILS { get; set; }

    public virtual DbSet<QV_DE_GEOINTERVAL> QV_DE_GEOINTERVAL { get; set; }

    public virtual DbSet<QV_GDDATUM_RO> QV_GDDATUM_RO { get; set; }

    public virtual DbSet<QV_GDLOCALDATUMTRANSFORM> QV_GDLOCALDATUMTRANSFORM { get; set; }

    public virtual DbSet<QV_GEOBIGCOMMENT_V1> QV_GEOBIGCOMMENT_V1 { get; set; }

    public virtual DbSet<QV_GEOCOMMENT_V1> QV_GEOCOMMENT_V1 { get; set; }

    public virtual DbSet<QV_GEODETAILS_V1> QV_GEODETAILS_V1 { get; set; }

    public virtual DbSet<QV_GEOPHYSDETAILS> QV_GEOPHYSDETAILS { get; set; }

    public virtual DbSet<QV_GEOPHYSDETAILS_EMA> QV_GEOPHYSDETAILS_EMA { get; set; }

    public virtual DbSet<QV_GEOPHYSDETAILS_EMU> QV_GEOPHYSDETAILS_EMU { get; set; }

    public virtual DbSet<QV_GEOPHYSDETAILS_EMV> QV_GEOPHYSDETAILS_EMV { get; set; }

    public virtual DbSet<QV_GEOPHYSDETAILS_INTV> QV_GEOPHYSDETAILS_INTV { get; set; }

    public virtual DbSet<QV_GEOPHYSDETAILS_INTV_EMA> QV_GEOPHYSDETAILS_INTV_EMA { get; set; }

    public virtual DbSet<QV_GEOPHYSDETAILS_INTV_EMU> QV_GEOPHYSDETAILS_INTV_EMU { get; set; }

    public virtual DbSet<QV_GEOPHYSDETAILS_INTV_EMV> QV_GEOPHYSDETAILS_INTV_EMV { get; set; }

    public virtual DbSet<QV_GEOPHYSHEADER> QV_GEOPHYSHEADER { get; set; }

    public virtual DbSet<QV_GEOPHYSHEADERBIGCOMMENT> QV_GEOPHYSHEADERBIGCOMMENT { get; set; }

    public virtual DbSet<QV_GEOPHYSHEADERBIGCOMMENT_EM> QV_GEOPHYSHEADERBIGCOMMENT_EM { get; set; }

    public virtual DbSet<QV_GEOPHYSHEADERCOMMENT> QV_GEOPHYSHEADERCOMMENT { get; set; }

    public virtual DbSet<QV_GEOPHYSHEADERCOMMENT_EM> QV_GEOPHYSHEADERCOMMENT_EM { get; set; }

    public virtual DbSet<QV_GEOPHYSHEADERDETAILS> QV_GEOPHYSHEADERDETAILS { get; set; }

    public virtual DbSet<QV_GEOPHYSHEADERDETAILS_EM> QV_GEOPHYSHEADERDETAILS_EM { get; set; }

    public virtual DbSet<QV_GEOPHYSHEADER_EM> QV_GEOPHYSHEADER_EM { get; set; }

    public virtual DbSet<QV_GEOPHYS_BEST_BASE> QV_GEOPHYS_BEST_BASE { get; set; }

    public virtual DbSet<QV_GRID> QV_GRID { get; set; }

    public virtual DbSet<QV_GRID_GENERATION> QV_GRID_GENERATION { get; set; }

    public virtual DbSet<QV_HOLEBIGCOMMENT_SAMPLEID> QV_HOLEBIGCOMMENT_SAMPLEID { get; set; }

    public virtual DbSet<QV_HOLECOMMENT_SAMPLEID> QV_HOLECOMMENT_SAMPLEID { get; set; }

    public virtual DbSet<QV_HOLECOORD_SAMPLEID> QV_HOLECOORD_SAMPLEID { get; set; }

    public virtual DbSet<QV_HOLEDETAILS_SAMPLEID> QV_HOLEDETAILS_SAMPLEID { get; set; }

    public virtual DbSet<QV_HOLELOCATION_SAMPLE> QV_HOLELOCATION_SAMPLE { get; set; }

    public virtual DbSet<QV_IMPORTALIASES> QV_IMPORTALIASES { get; set; }

    public virtual DbSet<QV_METAFIELD_INFORMATION> QV_METAFIELD_INFORMATION { get; set; }

    public virtual DbSet<QV_METASQLEXP_INFORMATION> QV_METASQLEXP_INFORMATION { get; set; }

    public virtual DbSet<QV_METASQL_INFORMATION> QV_METASQL_INFORMATION { get; set; }

    public virtual DbSet<QV_METATABLE_INFORMATION> QV_METATABLE_INFORMATION { get; set; }

    public virtual DbSet<QV_METAVIEWTYPE_INFORMATION> QV_METAVIEWTYPE_INFORMATION { get; set; }

    public virtual DbSet<QV_METAVIEWTYPE_VIRTUALNAMETABLE_INFORMATION> QV_METAVIEWTYPE_VIRTUALNAMETABLE_INFORMATION { get; set; }

    public virtual DbSet<QV_METAVIEWTYPE_VIRTUALVALUETABLE_INFORMATION> QV_METAVIEWTYPE_VIRTUALVALUETABLE_INFORMATION { get; set; }

    public virtual DbSet<QV_POINTGEOCOMMENT> QV_POINTGEOCOMMENT { get; set; }

    public virtual DbSet<QV_POINTGEODETAILS> QV_POINTGEODETAILS { get; set; }

    public virtual DbSet<QV_QC_ALL_BASE_BLANK> QV_QC_ALL_BASE_BLANK { get; set; }

    public virtual DbSet<QV_QC_ALL_BASE_OR_CK> QV_QC_ALL_BASE_OR_CK { get; set; }

    public virtual DbSet<QV_QC_ALL_BASE_STD> QV_QC_ALL_BASE_STD { get; set; }

    public virtual DbSet<QV_QC_ALL_BASE_ST_BLANK> QV_QC_ALL_BASE_ST_BLANK { get; set; }

    public virtual DbSet<QV_QC_ALL_BASE_ST_OR_CK> QV_QC_ALL_BASE_ST_OR_CK { get; set; }

    public virtual DbSet<QV_QC_ALL_BASE_ST_STD> QV_QC_ALL_BASE_ST_STD { get; set; }

    public virtual DbSet<QV_QC_ASSAYTYPE_BEST_STD> QV_QC_ASSAYTYPE_BEST_STD { get; set; }

    public virtual DbSet<QV_QC_ASSAYTYPE_CK> QV_QC_ASSAYTYPE_CK { get; set; }

    public virtual DbSet<QV_QC_ASSAYTYPE_GN_STD> QV_QC_ASSAYTYPE_GN_STD { get; set; }

    public virtual DbSet<QV_QC_ASSAYTYPE_OR> QV_QC_ASSAYTYPE_OR { get; set; }

    public virtual DbSet<QV_QC_ASSAYTYPE_STD> QV_QC_ASSAYTYPE_STD { get; set; }

    public virtual DbSet<QV_QC_ASSAY_BEST_STD> QV_QC_ASSAY_BEST_STD { get; set; }

    public virtual DbSet<QV_QC_ASSAY_BEST_STD_T> QV_QC_ASSAY_BEST_STD_T { get; set; }

    public virtual DbSet<QV_QC_ASSAY_CK> QV_QC_ASSAY_CK { get; set; }

    public virtual DbSet<QV_QC_ASSAY_CK_T> QV_QC_ASSAY_CK_T { get; set; }

    public virtual DbSet<QV_QC_ASSAY_GN_STD> QV_QC_ASSAY_GN_STD { get; set; }

    public virtual DbSet<QV_QC_ASSAY_GN_STD_T> QV_QC_ASSAY_GN_STD_T { get; set; }

    public virtual DbSet<QV_QC_ASSAY_OR> QV_QC_ASSAY_OR { get; set; }

    public virtual DbSet<QV_QC_ASSAY_OR_T> QV_QC_ASSAY_OR_T { get; set; }

    public virtual DbSet<QV_QC_ASSAY_STD> QV_QC_ASSAY_STD { get; set; }

    public virtual DbSet<QV_QC_ASSAY_STD_T> QV_QC_ASSAY_STD_T { get; set; }

    public virtual DbSet<QV_QC_AS_BS_CK> QV_QC_AS_BS_CK { get; set; }

    public virtual DbSet<QV_QC_AS_BS_CK_T> QV_QC_AS_BS_CK_T { get; set; }

    public virtual DbSet<QV_QC_AS_BS_OR> QV_QC_AS_BS_OR { get; set; }

    public virtual DbSet<QV_QC_AS_BS_OR_T> QV_QC_AS_BS_OR_T { get; set; }

    public virtual DbSet<QV_QC_AS_GN_CK> QV_QC_AS_GN_CK { get; set; }

    public virtual DbSet<QV_QC_AS_GN_CK_T> QV_QC_AS_GN_CK_T { get; set; }

    public virtual DbSet<QV_QC_AS_GN_OR> QV_QC_AS_GN_OR { get; set; }

    public virtual DbSet<QV_QC_AS_GN_OR_T> QV_QC_AS_GN_OR_T { get; set; }

    public virtual DbSet<QV_QC_ATYPE_BEST_CK> QV_QC_ATYPE_BEST_CK { get; set; }

    public virtual DbSet<QV_QC_ATYPE_BEST_CK_T> QV_QC_ATYPE_BEST_CK_T { get; set; }

    public virtual DbSet<QV_QC_ATYPE_BEST_OR> QV_QC_ATYPE_BEST_OR { get; set; }

    public virtual DbSet<QV_QC_ATYPE_BEST_OR_T> QV_QC_ATYPE_BEST_OR_T { get; set; }

    public virtual DbSet<QV_QC_ATYPE_GN_CK> QV_QC_ATYPE_GN_CK { get; set; }

    public virtual DbSet<QV_QC_ATYPE_GN_CK_T> QV_QC_ATYPE_GN_CK_T { get; set; }

    public virtual DbSet<QV_QC_ATYPE_GN_OR> QV_QC_ATYPE_GN_OR { get; set; }

    public virtual DbSet<QV_QC_ATYPE_GN_OR_T> QV_QC_ATYPE_GN_OR_T { get; set; }

    public virtual DbSet<QV_QC_CHECKDETAILS_CK> QV_QC_CHECKDETAILS_CK { get; set; }

    public virtual DbSet<QV_QC_CHECKDETAILS_OR> QV_QC_CHECKDETAILS_OR { get; set; }

    public virtual DbSet<QV_QC_CHECKDETAILS_STD> QV_QC_CHECKDETAILS_STD { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_2_OR_CK> QV_QC_CORP_ALL_BASE_2_OR_CK { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_2_OR_CK_TEXT> QV_QC_CORP_ALL_BASE_2_OR_CK_TEXT { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_2_STD> QV_QC_CORP_ALL_BASE_2_STD { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_2_STD_TEXT> QV_QC_CORP_ALL_BASE_2_STD_TEXT { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_BEST_2_OR_CK> QV_QC_CORP_ALL_BASE_BEST_2_OR_CK { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_BEST_2_OR_CK_TEXT> QV_QC_CORP_ALL_BASE_BEST_2_OR_CK_TEXT { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_BEST_2_STD> QV_QC_CORP_ALL_BASE_BEST_2_STD { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_BEST_2_STD_TEXT> QV_QC_CORP_ALL_BASE_BEST_2_STD_TEXT { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_BLANK> QV_QC_CORP_ALL_BASE_BLANK { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_GN_2_OR_CK> QV_QC_CORP_ALL_BASE_GN_2_OR_CK { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_GN_2_OR_CK_TEXT> QV_QC_CORP_ALL_BASE_GN_2_OR_CK_TEXT { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_GN_2_STD> QV_QC_CORP_ALL_BASE_GN_2_STD { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_GN_2_STD_TEXT> QV_QC_CORP_ALL_BASE_GN_2_STD_TEXT { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_OR_CK> QV_QC_CORP_ALL_BASE_OR_CK { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_PIVOT_OR_CK> QV_QC_CORP_ALL_BASE_PIVOT_OR_CK { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_PIVOT_STD> QV_QC_CORP_ALL_BASE_PIVOT_STD { get; set; }

    public virtual DbSet<QV_QC_CORP_ALL_BASE_STD> QV_QC_CORP_ALL_BASE_STD { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_2_OR_CK> QV_QC_CORP_DESPATCH_BASE_2_OR_CK { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_2_OR_CK_TEXT> QV_QC_CORP_DESPATCH_BASE_2_OR_CK_TEXT { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_2_STD> QV_QC_CORP_DESPATCH_BASE_2_STD { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_2_STD_TEXT> QV_QC_CORP_DESPATCH_BASE_2_STD_TEXT { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_APVR> QV_QC_CORP_DESPATCH_BASE_APVR { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_APVRG> QV_QC_CORP_DESPATCH_BASE_APVRG { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_AVP> QV_QC_CORP_DESPATCH_BASE_AVP { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_AVPG> QV_QC_CORP_DESPATCH_BASE_AVPG { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_BEST_2_OR_CK> QV_QC_CORP_DESPATCH_BASE_BEST_2_OR_CK { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_BEST_2_OR_CK_TEXT> QV_QC_CORP_DESPATCH_BASE_BEST_2_OR_CK_TEXT { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_BEST_2_STD> QV_QC_CORP_DESPATCH_BASE_BEST_2_STD { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_BEST_2_STD_TEXT> QV_QC_CORP_DESPATCH_BASE_BEST_2_STD_TEXT { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_BLANK> QV_QC_CORP_DESPATCH_BASE_BLANK { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_GMVGM> QV_QC_CORP_DESPATCH_BASE_GMVGM { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_GMVGM_PUNITS> QV_QC_CORP_DESPATCH_BASE_GMVGM_PUNITS { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_GN_2_OR_CK> QV_QC_CORP_DESPATCH_BASE_GN_2_OR_CK { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_GN_2_OR_CK_PUNITS> QV_QC_CORP_DESPATCH_BASE_GN_2_OR_CK_PUNITS { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_GN_2_OR_CK_TEXT> QV_QC_CORP_DESPATCH_BASE_GN_2_OR_CK_TEXT { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_GN_2_STD> QV_QC_CORP_DESPATCH_BASE_GN_2_STD { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_GN_2_STD_TEXT> QV_QC_CORP_DESPATCH_BASE_GN_2_STD_TEXT { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_G_O_C> QV_QC_CORP_DESPATCH_BASE_G_O_C { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_G_O_C_PUNITS> QV_QC_CORP_DESPATCH_BASE_G_O_C_PUNITS { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_G_STD> QV_QC_CORP_DESPATCH_BASE_G_STD { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_MVM> QV_QC_CORP_DESPATCH_BASE_MVM { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_OR_CK> QV_QC_CORP_DESPATCH_BASE_OR_CK { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_PIVOT_OR_CK> QV_QC_CORP_DESPATCH_BASE_PIVOT_OR_CK { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_PIVOT_STD> QV_QC_CORP_DESPATCH_BASE_PIVOT_STD { get; set; }

    public virtual DbSet<QV_QC_CORP_DESPATCH_BASE_STD> QV_QC_CORP_DESPATCH_BASE_STD { get; set; }

    public virtual DbSet<QV_QC_CORP_DRILLHOLE_BASE_BL> QV_QC_CORP_DRILLHOLE_BASE_BL { get; set; }

    public virtual DbSet<QV_QC_CORP_DRILLHOLE_BASE_OR_C> QV_QC_CORP_DRILLHOLE_BASE_OR_C { get; set; }

    public virtual DbSet<QV_QC_CORP_DRILLHOLE_BASE_STD> QV_QC_CORP_DRILLHOLE_BASE_STD { get; set; }

    public virtual DbSet<QV_QC_CORP_POINTSAMPLE_BASE_BL> QV_QC_CORP_POINTSAMPLE_BASE_BL { get; set; }

    public virtual DbSet<QV_QC_CORP_POINTSAMPLE_BASE_ST> QV_QC_CORP_POINTSAMPLE_BASE_ST { get; set; }

    public virtual DbSet<QV_QC_CORP_POINTSAMPLE_BAS_O_C> QV_QC_CORP_POINTSAMPLE_BAS_O_C { get; set; }

    public virtual DbSet<QV_QC_DESPATCHBIGCOMMENTCODE_CK> QV_QC_DESPATCHBIGCOMMENTCODE_CK { get; set; }

    public virtual DbSet<QV_QC_DESPATCHBIGCOMMENTCODE_OR> QV_QC_DESPATCHBIGCOMMENTCODE_OR { get; set; }

    public virtual DbSet<QV_QC_DESPATCHBIGCOMMENT_CK> QV_QC_DESPATCHBIGCOMMENT_CK { get; set; }

    public virtual DbSet<QV_QC_DESPATCHBIGCOMMENT_OR> QV_QC_DESPATCHBIGCOMMENT_OR { get; set; }

    public virtual DbSet<QV_QC_DESPATCHBIGCOMMENT_STD> QV_QC_DESPATCHBIGCOMMENT_STD { get; set; }

    public virtual DbSet<QV_QC_DESPATCHCODE_CK> QV_QC_DESPATCHCODE_CK { get; set; }

    public virtual DbSet<QV_QC_DESPATCHCODE_OR> QV_QC_DESPATCHCODE_OR { get; set; }

    public virtual DbSet<QV_QC_DESPATCHDETAILS_CK> QV_QC_DESPATCHDETAILS_CK { get; set; }

    public virtual DbSet<QV_QC_DESPATCHDETAILS_OR> QV_QC_DESPATCHDETAILS_OR { get; set; }

    public virtual DbSet<QV_QC_DESPATCHDETAILS_STD> QV_QC_DESPATCHDETAILS_STD { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETBIGCOMCODE_CK> QV_QC_DESPATCHRETBIGCOMCODE_CK { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETBIGCOMCODE_OR> QV_QC_DESPATCHRETBIGCOMCODE_OR { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETBIGCOMMENT_CK> QV_QC_DESPATCHRETBIGCOMMENT_CK { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETBIGCOMMENT_OR> QV_QC_DESPATCHRETBIGCOMMENT_OR { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETBIGCOMMENT_STD> QV_QC_DESPATCHRETBIGCOMMENT_STD { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETCODE_CK> QV_QC_DESPATCHRETCODE_CK { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETCODE_OR> QV_QC_DESPATCHRETCODE_OR { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETCOMCODE_CK> QV_QC_DESPATCHRETCOMCODE_CK { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETCOMCODE_OR> QV_QC_DESPATCHRETCOMCODE_OR { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETCOMMENT_CK> QV_QC_DESPATCHRETCOMMENT_CK { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETCOMMENT_OR> QV_QC_DESPATCHRETCOMMENT_OR { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETCOMMENT_STD> QV_QC_DESPATCHRETCOMMENT_STD { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETDETAILS_CK> QV_QC_DESPATCHRETDETAILS_CK { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETDETAILS_OR> QV_QC_DESPATCHRETDETAILS_OR { get; set; }

    public virtual DbSet<QV_QC_DESPATCHRETDETAILS_STD> QV_QC_DESPATCHRETDETAILS_STD { get; set; }

    public virtual DbSet<QV_QC_DESPATCH_BASE_BLANK> QV_QC_DESPATCH_BASE_BLANK { get; set; }

    public virtual DbSet<QV_QC_DESPATCH_BASE_G_OR_CK> QV_QC_DESPATCH_BASE_G_OR_CK { get; set; }

    public virtual DbSet<QV_QC_DESPATCH_BASE_G_STD> QV_QC_DESPATCH_BASE_G_STD { get; set; }

    public virtual DbSet<QV_QC_DESPATCH_BASE_G_ST_OR_CK> QV_QC_DESPATCH_BASE_G_ST_OR_CK { get; set; }

    public virtual DbSet<QV_QC_DESPATCH_BASE_OR_CK> QV_QC_DESPATCH_BASE_OR_CK { get; set; }

    public virtual DbSet<QV_QC_DESPATCH_BASE_STD> QV_QC_DESPATCH_BASE_STD { get; set; }

    public virtual DbSet<QV_QC_DESPATCH_BASE_ST_BLANK> QV_QC_DESPATCH_BASE_ST_BLANK { get; set; }

    public virtual DbSet<QV_QC_DESPATCH_BASE_ST_G_STD> QV_QC_DESPATCH_BASE_ST_G_STD { get; set; }

    public virtual DbSet<QV_QC_DESPATCH_BASE_ST_OR_CK> QV_QC_DESPATCH_BASE_ST_OR_CK { get; set; }

    public virtual DbSet<QV_QC_DESPATCH_BASE_ST_STD> QV_QC_DESPATCH_BASE_ST_STD { get; set; }

    public virtual DbSet<QV_QC_DRILLHOLE_BASE_BLANK> QV_QC_DRILLHOLE_BASE_BLANK { get; set; }

    public virtual DbSet<QV_QC_DRILLHOLE_BASE_OR_CK> QV_QC_DRILLHOLE_BASE_OR_CK { get; set; }

    public virtual DbSet<QV_QC_DRILLHOLE_BASE_STD> QV_QC_DRILLHOLE_BASE_STD { get; set; }

    public virtual DbSet<QV_QC_HOLEBIGCOMMENT> QV_QC_HOLEBIGCOMMENT { get; set; }

    public virtual DbSet<QV_QC_HOLEBIGCOMMENT_STD> QV_QC_HOLEBIGCOMMENT_STD { get; set; }

    public virtual DbSet<QV_QC_HOLECOMMENT> QV_QC_HOLECOMMENT { get; set; }

    public virtual DbSet<QV_QC_HOLECOMMENT_STD> QV_QC_HOLECOMMENT_STD { get; set; }

    public virtual DbSet<QV_QC_HOLECOORD_OR> QV_QC_HOLECOORD_OR { get; set; }

    public virtual DbSet<QV_QC_HOLECOORD_STD> QV_QC_HOLECOORD_STD { get; set; }

    public virtual DbSet<QV_QC_HOLEDETAILS> QV_QC_HOLEDETAILS { get; set; }

    public virtual DbSet<QV_QC_HOLEDETAILS_STD> QV_QC_HOLEDETAILS_STD { get; set; }

    public virtual DbSet<QV_QC_POINTSAMPLE_BASE_BLANK> QV_QC_POINTSAMPLE_BASE_BLANK { get; set; }

    public virtual DbSet<QV_QC_POINTSAMPLE_BASE_OR_CK> QV_QC_POINTSAMPLE_BASE_OR_CK { get; set; }

    public virtual DbSet<QV_QC_POINTSAMPLE_BASE_STD> QV_QC_POINTSAMPLE_BASE_STD { get; set; }

    public virtual DbSet<QV_QC_SAMPLECODE> QV_QC_SAMPLECODE { get; set; }

    public virtual DbSet<QV_QC_SAMPLECODE_CK> QV_QC_SAMPLECODE_CK { get; set; }

    public virtual DbSet<QV_QC_SAMPLECODE_OR> QV_QC_SAMPLECODE_OR { get; set; }

    public virtual DbSet<QV_QC_SAMPLECOORD_OR> QV_QC_SAMPLECOORD_OR { get; set; }

    public virtual DbSet<QV_QC_SAMPLECOORD_STD> QV_QC_SAMPLECOORD_STD { get; set; }

    public virtual DbSet<QV_QLOH_ALLTRANSACTION> QV_QLOH_ALLTRANSACTION { get; set; }

    public virtual DbSet<QV_QLOH_HOLETRANSACTION> QV_QLOH_HOLETRANSACTION { get; set; }

    public virtual DbSet<QV_QLOH_STATUS_UPDATE> QV_QLOH_STATUS_UPDATE { get; set; }

    public virtual DbSet<QV_QOM_GEOPHYSDETAILS_RO> QV_QOM_GEOPHYSDETAILS_RO { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK> QV_SAMPLE_CHECK { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_ASSAY> QV_SAMPLE_CHECK_ASSAY { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_ASSAY_TEXT> QV_SAMPLE_CHECK_ASSAY_TEXT { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_BIGCOMMENT> QV_SAMPLE_CHECK_BIGCOMMENT { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_COMMENT> QV_SAMPLE_CHECK_COMMENT { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_DESPATCH> QV_SAMPLE_CHECK_DESPATCH { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_DESPATCHDETAILS_RO> QV_SAMPLE_CHECK_DESPATCHDETAILS_RO { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_DESPATCHRETCOMMENT_RO> QV_SAMPLE_CHECK_DESPATCHRETCOMMENT_RO { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_DESPATCHRETDETAILS_RO> QV_SAMPLE_CHECK_DESPATCHRETDETAILS_RO { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_DESPATCH_COM> QV_SAMPLE_CHECK_DESPATCH_COM { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_DESPATCH_DET> QV_SAMPLE_CHECK_DESPATCH_DET { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_DETAILS> QV_SAMPLE_CHECK_DETAILS { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_POINTGEOBIGCOM> QV_SAMPLE_CHECK_POINTGEOBIGCOM { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_POINTGEOCOM> QV_SAMPLE_CHECK_POINTGEOCOM { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_POINTGEOLOGY> QV_SAMPLE_CHECK_POINTGEOLOGY { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_RO> QV_SAMPLE_CHECK_RO { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_RO_2> QV_SAMPLE_CHECK_RO_2 { get; set; }

    public virtual DbSet<QV_SAMPLE_CHECK_SAMPLECOORD> QV_SAMPLE_CHECK_SAMPLECOORD { get; set; }

    public virtual DbSet<QV_SAMPLE_HOLELOCATION> QV_SAMPLE_HOLELOCATION { get; set; }

    public virtual DbSet<QV_SMPCHK_BESTASSAY> QV_SMPCHK_BESTASSAY { get; set; }

    public virtual DbSet<QV_SMPCHK_BESTASSAY_NAME> QV_SMPCHK_BESTASSAY_NAME { get; set; }

    public virtual DbSet<QV_SMPCHK_BESTASS_T> QV_SMPCHK_BESTASS_T { get; set; }

    public virtual DbSet<QV_SMPCHK_BESTASS_T_NAME> QV_SMPCHK_BESTASS_T_NAME { get; set; }

    public virtual DbSet<QV_SMPCHK_BESTELASSAY> QV_SMPCHK_BESTELASSAY { get; set; }

    public virtual DbSet<QV_SMPCHK_BESTELASSAY_N> QV_SMPCHK_BESTELASSAY_N { get; set; }

    public virtual DbSet<QV_SMPCHK_BESTELASSAY_T> QV_SMPCHK_BESTELASSAY_T { get; set; }

    public virtual DbSet<QV_SMPCHK_BESTELASSAY_T_N> QV_SMPCHK_BESTELASSAY_T_N { get; set; }

    public virtual DbSet<QV_SMPCHK_BESTGNASSAY> QV_SMPCHK_BESTGNASSAY { get; set; }

    public virtual DbSet<QV_SMPCHK_BESTGNASSAY_T> QV_SMPCHK_BESTGNASSAY_T { get; set; }

    public virtual DbSet<QV_SMPCHK_GEOBIGCOMMENT_V1> QV_SMPCHK_GEOBIGCOMMENT_V1 { get; set; }

    public virtual DbSet<QV_SMPCHK_GEOCOMMENT_V1> QV_SMPCHK_GEOCOMMENT_V1 { get; set; }

    public virtual DbSet<QV_SMPCHK_GEODETAILS_V1> QV_SMPCHK_GEODETAILS_V1 { get; set; }

    public virtual DbSet<QV_VS_DSRANGE_RO> QV_VS_DSRANGE_RO { get; set; }

    public virtual DbSet<QV_VS_DSRANGE_RW> QV_VS_DSRANGE_RW { get; set; }

    public virtual DbSet<QV_VS_DVRANGE_RO> QV_VS_DVRANGE_RO { get; set; }

    public virtual DbSet<QV_VS_DVRANGE_RW> QV_VS_DVRANGE_RW { get; set; }

    public virtual DbSet<QV_VS_EXTREF_RW> QV_VS_EXTREF_RW { get; set; }

    public virtual DbSet<QV_VS_FIELD_RW> QV_VS_FIELD_RW { get; set; }

    public virtual DbSet<QV_VS_GEODETAILS_DESC> QV_VS_GEODETAILS_DESC { get; set; }

    public virtual DbSet<QV_VS_GEODETAILS_NUMEQ> QV_VS_GEODETAILS_NUMEQ { get; set; }

    public virtual DbSet<QV_VS_GEOLOGYCODESEC_DESC> QV_VS_GEOLOGYCODESEC_DESC { get; set; }

    public virtual DbSet<QV_VS_GEOLOGYCODESEC_NUMEQ> QV_VS_GEOLOGYCODESEC_NUMEQ { get; set; }

    public virtual DbSet<QV_VS_INTREF_RW> QV_VS_INTREF_RW { get; set; }

    public virtual DbSet<QV_VS_LOOKUP_RO> QV_VS_LOOKUP_RO { get; set; }

    public virtual DbSet<QV_VS_LOOKUP_RW> QV_VS_LOOKUP_RW { get; set; }

    public virtual DbSet<QV_VS_NSRANGE_RO> QV_VS_NSRANGE_RO { get; set; }

    public virtual DbSet<QV_VS_NSRANGE_RW> QV_VS_NSRANGE_RW { get; set; }

    public virtual DbSet<QV_VS_NVRANGE_RO> QV_VS_NVRANGE_RO { get; set; }

    public virtual DbSet<QV_VS_NVRANGE_RW> QV_VS_NVRANGE_RW { get; set; }

    public virtual DbSet<QV_VS_POINTGEO_DESC> QV_VS_POINTGEO_DESC { get; set; }

    public virtual DbSet<QV_VS_POINTGEO_NUMEQ> QV_VS_POINTGEO_NUMEQ { get; set; }

    public virtual DbSet<QV_VS_PROJECT_RW> QV_VS_PROJECT_RW { get; set; }

    public virtual DbSet<Q_GHeader> Q_GHeader { get; set; }

    public virtual DbSet<Q_OREDEF_TRACKING> Q_OREDEF_TRACKING { get; set; }

    public virtual DbSet<Q_VUL_COLLARS> Q_VUL_COLLARS { get; set; }

    public virtual DbSet<Q_VUL_COLLARS_PLANNED> Q_VUL_COLLARS_PLANNED { get; set; }

    public virtual DbSet<RH_CollarGeologyDrillingSampleFromTo> RH_CollarGeologyDrillingSampleFromTo { get; set; }

    public virtual DbSet<RH_PlannedHoles> RH_PlannedHoles { get; set; }

    public virtual DbSet<RH_QAQC_TOTALASSAYS> RH_QAQC_TOTALASSAYS { get; set; }

    public virtual DbSet<Range> Range { get; set; }

    public virtual DbSet<RangeGroupingElement> RangeGroupingElement { get; set; }

    public virtual DbSet<Relationship> Relationship { get; set; }

    public virtual DbSet<RelationshipConditionalJoin> RelationshipConditionalJoin { get; set; }

    public virtual DbSet<RelationshipJoin> RelationshipJoin { get; set; }

    public virtual DbSet<RelationshipOrdering> RelationshipOrdering { get; set; }

    public virtual DbSet<RelationshipPathing> RelationshipPathing { get; set; }

    public virtual DbSet<RelationshipPathingCheapestEdges> RelationshipPathingCheapestEdges { get; set; }

    public virtual DbSet<Role> Role { get; set; }

    public virtual DbSet<SAMPLE> SAMPLE { get; set; }

    public virtual DbSet<SAMPLEASSAY> SAMPLEASSAY { get; set; }

    public virtual DbSet<SAMPLEBIGCOMMENT> SAMPLEBIGCOMMENT { get; set; }

    public virtual DbSet<SAMPLEBIGCOMMENTCODE> SAMPLEBIGCOMMENTCODE { get; set; }

    public virtual DbSet<SAMPLECODE> SAMPLECODE { get; set; }

    public virtual DbSet<SAMPLECOMMENT> SAMPLECOMMENT { get; set; }

    public virtual DbSet<SAMPLECOMMENTCODE> SAMPLECOMMENTCODE { get; set; }

    public virtual DbSet<SAMPLECOORD> SAMPLECOORD { get; set; }

    public virtual DbSet<SAMPLEDESPATCH> SAMPLEDESPATCH { get; set; }

    public virtual DbSet<SAMPLEDESPATCHCODE> SAMPLEDESPATCHCODE { get; set; }

    public virtual DbSet<SAMPLEDESPATCHCOMCODE> SAMPLEDESPATCHCOMCODE { get; set; }

    public virtual DbSet<SAMPLEDESPATCHCOMMENT> SAMPLEDESPATCHCOMMENT { get; set; }

    public virtual DbSet<SAMPLEDESPATCHDETAILS> SAMPLEDESPATCHDETAILS { get; set; }

    public virtual DbSet<SAMPLEDETAILS> SAMPLEDETAILS { get; set; }

    public virtual DbSet<SAMPLETYPE> SAMPLETYPE { get; set; }

    public virtual DbSet<SHIFT> SHIFT { get; set; }

    public virtual DbSet<STANDARDSASSAY> STANDARDSASSAY { get; set; }

    public virtual DbSet<STANDARDSDEFBIGCOMMENT> STANDARDSDEFBIGCOMMENT { get; set; }

    public virtual DbSet<STANDARDSDEFBIGCOMMENTCODE> STANDARDSDEFBIGCOMMENTCODE { get; set; }

    public virtual DbSet<STANDARDSDEFCODE> STANDARDSDEFCODE { get; set; }

    public virtual DbSet<STANDARDSDEFDETAILS> STANDARDSDEFDETAILS { get; set; }

    public virtual DbSet<STANDARDSDEFINITION> STANDARDSDEFINITION { get; set; }

    public virtual DbSet<STANDARDSTYPE> STANDARDSTYPE { get; set; }

    public virtual DbSet<SUITEDEFINITION> SUITEDEFINITION { get; set; }

    public virtual DbSet<SURVEYAZIMUTH> SURVEYAZIMUTH { get; set; }

    public virtual DbSet<SURVEYBIGCOMMENT> SURVEYBIGCOMMENT { get; set; }

    public virtual DbSet<SURVEYBIGCOMMENTCODE> SURVEYBIGCOMMENTCODE { get; set; }

    public virtual DbSet<SURVEYCODE> SURVEYCODE { get; set; }

    public virtual DbSet<SURVEYCOMMENT> SURVEYCOMMENT { get; set; }

    public virtual DbSet<SURVEYCOMMENTCODE> SURVEYCOMMENTCODE { get; set; }

    public virtual DbSet<SURVEYDETAILS> SURVEYDETAILS { get; set; }

    public virtual DbSet<SURVEYTYPE> SURVEYTYPE { get; set; }

    public virtual DbSet<Schedule> Schedule { get; set; }

    public virtual DbSet<SecureEntity> SecureEntity { get; set; }

    public virtual DbSet<Setting> Setting { get; set; }

    public virtual DbSet<SettingProcessingEventType> SettingProcessingEventType { get; set; }

    public virtual DbSet<SiteLabBackLogStatus> SiteLabBackLogStatus { get; set; }

    public virtual DbSet<Styling> Styling { get; set; }

    public virtual DbSet<StylingCategory> StylingCategory { get; set; }

    public virtual DbSet<StylingCondition> StylingCondition { get; set; }

    public virtual DbSet<StylingFieldGroup> StylingFieldGroup { get; set; }

    public virtual DbSet<StylingFieldGroupStyling> StylingFieldGroupStyling { get; set; }

    public virtual DbSet<StylingStylingType> StylingStylingType { get; set; }

    public virtual DbSet<TEMP_DESPATCH_FE> TEMP_DESPATCH_FE { get; set; }

    public virtual DbSet<TEMP_DESPATCH_SE> TEMP_DESPATCH_SE { get; set; }

    public virtual DbSet<TEMP_GEOPHYS> TEMP_GEOPHYS { get; set; }

    public virtual DbSet<TENEMENT> TENEMENT { get; set; }

    public virtual DbSet<TENEMENTBIGCOMMENT> TENEMENTBIGCOMMENT { get; set; }

    public virtual DbSet<TENEMENTBIGCOMMENTCODE> TENEMENTBIGCOMMENTCODE { get; set; }

    public virtual DbSet<TENEMENTCODE> TENEMENTCODE { get; set; }

    public virtual DbSet<TENEMENTCOMMENT> TENEMENTCOMMENT { get; set; }

    public virtual DbSet<TENEMENTCOMMENTCODE> TENEMENTCOMMENTCODE { get; set; }

    public virtual DbSet<TENEMENTDETAILS> TENEMENTDETAILS { get; set; }

    public virtual DbSet<TEST_MERGE> TEST_MERGE { get; set; }

    public virtual DbSet<TableCategory> TableCategory { get; set; }

    public virtual DbSet<Template> Template { get; set; }

    public virtual DbSet<TextResource> TextResource { get; set; }

    public virtual DbSet<Transform> Transform { get; set; }

    public virtual DbSet<UNITCONVERSION1> UNITCONVERSION1 { get; set; }

    public virtual DbSet<UNITS> UNITS { get; set; }

    public virtual DbSet<UNITSTYPE> UNITSTYPE { get; set; }

    public virtual DbSet<Unit> Unit { get; set; }

    public virtual DbSet<UnitConversion> UnitConversion { get; set; }

    public virtual DbSet<User> User { get; set; }

    public virtual DbSet<UserObjectCategory> UserObjectCategory { get; set; }

    public virtual DbSet<VSCORE> VSCORE { get; set; }

    public virtual DbSet<VSCORECODE> VSCORECODE { get; set; }

    public virtual DbSet<VSCOREDETAILS> VSCOREDETAILS { get; set; }

    public virtual DbSet<VSCOREFIELD> VSCOREFIELD { get; set; }

    public virtual DbSet<VSCOREIDENTITY> VSCOREIDENTITY { get; set; }

    public virtual DbSet<VSCORELOOKUP> VSCORELOOKUP { get; set; }

    public virtual DbSet<VSCORERANGE> VSCORERANGE { get; set; }

    public virtual DbSet<VSCOREREF> VSCOREREF { get; set; }

    public virtual DbSet<VSCOREREFIDENTITY> VSCOREREFIDENTITY { get; set; }

    public virtual DbSet<VSPROJECT> VSPROJECT { get; set; }

    public virtual DbSet<VSSTYLING> VSSTYLING { get; set; }

    public virtual DbSet<VSTYPE> VSTYPE { get; set; }

    public virtual DbSet<VUL_COLLARS> VUL_COLLARS { get; set; }

    public virtual DbSet<VW_B_Samples_Available> VW_B_Samples_Available { get; set; }

    public virtual DbSet<VW_SamplePickup> VW_SamplePickup { get; set; }

    public virtual DbSet<View> View { get; set; }

    public virtual DbSet<ViewCompound> ViewCompound { get; set; }

    public virtual DbSet<VirtualField> VirtualField { get; set; }

    public virtual DbSet<WATERCODE> WATERCODE { get; set; }

    public virtual DbSet<WATERDETAILS> WATERDETAILS { get; set; }

    public virtual DbSet<WATERTABLE> WATERTABLE { get; set; }

    public virtual DbSet<WETCOMP> WETCOMP { get; set; }

    public virtual DbSet<_2024GeologyCodes> _2024GeologyCodes { get; set; }

    public virtual DbSet<aaDHSamp> aaDHSamp { get; set; }

    public virtual DbSet<aaDHSamp2> aaDHSamp2 { get; set; }

    public virtual DbSet<aaDHSampQC_DUP> aaDHSampQC_DUP { get; set; }

    public virtual DbSet<aaDHSampQC_DUP_P1> aaDHSampQC_DUP_P1 { get; set; }

    public virtual DbSet<aaDHSampQC_DUP_P2> aaDHSampQC_DUP_P2 { get; set; }

    public virtual DbSet<aaDHSampQC_LABCHCK> aaDHSampQC_LABCHCK { get; set; }

    public virtual DbSet<aaDHSampQC_LABCHCK_P1> aaDHSampQC_LABCHCK_P1 { get; set; }

    public virtual DbSet<aaDHSampQC_LABDUP> aaDHSampQC_LABDUP { get; set; }

    public virtual DbSet<aaDHSampQC_PULPREAS> aaDHSampQC_PULPREAS { get; set; }

    public virtual DbSet<aaDHSampQC_PULPSP> aaDHSampQC_PULPSP { get; set; }

    public virtual DbSet<aaDHSampQC_RESAMPLE> aaDHSampQC_RESAMPLE { get; set; }

    public virtual DbSet<aaDHSampQC_WETBULK> aaDHSampQC_WETBULK { get; set; }

    public virtual DbSet<aaDHSampQC_WETBULK_P1> aaDHSampQC_WETBULK_P1 { get; set; }

    public virtual DbSet<aaDHSamp_P1> aaDHSamp_P1 { get; set; }

    public virtual DbSet<aaDHSamp_P2> aaDHSamp_P2 { get; set; }

    public virtual DbSet<aaDHSamp_P3> aaDHSamp_P3 { get; set; }

    public virtual DbSet<aaDHSamp_P3_V2> aaDHSamp_P3_V2 { get; set; }

    public virtual DbSet<aaDHSamp_Quarantine> aaDHSamp_Quarantine { get; set; }

    public virtual DbSet<r201_20191122> r201_20191122 { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AA_ASSAY_tblStandardSamp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AA_ASSAY_tblStandardSamp", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Batch_No)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Load_Date).HasColumnType("datetime");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.SampleID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<AA_ASSAY_tblStandardSampP1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AA_ASSAY_tblStandardSampP1", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Batch_No)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Load_Date).HasColumnType("datetime");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.SampleID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<AA_ASSAY_tblStandardSampP2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AA_ASSAY_tblStandardSampP2", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Batch_No)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Load_Date).HasColumnType("datetime");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.SampleID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<AA_ASSAY_tblStandardSampQC>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AA_ASSAY_tblStandardSampQC", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Batch_No)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Load_Date).HasColumnType("datetime");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.SampleID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<AA_DRILL_DESIGN_DETAILS_EXTENDED>(entity =>
        {
            entity.HasKey(e => e.HOLEID);

            entity.ToTable("AA_DRILL_DESIGN_DETAILS_EXTENDED", "dbo");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COLLAR_STATUS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DESIGN_VERSION)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GDP)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Geophys_Status)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LEASE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MINING_SOURCE)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.MINING_VERSION)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OVERALL_STATUS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PLANNED_GRID)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.REGIONPIT)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SHORTID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SUBREGIONPIT)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SUMP)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AC_ACTIVITYREPORT>(entity =>
        {
            entity.HasKey(e => new { e.ACTIVITYREPORTCODE, e.COMPANYCODE }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORT", "dbo", tb =>
                {
                    tb.HasComment("Stores details of the activity report itself. The activity report may be a DOR, a PLOD or some other type of periodical report of activities provided by a contractor.");
                    tb.HasTrigger("T_AC_ACTIVITYREPORT_IU");
                    tb.HasTrigger("T_AC_ACTIVITYREPORT_LOCK_UD");
                    tb.HasTrigger("T_AC_ACTIVITYREPORT_UD");
                });

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier, within the contractor company, to identify the activity report.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the contractor company that is associated with this contract. It is the primary key of the COMPANY table.");
            entity.Property(e => e.ACTIVITYREPORTDATE)
                .HasComment("The date of the activity report.")
                .HasColumnType("datetime");
            entity.Property(e => e.CONTRACTCATEGORYCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The contract category into which the report's contract must fall. It ties all the items in this report to the category of contract.");
            entity.Property(e => e.EQUIPMENTCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier of the main piece of equipment against which activities are reported.");
            entity.Property(e => e.JOBCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier of the job that the activity report is associated with.");
            entity.Property(e => e.SHIFT)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The shift during which the activities in the activity report were completed.");

            entity.HasOne(d => d.COMPANYCODENavigation).WithMany(p => p.AC_ACTIVITYREPORT)
                .HasForeignKey(d => d.COMPANYCODE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_ACTIVITYREPORT_04");

            entity.HasOne(d => d.CONTRACTCATEGORYCODENavigation).WithMany(p => p.AC_ACTIVITYREPORT)
                .HasForeignKey(d => d.CONTRACTCATEGORYCODE)
                .HasConstraintName("FK_AC_ACTIVITYREPORT_05");

            entity.HasOne(d => d.EQUIPMENTCODENavigation).WithMany(p => p.AC_ACTIVITYREPORT)
                .HasForeignKey(d => d.EQUIPMENTCODE)
                .HasConstraintName("FK_AC_ACTIVITYREPORT_01");

            entity.HasOne(d => d.JOBCODENavigation).WithMany(p => p.AC_ACTIVITYREPORT)
                .HasForeignKey(d => d.JOBCODE)
                .HasConstraintName("FK_AC_ACTIVITYREPORT_02");

            entity.HasOne(d => d.SHIFTNavigation).WithMany(p => p.AC_ACTIVITYREPORT)
                .HasForeignKey(d => d.SHIFT)
                .HasConstraintName("FK_AC_ACTIVITYREPORT_03");
        });

        modelBuilder.Entity<AC_ACTIVITYREPORTBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.ACTIVITYREPORTCODE, e.COMPANYCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORTBIGCOMMENT", "dbo", tb => tb.HasComment("BigComment table associated with AC_ACTIVITYREPORT."));

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier, within the contractor company, to identify the activity report.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the contractor company that is associated with this contract. It is the primary key of the COMPANY table.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual big comment field.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The value stored in the virtual big comment field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AC_ACTIVITYREPORTBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_ACTIVITYREPORTBIGCOMMENT_01");

            entity.HasOne(d => d.AC_ACTIVITYREPORT).WithMany(p => p.AC_ACTIVITYREPORTBIGCOMMENT)
                .HasForeignKey(d => new { d.ACTIVITYREPORTCODE, d.COMPANYCODE })
                .HasConstraintName("FK_AC_ACTIVITYREPORTBIGCOMMENT_02");
        });

        modelBuilder.Entity<AC_ACTIVITYREPORTBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORTBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with AC_ACTIVITYREPORTBIGCOMMENT.");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTBIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The description of a virtual field.");
        });

        modelBuilder.Entity<AC_ACTIVITYREPORTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with AC_ACTIVITYREPORT.");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the data type of a virtual field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The description of a virtual field.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the units used when a numeric data type is used.");

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.AC_ACTIVITYREPORTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_ACTIVITYREPORTCODE_01");
        });

        modelBuilder.Entity<AC_ACTIVITYREPORTCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.ACTIVITYREPORTCODE, e.COMPANYCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORTCOMMENT", "dbo", tb => tb.HasComment("Comment table associated with AC_ACTIVITYREPORT. "));

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier, within the contractor company, to identify the activity report.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the contractor company that is associated with this contract. It is the primary key of the COMPANY table.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual comment field.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The value stored in the virtual comment field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AC_ACTIVITYREPORTCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_ACTIVITYREPORTCOMMENT_01");

            entity.HasOne(d => d.AC_ACTIVITYREPORT).WithMany(p => p.AC_ACTIVITYREPORTCOMMENT)
                .HasForeignKey(d => new { d.ACTIVITYREPORTCODE, d.COMPANYCODE })
                .HasConstraintName("FK_AC_ACTIVITYREPORTCOMMENT_02");
        });

        modelBuilder.Entity<AC_ACTIVITYREPORTCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORTCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with AC_ACTIVITYREPORTCOMMENT. ");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The description of a virtual field.");
        });

        modelBuilder.Entity<AC_ACTIVITYREPORTDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.ACTIVITYREPORTCODE, e.COMPANYCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORTDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Details table associated with AC_ACTIVITYREPORT. ");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTDETAILS_IU");
                });

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier, within the contractor company, to identify the activity report.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the contractor company that is associated with this contract. It is the primary key of the COMPANY table.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual details field.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value stored in the virtual details field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AC_ACTIVITYREPORTDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_ACTIVITYREPORTDETAILS_01");

            entity.HasOne(d => d.AC_ACTIVITYREPORT).WithMany(p => p.AC_ACTIVITYREPORTDETAILS)
                .HasForeignKey(d => new { d.ACTIVITYREPORTCODE, d.COMPANYCODE })
                .HasConstraintName("FK_AC_ACTIVITYREPORTDETAILS_02");
        });

        modelBuilder.Entity<AC_ACTIVITYREPORTITEM>(entity =>
        {
            entity.HasKey(e => new { e.ACTIVITYREPORTCODE, e.COMPANYCODE, e.ITEMNUMBER }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORTITEM", "dbo", tb =>
                {
                    tb.HasComment("Stores details of individual items listed on an activity report. This may be quantities of consumables, depths drilled, etc.");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTITEM_IU");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTITEM_LOCK_UD");
                });

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("With COMPANYCODE, forms the unique identifier for the activity report to which the item belongs.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("With ACTIVITYREPORTCODE, forms the unique identifier for the activity report to which the item belongs.");
            entity.Property(e => e.ITEMNUMBER).HasComment("The unique identifier of the specific item within the activity report that is identified by COMPANYCODE and ACTIVITYREPORTCODE.");
            entity.Property(e => e.ACTIVITYHOURS)
                .HasComment("The duration of an activity. Mutually exclusive with STARTDATETIME and ENDDATETIME.")
                .HasColumnType("decimal(9, 2)");
            entity.Property(e => e.COMMENT)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("Any comments associated with the activity report item.");
            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The type of contract item for which the activity report item is providing reported values.");
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A cost code for the item reported.");
            entity.Property(e => e.ENDDATETIME)
                .HasComment("The date and time that an activity ended. Mutually exclusive with ACTIVITYHOURS.")
                .HasColumnType("datetime");
            entity.Property(e => e.ENDVALUE).HasComment("The end of a range value associated with the report item when the contract item type is defined for range data.");
            entity.Property(e => e.SINGLEVALUE).HasComment("The value associated with the report item when the contract item type is defined for point data rather than range data.");
            entity.Property(e => e.STARTDATETIME)
                .HasComment("The date and time that an activity started or a cost was incurred. Mutually exclusive with ACTIVITYHOURS.")
                .HasColumnType("datetime");
            entity.Property(e => e.STARTVALUE).HasComment("The start of a range value associated with the report item when the contract item type is defined for range data.");

            entity.HasOne(d => d.COSTCODENavigation).WithMany(p => p.AC_ACTIVITYREPORTITEM)
                .HasForeignKey(d => d.COSTCODE)
                .HasConstraintName("FK_AC_ACTIVITYREPORTITEM_03");

            entity.HasOne(d => d.AC_ACTIVITYREPORT).WithMany(p => p.AC_ACTIVITYREPORTITEM)
                .HasForeignKey(d => new { d.ACTIVITYREPORTCODE, d.COMPANYCODE })
                .HasConstraintName("FK_AC_ACTIVITYREPORTITEM_02");
        });

        modelBuilder.Entity<AC_ACTIVITYREPORTITEMBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.ACTIVITYREPORTCODE, e.COMPANYCODE, e.ITEMNUMBER, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORTITEMBIGCOMMENT", "dbo", tb => tb.HasComment("BigComment table associated with AC_ACTIVITYREPORTITEM."));

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("With COMPANYCODE and ITEMNUMBER, forms the unique identifier of the activity report item to which the comment belongs.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("With ACTIVITYREPORTCODE and ITEMNUMBER, forms the unique identifier of the activity report item to which the comment belongs.");
            entity.Property(e => e.ITEMNUMBER).HasComment("With COMPANYCODE and ACTIVITYREPORTCODE, forms the unique identifier of the activity report item to which the comment belongs.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual field and the foreign key to the lookup table.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The value of the virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AC_ACTIVITYREPORTITEMBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_ACTIVITYREPORTITEMBIGCOMMENT_01");

            entity.HasOne(d => d.AC_ACTIVITYREPORTITEM).WithMany(p => p.AC_ACTIVITYREPORTITEMBIGCOMMENT)
                .HasForeignKey(d => new { d.ACTIVITYREPORTCODE, d.COMPANYCODE, d.ITEMNUMBER })
                .HasConstraintName("FK_AC_ACTIVITYREPORTITEMBIGCOMMENT_02");
        });

        modelBuilder.Entity<AC_ACTIVITYREPORTITEMBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORTITEMBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with AC_ACTIVITYREPORTITEMBIGCOMMENT.");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTITEMBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTITEMBIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual field and the primary key of the lookup table.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of this virtual field.");
        });

        modelBuilder.Entity<AC_ACTIVITYREPORTITEMCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORTITEMCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with AC_ACTIVITYREPORTITEMDETAILS.");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTITEMCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTITEMCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual field.");
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The type of the data to be held in this virtual field. A foreign key to the DATATYPE lookup table.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of this virtual field.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The units that can be applied to the virtual field. A foreign key to the UNITS lookup table.");

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.AC_ACTIVITYREPORTITEMCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_ACTIVITYREPORTITEMCODE_01");
        });

        modelBuilder.Entity<AC_ACTIVITYREPORTITEMCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.ACTIVITYREPORTCODE, e.COMPANYCODE, e.ITEMNUMBER, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORTITEMCOMMENT", "dbo", tb => tb.HasComment("Comment table associated with AC_ACTIVITYREPORTITEM."));

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("With COMPANYCODE and ITEMNUMBER, forms the unique identifier of the activity report item to which the comment belongs.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("With ACTIVITYREPORTCODE and ITEMNUMBER, forms the unique identifier of the activity report item to which the comment belongs.");
            entity.Property(e => e.ITEMNUMBER).HasComment("With COMPANYCODE and ACTIVITYREPORTCODE, forms the unique identifier of the activity report item to which the comment belongs.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual field and the foreign key to the lookup table.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The value of the virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AC_ACTIVITYREPORTITEMCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_ACTIVITYREPORTITEMCOMMENT_01");

            entity.HasOne(d => d.AC_ACTIVITYREPORTITEM).WithMany(p => p.AC_ACTIVITYREPORTITEMCOMMENT)
                .HasForeignKey(d => new { d.ACTIVITYREPORTCODE, d.COMPANYCODE, d.ITEMNUMBER })
                .HasConstraintName("FK_AC_ACTIVITYREPORTITEMCOMMENT_02");
        });

        modelBuilder.Entity<AC_ACTIVITYREPORTITEMCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORTITEMCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with AC_ACTIVITYREPORTITEMCOMMENT.");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTITEMCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTITEMCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual field and the primary key for the lookup table.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of this virtual field.");
        });

        modelBuilder.Entity<AC_ACTIVITYREPORTITEMDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.ACTIVITYREPORTCODE, e.COMPANYCODE, e.ITEMNUMBER, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORTITEMDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Details table associated with AC_ACTIVITYREPORTITEM.");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTITEMDETAILS_IU");
                });

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("With COMPANYCODE and ITEMNUMBER, forms the unique identifier of the activity report item to which the virtual field belongs.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("With ACTIVITYREPORTCODE and ITEMNUMBER, forms the unique identifier of the activity report item to which the virtual field belongs.");
            entity.Property(e => e.ITEMNUMBER).HasComment("With COMPANYCODE and ACTIVITYREPORTCODE, forms the unique identifier of the activity report item to which the virtual field belongs.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual field and the foreign key to the lookup table.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value of the virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AC_ACTIVITYREPORTITEMDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_ACTIVITYREPORTITEMDETAILS_01");

            entity.HasOne(d => d.AC_ACTIVITYREPORTITEM).WithMany(p => p.AC_ACTIVITYREPORTITEMDETAILS)
                .HasForeignKey(d => new { d.ACTIVITYREPORTCODE, d.COMPANYCODE, d.ITEMNUMBER })
                .HasConstraintName("FK_AC_ACTIVITYREPORTITEMDETAILS_02");
        });

        modelBuilder.Entity<AC_ACTIVITYREPORTITEMPARAMETER>(entity =>
        {
            entity.HasKey(e => new { e.ACTIVITYREPORTCODE, e.COMPANYCODE, e.ITEMNUMBER, e.HIERARCHYLEVEL }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_ACTIVITYREPORTITEMPARAMETER", "dbo", tb =>
                {
                    tb.HasComment("Stores the parameters associated with an activity report item.  These parameters define the activity report's path to its related contract item type. Data is only required in this table when the contract item type is hierarchical.");
                    tb.HasTrigger("T_AC_ACTIVITYREPORTITEMPARAMETER_IU");
                });

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("With COMPANYCODE and ITEMNUMBER, forms the unique identifier of the activity report item to which the parameter belongs.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("With ACTIVITYREPORTCODE and ITEMNUMBER, forms the unique identifier of the activity report item to which the parameter belongs.");
            entity.Property(e => e.ITEMNUMBER).HasComment("With COMPANYCODE and ACTIVITYREPORTCODE, forms the unique identifier of the activity report item to which the parameter belongs.");
            entity.Property(e => e.HIERARCHYLEVEL).HasComment("The level in the activity report item's contract item type hierarchy to which the parameter belongs.");
            entity.Property(e => e.ENDVALUE).HasComment("For value range parameters, the end value for the specified activity report item at the specified contract item type hierarchy level.");
            entity.Property(e => e.SINGLEVALUE).HasComment("For single value parameters, the value for the specified activity report item at the specified contract item type hierarchy level.");
            entity.Property(e => e.STARTVALUE).HasComment("For value range parameters, the start value for the specified activity report item at the specified contract item type hierarchy level.");
            entity.Property(e => e.TEXTVALUE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("For text values parameters, the value for the specified activity report item at the specified contract item type hierarchy level.");

            entity.HasOne(d => d.AC_ACTIVITYREPORTITEM).WithMany(p => p.AC_ACTIVITYREPORTITEMPARAMETER)
                .HasForeignKey(d => new { d.ACTIVITYREPORTCODE, d.COMPANYCODE, d.ITEMNUMBER })
                .HasConstraintName("FK_AC_ACTIVITYREPORTITEMPARAMETER_01");
        });

        modelBuilder.Entity<AC_CONTRACT>(entity =>
        {
            entity.HasKey(e => e.CONTRACTCODE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_CONTRACT", "dbo", tb =>
                {
                    tb.HasComment("Stores details of the contract, possibly an SoR, between the company and its contractors.");
                    tb.HasTrigger("T_AC_CONTRACT_IU");
                    tb.HasTrigger("T_AC_CONTRACT_LOCK_UD");
                });

            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique code identifying this instance of the contract.");
            entity.Property(e => e.CONTRACTCATEGORYCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The category to which this contract applies.");
            entity.Property(e => e.CONTRACTENDDATE)
                .HasComment("The date up to which this instance of the contract is effective.")
                .HasColumnType("datetime");
            entity.Property(e => e.CONTRACTSTARTDATE)
                .HasComment("The date from which this instance of the contract is effective.")
                .HasColumnType("datetime");
            entity.Property(e => e.INACTIVEFROMDATE)
                .HasComment("The date up to which this instance of the contract is active.")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CONTRACTCATEGORYCODENavigation).WithMany(p => p.AC_CONTRACT)
                .HasForeignKey(d => d.CONTRACTCATEGORYCODE)
                .HasConstraintName("FK_AC_CONTRACT_01");

            entity.HasOne(d => d.CONTRACTCODENavigation).WithOne(p => p.AC_CONTRACT)
                .HasForeignKey<AC_CONTRACT>(d => d.CONTRACTCODE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_CONTRACT_02");
        });

        modelBuilder.Entity<AC_CONTRACTBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.CONTRACTCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_CONTRACTBIGCOMMENT", "dbo", tb => tb.HasComment("BigComment table associated with AC_Contract. "));

            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for this instance of the contract.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual big comment field.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The value stored in the virtual big comment field.");

            entity.HasOne(d => d.CONTRACTCODENavigation).WithMany(p => p.AC_CONTRACTBIGCOMMENT)
                .HasForeignKey(d => d.CONTRACTCODE)
                .HasConstraintName("FK_AC_CONTRACTBIGCOMMENT_02");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AC_CONTRACTBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_CONTRACTBIGCOMMENT_01");
        });

        modelBuilder.Entity<AC_CONTRACTBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_CONTRACTBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with AC_CONTRACTBIGCOMMENT. ");
                    tb.HasTrigger("T_AC_CONTRACTBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_AC_CONTRACTBIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The description of a virtual field.");
        });

        modelBuilder.Entity<AC_CONTRACTCATEGORY>(entity =>
        {
            entity.HasKey(e => e.CONTRACTCATEGORYCODE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_CONTRACTCATEGORY", "dbo", tb => tb.HasComment("Stores the category of a contract, e.g. Grade Control, Resource Definition, Geology, Geotech or differing geographical regions."));

            entity.Property(e => e.CONTRACTCATEGORYCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The unique identifier of the contract category.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the contract category.");
        });

        modelBuilder.Entity<AC_CONTRACTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_CONTRACTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with AC_CONTRACTDETAILS. ");
                    tb.HasTrigger("T_AC_CONTRACTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_AC_CONTRACTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the data type of a virtual field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The description of a virtual field.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the units used when a numeric data type is used.");

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.AC_CONTRACTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_CONTRACTCODE_01");
        });

        modelBuilder.Entity<AC_CONTRACTCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.CONTRACTCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_CONTRACTCOMMENT", "dbo", tb => tb.HasComment("Comment table associated with AC_CONTRACT. "));

            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for this instance of the contract.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual comment field.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The value stored in the virtual comment field.");

            entity.HasOne(d => d.CONTRACTCODENavigation).WithMany(p => p.AC_CONTRACTCOMMENT)
                .HasForeignKey(d => d.CONTRACTCODE)
                .HasConstraintName("FK_AC_CONTRACTCOMMENT_01");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AC_CONTRACTCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_CONTRACTCOMMENT_NAME");
        });

        modelBuilder.Entity<AC_CONTRACTCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_CONTRACTCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with AC_CONTRACTCOMMENT.");
                    tb.HasTrigger("T_AC_CONTRACTCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_AC_CONTRACTCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The description of a virtual field.");
        });

        modelBuilder.Entity<AC_CONTRACTDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.CONTRACTCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_CONTRACTDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Details table associated with AC_CONTRACT.");
                    tb.HasTrigger("T_AC_CONTRACTDETAILS_IU");
                });

            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for this instance of the contract.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual details field.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value stored in the virtual details field.");

            entity.HasOne(d => d.CONTRACTCODENavigation).WithMany(p => p.AC_CONTRACTDETAILS)
                .HasForeignKey(d => d.CONTRACTCODE)
                .HasConstraintName("FK_AC_CONTRACTDETAILS_CONTRACTCODE");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AC_CONTRACTDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_CONTRACTDETAILS_NAME");
        });

        modelBuilder.Entity<AC_CONTRACTITEM>(entity =>
        {
            entity.HasKey(e => e.CONTRACTITEMID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_CONTRACTITEM", "dbo", tb =>
                {
                    tb.HasComment("Stores details of the items included within a contract.");
                    tb.HasTrigger("T_AC_CONTRACTITEM_D");
                    tb.HasTrigger("T_AC_CONTRACTITEM_IU");
                    tb.HasTrigger("T_AC_CONTRACTITEM_LOCK_UD");
                });

            entity.HasIndex(e => e.CONTRACTCODE, "IDX_AC_CONTRACTITEM_01");

            entity.HasIndex(e => new { e.CONTRACTITEMTYPECODE, e.CONTRACTCODE, e.CONTRACTRATEENDDATE }, "UQ_AC_CONTRACTITEM_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.CONTRACTITEMID).HasComment("The unique identifier for a contract item.");
            entity.Property(e => e.CONTRACTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The identifier of the contract in which the item resides, part of a unique key.");
            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The identifier for the predefined contract item type associated with the item, part of a unique key.");
            entity.Property(e => e.CONTRACTRATEENDDATE)
                .HasComment("The expiry date of a contract rate for a contract item, part of a unique key.")
                .HasColumnType("datetime");
            entity.Property(e => e.CONTRACTVALUE).HasComment("A value associated with the contract item.");

            entity.HasOne(d => d.CONTRACTCODENavigation).WithMany(p => p.AC_CONTRACTITEM)
                .HasForeignKey(d => d.CONTRACTCODE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_CONTRACTITEM_AC_CONTRACTCODE");
        });

        modelBuilder.Entity<AC_CONTRACTITEMTYPE>(entity =>
        {
            entity.HasKey(e => e.CONTRACTITEMTYPECODE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_CONTRACTITEMTYPE", "dbo", tb =>
                {
                    tb.HasComment("Stores details of the predefined types for items that can be included within a contract.");
                    tb.HasTrigger("T_AC_CONTRACTITEMTYPE_D");
                    tb.HasTrigger("T_AC_CONTRACTITEMTYPE_IU");
                });

            entity.HasIndex(e => e.PARENTCONTRACTITEMTYPECODE, "IDX_AC_CONTRACTITEMTYPE_01").HasFillFactor(80);

            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the contract item type.");
            entity.Property(e => e.CANPRORATA).HasComment("Bit flag to identify contract item types that can be charged pro rata.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the contract item type.");
            entity.Property(e => e.ENDVALUE).HasComment("For value ranges, the end value for the specified contract item type at the specified contract item type hierarchy level.");
            entity.Property(e => e.GROUPNAME)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the contract item type group.");
            entity.Property(e => e.ISRANGEDATA)
                .HasDefaultValue((byte)1)
                .HasComment("Whether or not the report values applied should be a range.  The alternative is a just a single point.");
            entity.Property(e => e.PARENTCONTRACTITEMTYPECODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("A self join back to a parent contract item type code allowing hierarchies to be constructed.");
            entity.Property(e => e.SINGLEVALUE).HasComment("For single values, the value for the specified contract item type at the specified contract item type hierarchy level.");
            entity.Property(e => e.STARTVALUE).HasComment("For value ranges, the start value for the specified contract item type at the specified contract item type hierarchy level.");
            entity.Property(e => e.TEXTVALUE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("For text values, the value for the specified contract item type at the specified contract item type hierarchy level.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unit of measurement for the contract item type hierarchy.");

            entity.HasOne(d => d.GROUPNAMENavigation).WithMany(p => p.AC_CONTRACTITEMTYPE)
                .HasForeignKey(d => d.GROUPNAME)
                .HasConstraintName("FK_AC_CONTRACTITEMTYPE_03");

            entity.HasOne(d => d.UNITSNavigation).WithMany(p => p.AC_CONTRACTITEMTYPE)
                .HasForeignKey(d => d.UNITS)
                .HasConstraintName("FK_AC_CONTRACTITEMTYPE_01");
        });

        modelBuilder.Entity<AC_CONTRACTITEMTYPEGROUP>(entity =>
        {
            entity.HasKey(e => e.GROUPNAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_CONTRACTITEMTYPEGROUP", "dbo", tb => tb.HasComment("Allows the grouping of contract item types."));

            entity.Property(e => e.GROUPNAME)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier of the name for the contract item type group.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the contract item type group.");
        });

        modelBuilder.Entity<AC_DESPATCHSENDACTIVITYREPORTITEM>(entity =>
        {
            entity.HasKey(e => new { e.DESPATCHNO, e.ACTIVITYREPORTCODE, e.COMPANYCODE, e.ITEMNUMBER }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_DESPATCHSENDACTIVITYREPORTITEM", "dbo", tb =>
                {
                    tb.HasComment("Provides a link between an activity report item and a specific despatch number. An item can be linked to either a single or to many despatch numbers where items are prorated across many despatch numbers.");
                    tb.HasTrigger("T_AC_DESPATCHSENDACTIVITYREPORTITEM_IU");
                    tb.HasTrigger("T_AC_DESPATCHSENDACTIVITYREPORTITEM_LOCK_I");
                    tb.HasTrigger("T_AC_DESPATCHSENDACTIVITYREPORTITEM_LOCK_UD");
                });

            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasComment("The administrative code to track a batch of samples despatched to a laboratory.");
            entity.Property(e => e.ACTIVITYREPORTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("With COMPANYCODE and ITEMNUMBER, the unique identifier for the activity report item being linked to the despatch.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("With ACTIVITYREPORTCODE and ITEMNUMBER, the unique identifier for the activity report item being linked to the despatch.");
            entity.Property(e => e.ITEMNUMBER).HasComment("With ACTIVITYREPORTCODE and COMPANYCODE, the unique identifier for the activity report item being linked to the despatch.");
            entity.Property(e => e.PRORATAPERCENT)
                .HasComment("The proportion of an item per despatch. Total cannot exceed 100%.")
                .HasColumnType("decimal(7, 4)");

            entity.HasOne(d => d.DESPATCHNONavigation).WithMany(p => p.AC_DESPATCHSENDACTIVITYREPORTITEM)
                .HasForeignKey(d => d.DESPATCHNO)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_DESPATCHSENDACTIVITYREPORTITEM_01");

            entity.HasOne(d => d.AC_ACTIVITYREPORTITEM).WithMany(p => p.AC_DESPATCHSENDACTIVITYREPORTITEM)
                .HasForeignKey(d => new { d.ACTIVITYREPORTCODE, d.COMPANYCODE, d.ITEMNUMBER })
                .HasConstraintName("FK_AC_DESPATCHSENDACTIVITYREPORTITEM_02");
        });

        modelBuilder.Entity<AC_EQUIPMENTTYPE>(entity =>
        {
            entity.HasKey(e => e.EQUIPMENTTYPECODE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_EQUIPMENTTYPE", "dbo", tb =>
                {
                    tb.HasComment("Stores details of the type of the piece of equipment listed in EQUIPMENT.");
                    tb.HasTrigger("T_AC_EQUIPMENTTYPE_IU");
                });

            entity.Property(e => e.EQUIPMENTTYPECODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for this type of equipment, for example 'DDH Drill Rig'.");
            entity.Property(e => e.CANREPORT).HasComment("Whether or not this type of equipment can be the main equipment for a contractor's report.");

            entity.HasOne(d => d.EQUIPMENTTYPECODENavigation).WithOne(p => p.AC_EQUIPMENTTYPE)
                .HasForeignKey<AC_EQUIPMENTTYPE>(d => d.EQUIPMENTTYPECODE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_EQUIPMENTTYPE_01");
        });

        modelBuilder.Entity<AC_HOLELOCATIONACTIVITYREPORTITEM>(entity =>
        {
            entity.HasKey(e => new { e.HOLEID, e.PROJECTCODE, e.ACTIVITYREPORTCODE, e.COMPANYCODE, e.ITEMNUMBER }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_HOLELOCATIONACTIVITYREPORTITEM", "dbo", tb =>
                {
                    tb.HasComment("Provides a link between an activity report item and a specific hole. An item can be linked to either a single hole or to many holes where items are prorated across many holes.");
                    tb.HasTrigger("T_AC_HOLELOCATIONACTIVITYREPORTITEM_IU");
                    tb.HasTrigger("T_AC_HOLELOCATIONACTIVITYREPORTITEM_LOCK_I");
                    tb.HasTrigger("T_AC_HOLELOCATIONACTIVITYREPORTITEM_LOCK_UD");
                });

            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("With PROJECTCODE, the unique identifier for the hole to which the activity report item is linked.");
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("With HOLEID, the unique identifier for the hole to which the activity report item is linked.");
            entity.Property(e => e.ACTIVITYREPORTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("With COMPANYCODE and ITEMNUMBER, the unique identifier for the activity report item being linked to the hole.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("With ACTIVITYREPORTCODE and ITEMNUMBER, the unique identifier for the activity report item being linked to the hole.");
            entity.Property(e => e.ITEMNUMBER).HasComment("With ACTIVITYREPORTCODE and COMPANYCODE, the unique identifier for the activity report item being linked to the hole.");
            entity.Property(e => e.PRORATAPERCENT)
                .HasComment("The proportion of an item per hole. Total cannot exceed 100%.")
                .HasColumnType("decimal(7, 4)");

            entity.HasOne(d => d.HOLELOCATION).WithMany(p => p.AC_HOLELOCATIONACTIVITYREPORTITEM)
                .HasForeignKey(d => new { d.PROJECTCODE, d.HOLEID })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_HOLELOCATIONACTIVITYREPORTITEM_01");

            entity.HasOne(d => d.AC_ACTIVITYREPORTITEM).WithMany(p => p.AC_HOLELOCATIONACTIVITYREPORTITEM)
                .HasForeignKey(d => new { d.ACTIVITYREPORTCODE, d.COMPANYCODE, d.ITEMNUMBER })
                .HasConstraintName("FK_AC_HOLELOCATIONACTIVITYREPORTITEM_02");
        });

        modelBuilder.Entity<AC_INVOICE>(entity =>
        {
            entity.HasKey(e => new { e.INVOICENUMBER, e.COMPANYCODE }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_INVOICE", "dbo", tb =>
                {
                    tb.HasComment("Stores properties of a single invoice.");
                    tb.HasTrigger("T_AC_INVOICE_I");
                    tb.HasTrigger("T_AC_INVOICE_LOCK_UD");
                });

            entity.Property(e => e.INVOICENUMBER)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The invoice number supplied by the contract company.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The company code of the contract company.");
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A cost code used in the invoice.");
            entity.Property(e => e.INVOICEAMOUNT)
                .HasComment("The total amount requested for the invoiced work completed.")
                .HasColumnType("decimal(19, 2)");
            entity.Property(e => e.INVOICEISSUEDATE)
                .HasComment("The date when the invoice was issued.")
                .HasColumnType("datetime");
            entity.Property(e => e.INVOICEPAIDAMOUNT)
                .HasComment("The total amount paid for the invoiced work completed.")
                .HasColumnType("decimal(19, 2)");
            entity.Property(e => e.INVOICEPAIDDATE)
                .HasComment("The date when the invoice was paid.")
                .HasColumnType("datetime");
            entity.Property(e => e.INVOICEPERIODENDDATE)
                .HasComment("The end date of the invoicing period.")
                .HasColumnType("datetime");
            entity.Property(e => e.INVOICEPERIODSTARTDATE)
                .HasComment("The start date of the invocing period.")
                .HasColumnType("datetime");
            entity.Property(e => e.INVOICERECEIVEDATE)
                .HasComment("The date when the invoice was received.")
                .HasColumnType("datetime");

            entity.HasOne(d => d.COMPANYCODENavigation).WithMany(p => p.AC_INVOICE)
                .HasForeignKey(d => d.COMPANYCODE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_INVOICE_01");

            entity.HasOne(d => d.COSTCODENavigation).WithMany(p => p.AC_INVOICE)
                .HasForeignKey(d => d.COSTCODE)
                .HasConstraintName("FK_AC_INVOICE_02");
        });

        modelBuilder.Entity<AC_INVOICEACTIVITY>(entity =>
        {
            entity.HasKey(e => new { e.INVOICENUMBER, e.COMPANYCODE, e.ACTIVITYREPORTCODE }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_INVOICEACTIVITY", "dbo", tb =>
                {
                    tb.HasComment("SLinks an Invoice to an Activity Report .");
                    tb.HasTrigger("T_AC_INVOICEACTIVITY_IU");
                    tb.HasTrigger("T_AC_INVOICEACTIVITY_LOCK_I");
                    tb.HasTrigger("T_AC_INVOICEACTIVITY_LOCK_UD");
                });

            entity.HasIndex(e => new { e.ACTIVITYREPORTCODE, e.COMPANYCODE }, "UQ_AC_INVOICEACTIVITY")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.INVOICENUMBER)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The invoice number supplied by the contract company.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The company code of the contract company.");
            entity.Property(e => e.ACTIVITYREPORTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The identifier, within the contractor company, to identify the activity report.");

            entity.HasOne(d => d.AC_INVOICE).WithMany(p => p.AC_INVOICEACTIVITY)
                .HasForeignKey(d => new { d.INVOICENUMBER, d.COMPANYCODE })
                .HasConstraintName("FK_AC_INVOICEACTIVITY_01");
        });

        modelBuilder.Entity<AC_INVOICEBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.INVOICENUMBER, e.COMPANYCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_INVOICEBIGCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Big comment table associated with AC_INVOICE.");
                    tb.HasTrigger("T_AC_INVOICEBIGCOMMENT_LOCK_IUD");
                });

            entity.Property(e => e.INVOICENUMBER)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The invoice number supplied by the contract company.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The company code of the contract company.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the big comment virtual field.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The value of the big comment virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AC_INVOICEBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_INVOICEBIGCOMMENT_01");

            entity.HasOne(d => d.AC_INVOICE).WithMany(p => p.AC_INVOICEBIGCOMMENT)
                .HasForeignKey(d => new { d.INVOICENUMBER, d.COMPANYCODE })
                .HasConstraintName("FK_AC_INVOICEBIGCOMMENT_02");
        });

        modelBuilder.Entity<AC_INVOICEBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_INVOICEBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with AC_INVOICEBIGCOMMENT. ");
                    tb.HasTrigger("T_AC_INVOICEBIGCOMMENTCODE_IU");
                    tb.HasTrigger("T_AC_INVOICEBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The description of a virtual field.");
        });

        modelBuilder.Entity<AC_INVOICECODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_INVOICECODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with AC_INVOICECODE.");
                    tb.HasTrigger("T_AC_INVOICECODE_IU");
                    tb.HasTrigger("T_AC_INVOICECODE_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the data type of a virtual field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The description of a virtual field.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the units used when a numeric data type is used.");
        });

        modelBuilder.Entity<AC_INVOICEDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.INVOICENUMBER, e.COMPANYCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_INVOICEDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Details table associated with AC_INVOICE.");
                    tb.HasTrigger("T_AC_INVOICEDETAILS_IU");
                    tb.HasTrigger("T_AC_INVOICEDETAILS_LOCK_IUD");
                });

            entity.Property(e => e.INVOICENUMBER)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The invoice number supplied by the contract company.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The company code of the contract company.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual field and the foreign key to the lookup table.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value of the virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AC_INVOICEDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_INVOICEDETAILS_01");

            entity.HasOne(d => d.AC_INVOICE).WithMany(p => p.AC_INVOICEDETAILS)
                .HasForeignKey(d => new { d.INVOICENUMBER, d.COMPANYCODE })
                .HasConstraintName("FK_AC_INVOICEDETAILS_02");
        });

        modelBuilder.Entity<AC_INVOICELOCK>(entity =>
        {
            entity.HasKey(e => new { e.INVOICENUMBER, e.COMPANYCODE }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_INVOICELOCK", "dbo", tb =>
                {
                    tb.HasComment("Stores locking attributes of a single invoice.");
                    tb.HasTrigger("T_AC_INVOICELOCK_IU");
                    tb.HasTrigger("T_AC_INVOICELOCK_U");
                });

            entity.Property(e => e.INVOICENUMBER)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The invoice number supplied by the contract company.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The company code of the contract company.");
            entity.Property(e => e.ISLOCKED)
                .HasDefaultValue((byte)0)
                .HasComment("Indicate whether the invoice has been paid up and the report details need to be preserved. Not null enforced in trigger.");
            entity.Property(e => e.LOCKCHANGEDATE)
                .HasComment("Date when invoice and associated records are locked or unlocked.")
                .HasColumnType("datetime");
            entity.Property(e => e.LOCKCHANGESYSTEMUSER)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Name of network system user who locked or unlocked the invoice.");
            entity.Property(e => e.LOCKCHANGEUSER)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Name of database user who locked or unlocked the invoice.");
        });

        modelBuilder.Entity<AC_JOB>(entity =>
        {
            entity.HasKey(e => e.JOBCODE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_JOB", "dbo", tb => tb.HasComment("Provides a common root for relating a number of contractors contracted to work on related tasks."));

            entity.Property(e => e.JOBCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the job.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the job.");

            entity.HasMany(d => d.CONTRACTCODE).WithMany(p => p.JOBCODE)
                .UsingEntity<Dictionary<string, object>>(
                    "AC_JOBCONTRACT",
                    r => r.HasOne<AC_CONTRACT>().WithMany()
                        .HasForeignKey("CONTRACTCODE")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AC_JOBCONTRACT_02"),
                    l => l.HasOne<AC_JOB>().WithMany()
                        .HasForeignKey("JOBCODE")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AC_JOBCONTRACT_01"),
                    j =>
                    {
                        j.HasKey("JOBCODE", "CONTRACTCODE").HasAnnotation("SqlServer:FillFactor", 80);
                        j.ToTable("AC_JOBCONTRACT", "dbo", tb =>
                            {
                                tb.HasComment("Provides a many-to-many relationship between jobs and contracts.");
                                tb.HasTrigger("T_AC_JOBCONTRACT_UD");
                            });
                        j.IndexerProperty<string>("JOBCODE")
                            .HasMaxLength(50)
                            .IsUnicode(false)
                            .HasComment("The unique identifier for the job being related to a contract.");
                        j.IndexerProperty<string>("CONTRACTCODE")
                            .HasMaxLength(20)
                            .IsUnicode(false)
                            .HasComment("The unique identifier for the contract being related to a job.");
                    });
        });

        modelBuilder.Entity<AC_JOBBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.JOBCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_JOBBIGCOMMENT", "dbo", tb => tb.HasComment("BigComment table associated with AC_JOB. "));

            entity.Property(e => e.JOBCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the job.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual comment field.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The value stored in the virtual comment field.");

            entity.HasOne(d => d.JOBCODENavigation).WithMany(p => p.AC_JOBBIGCOMMENT)
                .HasForeignKey(d => d.JOBCODE)
                .HasConstraintName("FK_AC_JOBBIGCOMMENT_01");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AC_JOBBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_JOBBIGCOMMENT_02");
        });

        modelBuilder.Entity<AC_JOBBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_JOBBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with AC_JOBBIGCOMMENT.");
                    tb.HasTrigger("T_AC_JOBBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_AC_JOBBIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The description of a virtual field.");
        });

        modelBuilder.Entity<AC_JOBCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_JOBCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with AC_JOBDETAILS.");
                    tb.HasTrigger("T_AC_JOBCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_AC_JOBCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the data type of a virtual field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The descriptions of a virtual field.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the units used when a numeric data type is used.");

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.AC_JOBCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_JOBCODE_DATATYPE");
        });

        modelBuilder.Entity<AC_JOBCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.JOBCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_JOBCOMMENT", "dbo", tb => tb.HasComment("Comment table associated with AC_JOB. "));

            entity.Property(e => e.JOBCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("A unique code for the job.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual comment field.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The value stored in the virtual comment field.");

            entity.HasOne(d => d.JOBCODENavigation).WithMany(p => p.AC_JOBCOMMENT)
                .HasForeignKey(d => d.JOBCODE)
                .HasConstraintName("FK_AC_JOBCOMMENT_01");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AC_JOBCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_JOBCOMMENT_NAME");
        });

        modelBuilder.Entity<AC_JOBCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_JOBCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated AC_CONTRACTCOMMENT.");
                    tb.HasTrigger("T_AC_JOBCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_AC_JOBCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The description of a virtual field.");
        });

        modelBuilder.Entity<AC_JOBDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.JOBCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AC_JOBDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Details table associated with AC_JOB. ");
                    tb.HasTrigger("T_AC_JOBDETAILS_IU");
                });

            entity.Property(e => e.JOBCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the job.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual details field.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value stored in the virtual details field.");

            entity.HasOne(d => d.JOBCODENavigation).WithMany(p => p.AC_JOBDETAILS)
                .HasForeignKey(d => d.JOBCODE)
                .HasConstraintName("FK_AC_JOBDETAILS_JOBCODE");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AC_JOBDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AC_JOBDETAILS_NAME");
        });

        modelBuilder.Entity<ANALYSISMETHOD>(entity =>
        {
            entity.HasKey(e => e.ANALYSISMETHOD1).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ANALYSISMETHOD", "dbo", tb => tb.HasComment("The method used by a lab to perform analysis."));

            entity.Property(e => e.ANALYSISMETHOD1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ANALYSISMETHOD");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ANALYSISSUITE>(entity =>
        {
            entity.HasKey(e => e.ANALYSISSUITE1).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ANALYSISSUITE", "dbo", tb => tb.HasComment("You may like to have the elements grouped into a named AnalysisSuite. A DespatchNo (see DespatchSend) can be associated with an Analysis Suite. "));

            entity.Property(e => e.ANALYSISSUITE1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ANALYSISSUITE");
            entity.Property(e => e.ACTIVE).HasDefaultValue((byte)1);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AREA>(entity =>
        {
            entity.HasKey(e => e.AREACODE)
                .HasName("PRIMARYKEYAREA")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AREA", "dbo", tb =>
                {
                    tb.HasComment("Area stores particulars about the actual location of the work program. It could be named after the nearest town or the geological belt in which the project occurs, for example.  ");
                    tb.HasTrigger("T_AREA_CAS");
                    tb.HasTrigger("T_AREA_UCAS");
                });

            entity.Property(e => e.AREACODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AREANAME)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AREACODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AREACODE", "dbo", tb =>
                {
                    tb.HasComment("AreaCode stores the names of the virtual fields for the Areas compound definition. ");
                    tb.HasTrigger("T_AREACODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_AREACODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.AREACODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AREACODE_DATATYPE");
        });

        modelBuilder.Entity<AREADETAILS>(entity =>
        {
            entity.HasKey(e => new { e.AREACODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AREADETAILS", "dbo", tb =>
                {
                    tb.HasComment("AreaDetails stores data for the Areas virtual fields. It is associated with the Area table to make up the Areas compound definition. ");
                    tb.HasTrigger("T_AREADETAILS_VAL");
                });

            entity.HasIndex(e => e.AREACODE, "IDX_AREADETAILS_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_AREADETAILS_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_AREADETAILS_03").HasFillFactor(80);

            entity.Property(e => e.AREACODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.AREADETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AREADETAILS_NAME");
        });

        modelBuilder.Entity<ASSAYDETECTION>(entity =>
        {
            entity.HasKey(e => new { e.NAME, e.ASSAYDATE }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ASSAYDETECTION", "dbo", tb =>
                {
                    tb.HasComment("This table lets you define date based detection limits for elements (the numeric fields defined in AssayType). The detection limit is validated for samples that are despatched. The despatch SendDate (DespatchSend table) is read, this is associated with the most recent AssayDate (AssayDetection table) and the analytical results checked that they fit between the defined detection limits. ");
                    tb.HasTrigger("T_ADET_VAL");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PREPARATION)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.PREPARATIONNavigation).WithMany(p => p.ASSAYDETECTION)
                .HasForeignKey(d => d.PREPARATION)
                .HasConstraintName("FK_AD_PREP");
        });

        modelBuilder.Entity<ASSAYGENERICCODE>(entity =>
        {
            entity.HasKey(e => e.GENERICCODE)
                .HasName("PK_GENERICCODE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ASSAYGENERICCODE", "dbo", tb => tb.HasComment("This table is a reference table for the AssayType foreign key field GenericCode. "));

            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ASSAYLABORATORY>(entity =>
        {
            entity.HasKey(e => e.LABCODE)
                .HasName("PRIMARYKEYASSAYLABORATORY")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ASSAYLABORATORY", "dbo", tb =>
                {
                    tb.HasComment("AssayLaboratory stores the reference to the laboratories used for analytical work - associates a LabCode with a CompanyCode. ");
                    tb.HasTrigger("T_ASSAYLABORATORY_AC_U");
                    tb.HasTrigger("T_ASSAYLAB_IU");
                });

            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ACTIVE).HasDefaultValue((byte)1);
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.COMPANYCODENavigation).WithMany(p => p.ASSAYLABORATORY)
                .HasForeignKey(d => d.COMPANYCODE)
                .HasConstraintName("FK_ASSAYLABORATORY_COMPANY");
        });

        modelBuilder.Entity<ASSAYTRANSLATION>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ASSAYTRANSLATION", "dbo");

            entity.Property(e => e.ATNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EXPRULE1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EXPRULE2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SCNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SCVALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ASSAYTYPE>(entity =>
        {
            entity.HasKey(e => e.NAME)
                .HasName("PRIMARYKEYASSAYTYPE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ASSAYTYPE", "dbo", tb =>
                {
                    tb.HasComment("AssayType stores the names of element. These are virtual fields and are generated and defined on site. The values or analytical results for the elements are numeric. Geological information is stored in other tables: PointGeology and GeoInterval. The data in AssayType.Name are virtual fields. These can be included when defining a form definition based upon an Assay compound definition. For example, if AssayType.Name has the following records; AuPPM, AuRpt1and AuRpt2 an Assay form definition could have the following fields: SampleID HoleID ProjectCode SampFrom SampTo SampleType â€¦ AuPPM AuRpt1 AuRpt2 Thus the user is able to define the field names for the elements assayed to meet the needs of the company, the project and/or the project commodity. This list can be added to at any time.  ");
                    tb.HasTrigger("T_ASSAYTYPE_CF_D");
                    tb.HasTrigger("T_ASSAYTYPE_CF_IU");
                    tb.HasTrigger("T_ASSAYTYPE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_AT_CAS");
                    tb.HasTrigger("T_AT_CAS_CORP");
                    tb.HasTrigger("T_AT_CON");
                    tb.HasTrigger("T_AT_CON_CORP");
                    tb.HasTrigger("T_AT_CON_IU");
                });

            entity.HasIndex(e => e.ELEMENT, "IDX_ASSAYTYPE_01");

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.ANALYSISMETHODNavigation).WithMany(p => p.ASSAYTYPE)
                .HasForeignKey(d => d.ANALYSISMETHOD)
                .HasConstraintName("FK_ASSAYTYPE_ANALY");

            entity.HasOne(d => d.DIGESTDEGREENavigation).WithMany(p => p.ASSAYTYPE)
                .HasForeignKey(d => d.DIGESTDEGREE)
                .HasConstraintName("FK_ASSAYTYPE_DIGESTDEGREE");

            entity.HasOne(d => d.DIGESTTYPENavigation).WithMany(p => p.ASSAYTYPE)
                .HasForeignKey(d => d.DIGESTTYPE)
                .HasConstraintName("FK_ASSAYTYPE_DIGEST");

            entity.HasOne(d => d.ELEMENTNavigation).WithMany(p => p.ASSAYTYPE)
                .HasForeignKey(d => d.ELEMENT)
                .HasConstraintName("FK_ASSAYTYPE_ELEMENT");

            entity.HasOne(d => d.GENERICCODENavigation).WithMany(p => p.ASSAYTYPE)
                .HasForeignKey(d => d.GENERICCODE)
                .HasConstraintName("FK_ASSAYTYPE_GENERICCODE");

            entity.HasOne(d => d.UNITSNavigation).WithMany(p => p.ASSAYTYPE)
                .HasForeignKey(d => d.UNITS)
                .HasConstraintName("FK_ASSAYTYPE_UNITS");
        });

        modelBuilder.Entity<AUTO_CACHEGROUP>(entity =>
        {
            entity.HasKey(e => e.CACHEGROUPID);

            entity.ToTable("AUTO_CACHEGROUP", "dbo", tb => tb.HasComment("Aggregates a number of AcqPresentation.ViewCompounds into a group that will be cached at specified intervals."));

            entity.HasIndex(e => e.LABEL, "UQ_AUTO_CACHEGROUP_01").IsUnique();

            entity.Property(e => e.CACHEGROUPID).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(500)
                .HasComment("The description of the cache group. This may be null.");
            entity.Property(e => e.LABEL)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The label for the cache group.");
            entity.Property(e => e.SCHEDULEID).HasComment("The ID of a record in the table that determines when the linked ViewCompounds will be cached.");
            entity.Property(e => e.SENDMAIL).HasComment("Whether the email notifications need to be sent.");

            entity.HasOne(d => d.SCHEDULE).WithMany(p => p.AUTO_CACHEGROUP)
                .HasForeignKey(d => d.SCHEDULEID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTO_CACHEGROUP_01");

            entity.HasMany(d => d.LOG).WithMany(p => p.CACHEGROUP)
                .UsingEntity<Dictionary<string, object>>(
                    "AUTO_CACHEGROUPLOG",
                    r => r.HasOne<AUTO_LOG>().WithMany()
                        .HasForeignKey("LOGID")
                        .HasConstraintName("FK_AUTO_CACHEGROUPLOG_02"),
                    l => l.HasOne<AUTO_CACHEGROUP>().WithMany()
                        .HasForeignKey("CACHEGROUPID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AUTO_CACHEGROUPLOG_01"),
                    j =>
                    {
                        j.HasKey("CACHEGROUPID", "LOGID");
                        j.ToTable("AUTO_CACHEGROUPLOG", "dbo", tb => tb.HasComment("Joining table linking AUTO_CACHEGROUP and AUTO_LOG."));
                        j.IndexerProperty<int>("CACHEGROUPID").HasComment("The ID of the related Cache Group.");
                        j.IndexerProperty<long>("LOGID").HasComment("The ID of the related Log.");
                    });
        });

        modelBuilder.Entity<AUTO_CACHEGROUPFORM>(entity =>
        {
            entity.HasKey(e => new { e.CACHEGROUPID, e.NAME, e.CATEGORY });

            entity.ToTable("AUTO_CACHEGROUPFORM", "dbo", tb => tb.HasComment("Aggregates a number of AcqPresentation.ViewCompounds into a group that will be cached at specified intervals."));

            entity.Property(e => e.CACHEGROUPID).HasComment("The primary key.");
            entity.Property(e => e.NAME)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("The name of the form definition.");
            entity.Property(e => e.CATEGORY)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("The category of the form definition.");

            entity.HasOne(d => d.CACHEGROUP).WithMany(p => p.AUTO_CACHEGROUPFORM)
                .HasForeignKey(d => d.CACHEGROUPID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTO_CACHEGROUPFOPM_01");

            entity.HasOne(d => d.METAFORMDEFINITION).WithMany(p => p.AUTO_CACHEGROUPFORM)
                .HasForeignKey(d => new { d.NAME, d.CATEGORY })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTO_CACHEGROUPFOPM_02");
        });

        modelBuilder.Entity<AUTO_INTEGRATION>(entity =>
        {
            entity.HasKey(e => e.INTEGRATIONID);

            entity.ToTable("AUTO_INTEGRATION", "dbo", tb => tb.HasComment("An integration with an external data source."));

            entity.Property(e => e.INTEGRATIONID).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.DATERECEIVED)
                .HasComment("The date the data was received.")
                .HasColumnType("datetime");
            entity.Property(e => e.INTEGRATIONDATA)
                .IsRequired()
                .HasComment("The data associated with the integration.");
            entity.Property(e => e.INTEGRATIONTYPE)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The type of integration.");
        });

        modelBuilder.Entity<AUTO_INTEGRATIONSECTION>(entity =>
        {
            entity.HasKey(e => e.INTEGRATIONSECTIONID);

            entity.ToTable("AUTO_INTEGRATIONSECTION", "dbo", tb => tb.HasComment("An integration section contained in an integration."));

            entity.Property(e => e.INTEGRATIONSECTIONID).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.INTEGRATIONID).HasComment("The ID of the integration the section belongs to.");
            entity.Property(e => e.INTEGRATIONSECTIONTYPE)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The type of integration section.");
            entity.Property(e => e.ISPROCESSED).HasComment("A flag indicating whether the integration section has been processed.");

            entity.HasOne(d => d.INTEGRATION).WithMany(p => p.AUTO_INTEGRATIONSECTION)
                .HasForeignKey(d => d.INTEGRATIONID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTO_INTEGRATIONSECTION_01");
        });

        modelBuilder.Entity<AUTO_JOB>(entity =>
        {
            entity.HasKey(e => e.JOBID);

            entity.ToTable("AUTO_JOB", "dbo", tb => tb.HasComment("Aggregate of AdmJobTasks that will be run according to a schedule."));

            entity.HasIndex(e => e.LABEL, "UQ_AUTO_JOB_01").IsUnique();

            entity.Property(e => e.JOBID).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.DESCRIPTION).HasComment("A description of the Job.");
            entity.Property(e => e.JOBPROPERTIES)
                .HasComment("Job properties in an xml format.")
                .HasColumnType("xml");
            entity.Property(e => e.LABEL)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The name of the Job.");
            entity.Property(e => e.LASTSTARTTIME)
                .HasComment("The last date and time the Job was run.")
                .HasColumnType("datetime");
            entity.Property(e => e.LASTSUCCESSFULTIME)
                .HasComment("The last date and time the Job completed successfully.")
                .HasColumnType("datetime");
            entity.Property(e => e.SCHEDULEID).HasComment("The ID of a record in the AcqManagement.Schedule table determining when this Job will run.");
            entity.Property(e => e.SENDMAIL).HasComment("Whether an email should be sent as part of the job.");

            entity.HasOne(d => d.SCHEDULE).WithMany(p => p.AUTO_JOB)
                .HasForeignKey(d => d.SCHEDULEID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTO_JOB_01");

            entity.HasMany(d => d.LOG).WithMany(p => p.JOB)
                .UsingEntity<Dictionary<string, object>>(
                    "AUTO_JOBLOG",
                    r => r.HasOne<AUTO_LOG>().WithMany()
                        .HasForeignKey("LOGID")
                        .HasConstraintName("FK_AUTO_JOBLOG_02"),
                    l => l.HasOne<AUTO_JOB>().WithMany()
                        .HasForeignKey("JOBID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AUTO_JOBLOG_01"),
                    j =>
                    {
                        j.HasKey("JOBID", "LOGID");
                        j.ToTable("AUTO_JOBLOG", "dbo", tb => tb.HasComment("Joining table linking AcqManagement.AdmJob and AcqManagement.Log."));
                        j.IndexerProperty<int>("JOBID").HasComment("The ID of the related AdmJob.");
                        j.IndexerProperty<long>("LOGID").HasComment("The ID of the related Log.");
                    });
        });

        modelBuilder.Entity<AUTO_JOBRUN>(entity =>
        {
            entity.HasKey(e => e.JOBRUNID);

            entity.ToTable("AUTO_JOBRUN", "dbo", tb => tb.HasComment("Scheduled job runs are recorded here until processing is complete."));

            entity.HasIndex(e => e.JOBID, "UQ_AUTO_JOBRUN_01").IsUnique();

            entity.Property(e => e.JOBRUNID).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.JOBID).HasComment("The ID of the job being run.");
            entity.Property(e => e.JOBRUNDETAILS)
                .IsRequired()
                .HasComment("The run details in an xml format.")
                .HasColumnType("xml");
            entity.Property(e => e.STARTDATETIME)
                .HasComment("The Datetime the job run started.")
                .HasColumnType("datetime");

            entity.HasOne(d => d.JOB).WithOne(p => p.AUTO_JOBRUN)
                .HasForeignKey<AUTO_JOBRUN>(d => d.JOBID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTO_JOBRUN_01");
        });

        modelBuilder.Entity<AUTO_JOBTASK>(entity =>
        {
            entity.HasKey(e => e.JOBTASKID);

            entity.ToTable("AUTO_JOBTASK", "dbo", tb => tb.HasComment("Tasks that will be run in order by their parent Job."));

            entity.HasIndex(e => new { e.LABEL, e.JOBID }, "UQ_AUTO_JOBTASK_01").IsUnique();

            entity.Property(e => e.JOBTASKID).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.DESCRIPTION).HasComment("A description of the AdmJobTask.");
            entity.Property(e => e.ISENABLED).HasComment("Flag indicating whether this task should be run.");
            entity.Property(e => e.JOBID).HasComment("The ID of a record in the AcqManagement.AdmJob table determining which AdmJob owns this task.");
            entity.Property(e => e.LABEL)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The name of the AdmJobTask.");
            entity.Property(e => e.ORDERNUMBER).HasComment("A number determining the order the parent AdmJob should run its associated tasks.");
            entity.Property(e => e.PACKAGEBINARYTYPE)
                .HasMaxLength(50)
                .HasComment("The field storing the acQuire4 task package MIME type.");
            entity.Property(e => e.PACKAGEBINARYVALUE).HasComment("The field storing the acQuire4 task package MIME value.");
            entity.Property(e => e.SENDMAIL).HasComment("Whether an email should be sent as part of the job task.");
            entity.Property(e => e.STOPONERROR).HasComment("Flag indicating if the parent Job should stop if this AdmJobTasks fails.");

            entity.HasOne(d => d.JOB).WithMany(p => p.AUTO_JOBTASK)
                .HasForeignKey(d => d.JOBID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTO_JOBTASK_01");
        });

        modelBuilder.Entity<AUTO_LOG>(entity =>
        {
            entity.HasKey(e => e.LOGID);

            entity.ToTable("AUTO_LOG", "dbo", tb => tb.HasComment("Details the events that have been logged by the system."));

            entity.Property(e => e.LOGID).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.CONTEXT)
                .HasMaxLength(100)
                .HasComment("The context of the message recorded.");
            entity.Property(e => e.DESCRIPTION).HasComment("The Description of the log.");
            entity.Property(e => e.LOGDATETIME)
                .HasDefaultValueSql("(getdate())")
                .HasComment("The Datetime the event was logged.")
                .HasColumnType("datetime");
            entity.Property(e => e.LOGDETAILS)
                .HasComment("The Log Details in an xml format.")
                .HasColumnType("xml");
            entity.Property(e => e.LOGTYPEID).HasComment("The Type of Event Logged.");
            entity.Property(e => e.MESSAGE)
                .IsRequired()
                .HasMaxLength(4000)
                .HasComment("The Message recorded.");
        });

        modelBuilder.Entity<AUTO_MAILATTACHMENT>(entity =>
        {
            entity.HasKey(e => e.MAILATTACHMENTID);

            entity.ToTable("AUTO_MAILATTACHMENT", "dbo");

            entity.Property(e => e.MAILATTACHMENTBINARYDATA).IsRequired();
            entity.Property(e => e.MAILATTACHMENTBINARYTYPE)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MAILATTACHMENTDATA).IsRequired();

            entity.HasOne(d => d.MAILQUEUE).WithMany(p => p.AUTO_MAILATTACHMENT)
                .HasForeignKey(d => d.MAILQUEUEID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTO_MAILATTACHMENT_01");
        });

        modelBuilder.Entity<AUTO_MAILQUEUE>(entity =>
        {
            entity.HasKey(e => e.MAILQUEUEID);

            entity.ToTable("AUTO_MAILQUEUE", "dbo", tb => tb.HasComment("Details a queue of mail items that need to be sent."));

            entity.Property(e => e.MAILQUEUEID).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.MAILDATA)
                .IsRequired()
                .HasComment("The serialized information about the mail.");
        });

        modelBuilder.Entity<AUTO_MAILTEMPLATE>(entity =>
        {
            entity.HasKey(e => e.MAILTEMPLATEID);

            entity.ToTable("AUTO_MAILTEMPLATE", "dbo", tb => tb.HasComment("Details a mail template to be used when constructing an email."));

            entity.HasIndex(e => e.NAME, "UQ_AUTO_MAILTEMPLATE_01").IsUnique();

            entity.Property(e => e.MAILTEMPLATEID).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.MAILDATA)
                .IsRequired()
                .HasComment("The serialized information about the mail.");
            entity.Property(e => e.MAILTRIGGEREVENTTYPE)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("The event type that will trigger the mail to be sent.");
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The unique name of the mail template.");

            entity.HasMany(d => d.CACHEGROUP).WithMany(p => p.MAILTEMPLATE)
                .UsingEntity<Dictionary<string, object>>(
                    "AUTO_MAILTEMPLATECACHEGROUP",
                    r => r.HasOne<AUTO_CACHEGROUP>().WithMany()
                        .HasForeignKey("CACHEGROUPID")
                        .HasConstraintName("FK_AUTO_MAILTEMPLATECACHEGROUP_02"),
                    l => l.HasOne<AUTO_MAILTEMPLATE>().WithMany()
                        .HasForeignKey("MAILTEMPLATEID")
                        .HasConstraintName("FK_AUTO_MAILTEMPLATECACHEGROUP_01"),
                    j =>
                    {
                        j.HasKey("MAILTEMPLATEID", "CACHEGROUPID").HasName("PK_AUTO_AUTO_MAILTEMPLATECACHEGROUP");
                        j.ToTable("AUTO_MAILTEMPLATECACHEGROUP", "dbo", tb => tb.HasComment("Details the jobs a mail template is associated with."));
                        j.IndexerProperty<int>("MAILTEMPLATEID").HasComment("The primary key of the mail template.");
                        j.IndexerProperty<int>("CACHEGROUPID").HasComment("The primary key of the caching group.");
                    });

            entity.HasMany(d => d.JOB).WithMany(p => p.MAILTEMPLATE)
                .UsingEntity<Dictionary<string, object>>(
                    "AUTO_MAILTEMPLATEJOB",
                    r => r.HasOne<AUTO_JOB>().WithMany()
                        .HasForeignKey("JOBID")
                        .HasConstraintName("FK_AUTO_MAILTEMPLATEJOB_02"),
                    l => l.HasOne<AUTO_MAILTEMPLATE>().WithMany()
                        .HasForeignKey("MAILTEMPLATEID")
                        .HasConstraintName("FK_AUTO_MAILTEMPLATEJOB_01"),
                    j =>
                    {
                        j.HasKey("MAILTEMPLATEID", "JOBID");
                        j.ToTable("AUTO_MAILTEMPLATEJOB", "dbo", tb => tb.HasComment("Details the jobs a mail template is associated with."));
                        j.IndexerProperty<int>("MAILTEMPLATEID").HasComment("The primary key of the mail template.");
                        j.IndexerProperty<int>("JOBID").HasComment("The primary key of the job.");
                    });

            entity.HasMany(d => d.JOBTASK).WithMany(p => p.MAILTEMPLATE)
                .UsingEntity<Dictionary<string, object>>(
                    "AUTO_MAILTEMPLATEJOBTASK",
                    r => r.HasOne<AUTO_JOBTASK>().WithMany()
                        .HasForeignKey("JOBTASKID")
                        .HasConstraintName("FK_AUTO_MAILTEMPLATEJOBTASK_02"),
                    l => l.HasOne<AUTO_MAILTEMPLATE>().WithMany()
                        .HasForeignKey("MAILTEMPLATEID")
                        .HasConstraintName("FK_AUTO_MAILTEMPLATEJOBTASK_01"),
                    j =>
                    {
                        j.HasKey("MAILTEMPLATEID", "JOBTASKID");
                        j.ToTable("AUTO_MAILTEMPLATEJOBTASK", "dbo", tb => tb.HasComment("Details the job tasks a mail template is associated with."));
                        j.IndexerProperty<int>("MAILTEMPLATEID").HasComment("The primary key of the mail template.");
                        j.IndexerProperty<int>("JOBTASKID").HasComment("The primary key of the job task.");
                    });
        });

        modelBuilder.Entity<AUTO_SCHEDULE>(entity =>
        {
            entity.HasKey(e => e.SCHEDULEID);

            entity.ToTable("AUTO_SCHEDULE", "dbo", tb => tb.HasComment("Defines a schedule that can be used to define when external tasks should be run."));

            entity.Property(e => e.SCHEDULEID).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.ACTIVEENDDATE).HasComment("The last date that a task or event can occur.");
            entity.Property(e => e.ACTIVEENDTIME).HasComment("The time of day that a task using this schedule should be terminated, if it is still running.\r\n					Time is formatted HHMMSS, using a 24-hour clock.\r\n				");
            entity.Property(e => e.ACTIVESTARTDATE).HasComment("The first date that a task or event occurs.");
            entity.Property(e => e.ACTIVESTARTTIME).HasComment("The time of day that a task using this schedule should be run.\r\n					Time is formatted HHMMSS, using a 24-hour clock.\r\n				");
            entity.Property(e => e.FREQUENCYINTERVAL).HasComment("Further defines when a task should be run for this schedule. See the relevant\r\n					freq_interval documentation at https:\r\n				");
            entity.Property(e => e.FREQUENCYRELATIVEINTERVAL).HasComment("Further defines when a task should be run for this schedule. This is only used when\r\n					FrequencyType is 32 (monthly relative). It's been modified slightly from SQL's implementation to\r\n					cater for the 5th day of the month. This field is a bit flag.\r\n					0  = Unused\r\n					1  = First (e.g. First Wednesday every month)\r\n					2  = Second\r\n					4  = Third\r\n					8  = Fourth\r\n					16 = Fifth\r\n					32 = Last\r\n				");
            entity.Property(e => e.FREQUENCYTYPE).HasComment("How frequently a task should be run for this schedule. This field is a bit flag.\r\n					1  = Once only\r\n					4  = Every day\r\n					8  = Weekly (days of week can be specified by FrequencyInterval)\r\n					16 = Monthly (the numbered day of the month will be specified by FrequencyInterval)\r\n					32 = Monthly relative (FrequencyInterval and FrequencyRelativeInterval determine the days in the month)\r\n				");
            entity.Property(e => e.ISENABLED).HasComment("Whether the schedule is enabled (1) or disabled (0).");
            entity.Property(e => e.NAME)
                .HasMaxLength(250)
                .HasComment("The name of the schedule. This is not required.");
        });

        modelBuilder.Entity<AV_BESTCOORDS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_BESTCOORDS", "dbo");

            entity.Property(e => e.COORDINATESET)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SURVEYMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SURVEYRANK).HasColumnType("numeric(10, 0)");
        });

        modelBuilder.Entity<AV_BESTCOORDSNOTCALCULATED>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_BESTCOORDSNOTCALCULATED", "dbo");

            entity.Property(e => e.COORDINATESET)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SURVEYMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SURVEYRANK).HasColumnType("numeric(10, 0)");
        });

        modelBuilder.Entity<AV_GIS_ApprovedHole_NotDrilledYet>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_GIS_ApprovedHole_NotDrilledYet", "dbo");

            entity.Property(e => e.Contracted_Year)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GDA94Z50_Grid_ID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Type)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Leadtime)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Lease_ID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Peg_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_Date)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Planned_Depth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_MineDate)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Planned_WaterDepth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Program_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_GIS_Holes_Completed_DateFormatted>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_GIS_Holes_Completed_DateFormatted", "dbo");

            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EndDate)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.GDA94Z50_Grid_ID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GDP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_ID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Type)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Lease_ID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Peg_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_Phase)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Program_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Proposed_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StartDate)
                .HasMaxLength(11)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_GIS_Holes_Rehabbed>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_GIS_Holes_Rehabbed", "dbo");

            entity.Property(e => e.Collar_Cut)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Date_Bag_Slashed)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date_Completed)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date_Scarified)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_ID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Oil_Spills)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pad_Rehab)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Peg_Marked)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Rubbish)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_GIS_MaxAssays>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_GIS_MaxAssays", "dbo");

            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GDA94Z50_Grid_ID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Hole_ID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Type)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_GIS_Water_Conductivity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_GIS_Water_Conductivity", "dbo");

            entity.Property(e => e.Conductivity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Date_Measured)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GDA94Z50_Grid_ID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Hole_ID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Temperature)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_GIS_Water_Dipping>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_GIS_Water_Dipping", "dbo");

            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Date_water_meas)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GDA94Z50_Grid_ID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Hole_ID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_GIS_Water_Monitoring>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_GIS_Water_Monitoring", "dbo");

            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Field_Testing_Required)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Landfill_Analysis_Required)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Metals_Analysis_Required)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Water_Levels)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_MOD_Assay>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_MOD_Assay", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PRODUC)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLE)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STRAND)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UID)
                .HasMaxLength(82)
                .IsUnicode(false);
            entity.Property(e => e.VOID)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_MOD_Assay_Valid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_MOD_Assay_Valid", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PRODUC)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLE)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STRAND)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UID)
                .HasMaxLength(82)
                .IsUnicode(false);
            entity.Property(e => e.VOID)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_MOD_Collar>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_MOD_Collar", "dbo");

            entity.Property(e => e.CYEAR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LEASE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STATUS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.WETDRL)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_MOD_Collar_Status>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_MOD_Collar_Status", "dbo");

            entity.Property(e => e.CYEAR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESTROY)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.GEOLOGGED)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.GEOPHYSURVEY)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LEASE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MINESURVEY)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STATUS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.XRFASSAY)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_MOD_Collar_Valid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_MOD_Collar_Valid", "dbo");

            entity.Property(e => e.CYEAR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LEASE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STATUS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.WETDRL)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_MOD_Data>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_MOD_Data", "dbo");

            entity.Property(e => e.Converted_Strand)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.Converted_Strat)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Met_FRIABLE_pct)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Met_HARD_pct)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Met_MEDIUM_pct)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.P_PRIORITY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.P_Strand)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.P_Strat)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Strand)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Strat)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Validated_Strand)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validated_Strat)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_MOD_Geology>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_MOD_Geology", "dbo");

            entity.Property(e => e.ASB)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BSH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CAR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CLA)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.C_STRD)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.C_STRT)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DOL)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GH1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GH2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GH3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GO1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GO2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GS2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GS3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HG1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HG2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HG3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HO1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HO2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HO3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HS2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HS3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HY1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MAG)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.M_STRD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.M_STRT)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.NSR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OG3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PYR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.P_STRD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.P_STRT)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SH2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SH3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SIL)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UID)
                .HasMaxLength(82)
                .IsUnicode(false);
            entity.Property(e => e.VG2)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_MOD_Geology_Valid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_MOD_Geology_Valid", "dbo");

            entity.Property(e => e.ASB)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BSH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CAR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CLA)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.C_STRD)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.C_STRT)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DOL)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GH1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GH2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GH3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GO1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GO2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GS2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GS3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HG1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HG2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HG3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HO1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HO2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HO3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HS2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HS3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HY1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MAG)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.M_STRD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.M_STRT)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.NSR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OG3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PYR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.P_STRD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.P_STRT)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SH2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SH3)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SIL)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UID)
                .HasMaxLength(82)
                .IsUnicode(false);
            entity.Property(e => e.VG2)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_MOD_Geophys>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_MOD_Geophys", "dbo");

            entity.Property(e => e.DEPTH).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.FROM)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UID)
                .HasMaxLength(82)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_MOD_Geophys_Valid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_MOD_Geophys_Valid", "dbo");

            entity.Property(e => e.DEPTH).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.FROM)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UID)
                .HasMaxLength(82)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_MOD_Planned>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_MOD_Planned", "dbo");

            entity.Property(e => e.ACTUAL_DRILL_DATE)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.AREA)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYED_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ASSAYED?");
            entity.Property(e => e.COLLAR_COMMENT)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DEPTH_COMMENT)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHED_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DESPATCHED?");
            entity.Property(e => e.DESTROY_)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DESTROY?");
            entity.Property(e => e.DIPPED_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DIPPED?");
            entity.Property(e => e.DRILLEQUIP_COMMENT)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATE_COMMENT)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.GDP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GEOLOGIST)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GPHSURVEY_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("GPHSURVEY?");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEPLUG_COMMENT)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.HOLE_STATUS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOGGED_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("LOGGED?");
            entity.Property(e => e.MWD_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MWD?");
            entity.Property(e => e.MWD_COMMENT)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.PEG_COMMENT)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.PLANNED_CONTRACT_YEAR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PLANNED_DRILL_BY_DATE)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.PLANNED_DUPLICATE_DEPTH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PLANNED_HOLE_DEPTH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PLANNED_MINE_DATE)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.PLANNED_PIT_DEPTH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PLANNED_STANDARD_DEPTH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POW)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.REHABBED_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("REHABBED?");
            entity.Property(e => e.RIG_ID)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RTKSURVEY_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("RTKSURVEY?");
            entity.Property(e => e.SAMPLECAM_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SAMPLECAM?");
            entity.Property(e => e.SAMPLE_COMMENT)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.SHORTID)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.STANDARD_COMMENT)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.VALIDATED_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VALIDATED?");
        });

        modelBuilder.Entity<AV_MOD_Survey>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_MOD_Survey", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_MOD_Survey_Valid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_MOD_Survey_Valid", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_MS_Collar>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_MS_Collar", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LEASE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STATUS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_QAQC_Field_Duplicate_Stats>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_QAQC_Field_Duplicate_Stats", "dbo");

            entity.Property(e => e.ANALYTE)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AV_QAQC_Lab_Standard_Stats>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AV_QAQC_Lab_Standard_Stats", "dbo");

            entity.Property(e => e.ANALYTE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MEAN_ASSAYVALUE).HasColumnType("decimal(12, 3)");
            entity.Property(e => e.MEAN_CERTVALUE).HasColumnType("decimal(12, 3)");
            entity.Property(e => e._2SD_ASSAY)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("-2SD_ASSAY");
            entity.Property(e => e._2SD_ASSAY1)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("+2SD_ASSAY");
            entity.Property(e => e._3SD_ASSAY)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("-3SD_ASSAY");
            entity.Property(e => e._3SD_ASSAY1)
                .HasColumnType("decimal(12, 3)")
                .HasColumnName("+3SD_ASSAY");
        });

        modelBuilder.Entity<AZIMUTHTYPE>(entity =>
        {
            entity.HasKey(e => e.AZIMUTHTYPE1)
                .HasName("PRIMARYKEYAZIMUTHTYPE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AZIMUTHTYPE", "dbo", tb => tb.HasComment("AzimuthType stores particulars about the azimuth - if magnetic or local grid, the format of the information (in decimal degrees or degrees minutes and seconds) and so on. It could be the adjustment or value that must be added to the azimuth because of magnetic influence from surrounding rocks. "));

            entity.Property(e => e.AZIMUTHTYPE1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("AZIMUTHTYPE");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AccessRights>(entity =>
        {
            entity.HasKey(e => e.AccessRightsId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AccessRights", "AcqPresentation", tb => tb.HasComment("Details the access rights to a secure entity."));

            entity.HasIndex(e => e.SecureEntityId, "IDX_AccessRights_02").HasFillFactor(80);

            entity.HasIndex(e => e.RoleId, "IDX_AccessRights_RoleId").HasFillFactor(80);

            entity.HasIndex(e => new { e.RoleId, e.SecureEntityId }, "UQ_AccessRights_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.AccessRightsId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Create).HasComment("The Create Permission.");
            entity.Property(e => e.Delete).HasComment("The Delete Permission.");
            entity.Property(e => e.Read).HasComment("The Read Permission.");
            entity.Property(e => e.RoleId).HasComment("The Role this access rights is linked to.");
            entity.Property(e => e.SecureEntityId).HasComment("The Secure Entity this grants access to.");
            entity.Property(e => e.Write).HasComment("The Write Permission.");

            entity.HasOne(d => d.Role).WithMany(p => p.AccessRights)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_AccessRights_01");

            entity.HasOne(d => d.SecureEntity).WithMany(p => p.AccessRights)
                .HasForeignKey(d => d.SecureEntityId)
                .HasConstraintName("FK_AccessRights_02");
        });

        modelBuilder.Entity<AdmAssayType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmAssayType", "AcqMetaSystem");

            entity.Property(e => e.Element)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmCategoryObjectCategory>(entity =>
        {
            entity.HasKey(e => e.ObjectCategoryGlobalId);

            entity.ToTable("AdmCategoryObjectCategory", "AcqMetaSystem", tb => tb.HasComment("Maintains the association between the comma separated category paths in the ADM tables and the Object Categories in the Meta System."));

            entity.HasIndex(e => new { e.CategorySource, e.CategoryPath }, "UQ_AdmCategoryObjectCategory_01").IsUnique();

            entity.Property(e => e.ObjectCategoryGlobalId)
                .ValueGeneratedNever()
                .HasComment("The Meta System Object Category against which to associate.");
            entity.Property(e => e.CategoryPath)
                .IsRequired()
                .HasMaxLength(255)
                .HasComment("The string value stored in the ADM against which to associate.");
            entity.Property(e => e.CategorySource)
                .IsRequired()
                .HasMaxLength(10)
                .HasComment("This aides in identifying the specific source in the ADM for the category.");

            entity.HasOne(d => d.ObjectCategoryGlobal).WithOne(p => p.AdmCategoryObjectCategory)
                .HasForeignKey<AdmCategoryObjectCategory>(d => d.ObjectCategoryGlobalId)
                .HasConstraintName("FK_AdmCategoryObjectCategory_01");
        });

        modelBuilder.Entity<AdmChangeLevel>(entity =>
        {
            entity.HasKey(e => e.AdmChangeLevel1).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmChangeLevel", "AcqManagement");

            entity.Property(e => e.AdmChangeLevel1)
                .ValueGeneratedNever()
                .HasColumnName("AdmChangeLevel");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<AdmCompoundBehaviour>(entity =>
        {
            entity.HasKey(e => e.CompoundName).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmCompoundBehaviour", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the type of behaviour to be associated with a compound.");
                    tb.HasTrigger("T_AdmCompoundBehaviour_IUD");
                });

            entity.Property(e => e.CompoundName)
                .HasMaxLength(200)
                .HasComment("The name of the compound whose behaviour type is listed.");
            entity.Property(e => e.CompoundBehaviourTypeId).HasComment("The behaviour type associated with this compound.");

            entity.HasOne(d => d.CompoundBehaviourType).WithMany(p => p.AdmCompoundBehaviour)
                .HasForeignKey(d => d.CompoundBehaviourTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmCompoundBehaviour_01");
        });

        modelBuilder.Entity<AdmCompoundVirtualTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmCompoundVirtualTable", "AcqMetaSystem");

            entity.Property(e => e.CompoundName)
                .HasMaxLength(263)
                .IsUnicode(false);
            entity.Property(e => e.VirtualTableName)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmCoordinateData>(entity =>
        {
            entity.HasKey(e => e.CompoundAttributeId);

            entity.ToTable("AdmCoordinateData", "AcqMetaSystem", tb => tb.HasComment("Maintains an intermediary cache between the xml data in the MetaSystem and the ADM source information."));

            entity.Property(e => e.CompoundAttributeId)
                .ValueGeneratedNever()
                .HasComment("The identity of the attribute in the MetaSystem.");
            entity.Property(e => e.CompoundId).HasComment("The compound associated with this coordinate data.");
            entity.Property(e => e.GridText)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The value identifying grid of the data.");
            entity.Property(e => e.MethodText)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The value identifying method by which the data was obtained.");
            entity.Property(e => e.XPath)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("The path to locate the X coordinate from the associated compound.");
            entity.Property(e => e.YPath)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("The path to locate the Y coordinate from the associated compound.");
            entity.Property(e => e.ZPath)
                .HasMaxLength(500)
                .HasComment("The path to locate the Z coordinate from the associated compound.");

            entity.HasOne(d => d.CompoundAttribute).WithOne(p => p.AdmCoordinateData)
                .HasForeignKey<AdmCoordinateData>(d => d.CompoundAttributeId)
                .HasConstraintName("FK_AdmCoordinateData_01");

            entity.HasOne(d => d.Compound).WithMany(p => p.AdmCoordinateData)
                .HasForeignKey(d => d.CompoundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmCoordinateData_02");
        });

        modelBuilder.Entity<AdmDateRange>(entity =>
        {
            entity.HasKey(e => e.FieldAttributeId);

            entity.ToTable("AdmDateRange", "AcqMetaSystem", tb => tb.HasComment("Table to assist in the normalization of ADM value range conditions."));

            entity.Property(e => e.FieldAttributeId)
                .ValueGeneratedNever()
                .HasComment("The field attribute identifier.");
            entity.Property(e => e.Condition)
                .IsRequired()
                .HasComment("A Cache of the condition of a between minimum and maximum comparison.")
                .HasColumnType("xml");
            entity.Property(e => e.Maximum)
                .HasComment("The maximum acceptable value.")
                .HasColumnType("datetime");
            entity.Property(e => e.Minimum)
                .HasComment("The minimum acceptable value.")
                .HasColumnType("datetime");

            entity.HasOne(d => d.FieldAttribute).WithOne(p => p.AdmDateRange)
                .HasForeignKey<AdmDateRange>(d => d.FieldAttributeId)
                .HasConstraintName("FK_AdmDateRange");
        });

        modelBuilder.Entity<AdmDateRangeFieldType>(entity =>
        {
            entity.HasKey(e => e.FieldTypeId);

            entity.ToTable("AdmDateRangeFieldType", "AcqMetaSystem", tb => tb.HasComment("Table to assist in the reversion of field types."));

            entity.Property(e => e.FieldTypeId)
                .ValueGeneratedNever()
                .HasComment("The range constricted field type identifier.");
            entity.Property(e => e.BaseFieldTypeId).HasComment("The identity of the field type upon which the condition was added.");
            entity.Property(e => e.FieldAttributeId).HasComment("The identity of the field attribute containing the condition.");

            entity.HasOne(d => d.BaseFieldType).WithMany(p => p.AdmDateRangeFieldTypeBaseFieldType)
                .HasForeignKey(d => d.BaseFieldTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmDateRangeFieldType_02");

            entity.HasOne(d => d.FieldAttribute).WithMany(p => p.AdmDateRangeFieldType)
                .HasForeignKey(d => d.FieldAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmDateRangeFieldType_03");

            entity.HasOne(d => d.FieldType).WithOne(p => p.AdmDateRangeFieldTypeFieldType)
                .HasForeignKey<AdmDateRangeFieldType>(d => d.FieldTypeId)
                .HasConstraintName("FK_AdmDateRangeFieldType_01");
        });

        modelBuilder.Entity<AdmDerivedField>(entity =>
        {
            entity.HasKey(e => e.AdmDerivedFieldId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmDerivedField", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the derived fields in the system.");
                    tb.HasTrigger("T_AdmDerivedField_OD");
                });

            entity.HasIndex(e => e.Name, "UQ_AdmDerivedField_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.AdmDerivedFieldId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Datatype)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The Datatype of the derived field.");
            entity.Property(e => e.DerivedFieldCode)
                .IsRequired()
                .HasComment("The Derived Field Algorithm / Code.");
            entity.Property(e => e.Description)
                .HasMaxLength(254)
                .HasComment("The optional description of the derived field.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The Name of the Derived Field.");
            entity.Property(e => e.ProcessPerCompound).HasComment("Whether or not the derived field needs to be tested individually against every potential compound. This is for internal processing use only.");
        });

        modelBuilder.Entity<AdmDerivedFieldParameter>(entity =>
        {
            entity.HasKey(e => e.AdmDerivedFieldParameterId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmDerivedFieldParameter", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the Parameters for a Derived Field.");
                    tb.HasTrigger("T_AdmDerivedFieldParameter_OD");
                });

            entity.Property(e => e.AdmDerivedFieldParameterId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.AdmDerivedFieldId).HasComment("The Derived Field this parameter relates to.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("The component of the derived field this parameter provides.");

            entity.HasOne(d => d.AdmDerivedField).WithMany(p => p.AdmDerivedFieldParameter)
                .HasForeignKey(d => d.AdmDerivedFieldId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmDerivedFieldParameter_01");
        });

        modelBuilder.Entity<AdmElement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmElement", "AcqMetaSystem");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmElementRankingWarning>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmElementRankingWarning", "AcqMetaSystem");

            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UNITSFROM)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UNITSTO)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmErrorMessage>(entity =>
        {
            entity.HasKey(e => e.ErrorMessageId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmErrorMessage", "AcqManagement", tb => tb.HasComment("Defines the ADM processing change level at which the given error message is processed."));

            entity.Property(e => e.ErrorMessageId)
                .ValueGeneratedNever()
                .HasComment("The error message type for this warning.");
            entity.Property(e => e.AdmChangeLevel).HasComment("The ADM change level at which this error message is processed.");
            entity.Property(e => e.BaseOnOriginalChangeLevel).HasComment("Whether or not to base the change level cut off logic on the original processing change level, or the final resolved one.");
            entity.Property(e => e.ProcessingTypeId).HasComment("The processing type to which this warning type relates.");

            entity.HasOne(d => d.AdmChangeLevelNavigation).WithMany(p => p.AdmErrorMessage)
                .HasForeignKey(d => d.AdmChangeLevel)
                .HasConstraintName("FK_AdmErrorMessage_03");

            entity.HasOne(d => d.ErrorMessage).WithOne(p => p.AdmErrorMessage)
                .HasForeignKey<AdmErrorMessage>(d => d.ErrorMessageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmErrorMessage_01");

            entity.HasOne(d => d.ProcessingType).WithMany(p => p.AdmErrorMessage)
                .HasForeignKey(d => d.ProcessingTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmErrorMessage_02");
        });

        modelBuilder.Entity<AdmErrorMessageProcedure>(entity =>
        {
            entity.HasKey(e => new { e.ErrorMessageId, e.ProcedureName });

            entity.ToTable("AdmErrorMessageProcedure", "AcqManagement", tb => tb.HasComment("Defines the ADM procedures which can raise a given error message."));

            entity.Property(e => e.ErrorMessageId).HasComment("The reference to the error message.");
            entity.Property(e => e.ProcedureName)
                .HasMaxLength(200)
                .HasComment("The name of the procedure from which this error is raised.");

            entity.HasOne(d => d.ErrorMessage).WithMany(p => p.AdmErrorMessageProcedure)
                .HasForeignKey(d => d.ErrorMessageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmErrorMessageProcedure_01");
        });

        modelBuilder.Entity<AdmFailedDerivedField>(entity =>
        {
            entity.HasKey(e => e.Name);

            entity.ToTable("AdmFailedDerivedField", "AcqMetaSystem", tb => tb.HasComment("Maintains an cache of excluded derived fields, in order to speed up MetaSystem processing."));

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasComment("The derived field name.");
            entity.Property(e => e.Arguments)
                .IsRequired()
                .HasComment("The arguments to be passed to the error message format.")
                .HasColumnType("xml");
            entity.Property(e => e.DerivedFieldCode)
                .IsRequired()
                .HasComment("The SQL code for the derived field.");
            entity.Property(e => e.ErrorMessageId).HasComment("The most significant error which caused the exclusion of the derived field.");
            entity.Property(e => e.FieldList).HasComment("An encoded list of fields used for comparison to the ADM source information.");
            entity.Property(e => e.TableList).HasComment("An encoded list of tables used for comparison to the ADM source information.");
        });

        modelBuilder.Entity<AdmFailedVirtualField>(entity =>
        {
            entity.HasKey(e => new { e.VirtualFieldName, e.SourceName }).HasName("PK_AmdFailedVirtualField");

            entity.ToTable("AdmFailedVirtualField", "AcqMetaSystem", tb => tb.HasComment("Maintains an cache of excluded virtual fields, in order to speed up MetaSystem processing."));

            entity.Property(e => e.VirtualFieldName)
                .HasMaxLength(200)
                .HasComment("The name of virtual field.");
            entity.Property(e => e.SourceName)
                .HasMaxLength(200)
                .HasComment("The name of code table for the virtual field.");
            entity.Property(e => e.Arguments)
                .IsRequired()
                .HasComment("The arguments to pass to the error message format.")
                .HasColumnType("xml");
            entity.Property(e => e.ErrorMessageId).HasComment("The most significant error which caused the exclusion of the derived field.");
        });

        modelBuilder.Entity<AdmHoleGridLocalRankedCoordinate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmHoleGridLocalRankedCoordinate", "dbo");

            entity.Property(e => e.COORDINATESET)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmHoleGridProjectedRankedCoordinate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmHoleGridProjectedRankedCoordinate", "dbo");

            entity.Property(e => e.COORDINATESET)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDTYPE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmHoleProjectedRankedCoordinate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmHoleProjectedRankedCoordinate", "dbo");

            entity.Property(e => e.COORDINATESET)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDTYPE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmHoleRankedLocalCoordinate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmHoleRankedLocalCoordinate", "dbo");

            entity.Property(e => e.COORDINATESET)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SURVEYMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmHoleRankedProjectedCoordinate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmHoleRankedProjectedCoordinate", "dbo");

            entity.Property(e => e.COORDINATESET)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SURVEYMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmIntegration>(entity =>
        {
            entity.HasKey(e => e.AdmIntegrationId).HasName("PK_AcqManagement_AdmIntegration");

            entity.ToTable("AdmIntegration", "AcqManagement", tb => tb.HasComment("An integration with an external data source."));

            entity.Property(e => e.AdmIntegrationId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.DateReceived)
                .HasComment("The date the data was received.")
                .HasColumnType("datetime");
            entity.Property(e => e.IntegrationData)
                .IsRequired()
                .HasComment("The data associated with the integration.");
            entity.Property(e => e.IntegrationType)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The type of integration.");
        });

        modelBuilder.Entity<AdmIntegrationSection>(entity =>
        {
            entity.HasKey(e => e.AdmIntegrationSectionId).HasName("PK_AcqManagement_AdmIntegrationSection");

            entity.ToTable("AdmIntegrationSection", "AcqManagement", tb => tb.HasComment("An integration section contained in an integration."));

            entity.Property(e => e.AdmIntegrationSectionId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.AdmIntegrationId).HasComment("The ID of the integration the section belongs to.");
            entity.Property(e => e.IntegrationSectionType)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The type of integration section.");
            entity.Property(e => e.IsProcessed).HasComment("A flag indicating whether the integration section has been processed.");

            entity.HasOne(d => d.AdmIntegration).WithMany(p => p.AdmIntegrationSection)
                .HasForeignKey(d => d.AdmIntegrationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AcqManagement_AdmIntegrationSection_01");
        });

        modelBuilder.Entity<AdmJob>(entity =>
        {
            entity.ToTable("AdmJob", "AcqManagement", tb => tb.HasComment("Aggregate of AdmJobTasks that will be run according to a schedule."));

            entity.HasIndex(e => e.Label, "UQ_AdmJob_01").IsUnique();

            entity.Property(e => e.AdmJobId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Description).HasComment("A description of the Job.");
            entity.Property(e => e.JobProperties)
                .HasComment("Job properties in an xml format.")
                .HasColumnType("xml");
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The name of the Job.");
            entity.Property(e => e.LastStartTime)
                .HasComment("The last date and time the Job was run.")
                .HasColumnType("datetime");
            entity.Property(e => e.LastSuccessfulTime)
                .HasComment("The last date and time the Job completed successfully.")
                .HasColumnType("datetime");
            entity.Property(e => e.ScheduleId).HasComment("The ID of a record in the AcqManagement.Schedule table determining when this Job will run.");
            entity.Property(e => e.SendMail).HasComment("Whether an email should be sent as part of the job.");

            entity.HasOne(d => d.Schedule).WithMany(p => p.AdmJob)
                .HasForeignKey(d => d.ScheduleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmJob_01");

            entity.HasMany(d => d.Log).WithMany(p => p.AdmJob)
                .UsingEntity<Dictionary<string, object>>(
                    "AdmJobLog",
                    r => r.HasOne<Log>().WithMany()
                        .HasForeignKey("LogId")
                        .HasConstraintName("FK_AdmJobLog_02"),
                    l => l.HasOne<AdmJob>().WithMany()
                        .HasForeignKey("AdmJobId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AdmJobLog_01"),
                    j =>
                    {
                        j.HasKey("AdmJobId", "LogId");
                        j.ToTable("AdmJobLog", "AcqManagement", tb => tb.HasComment("Joining table linking AcqManagement.AdmJob and AcqManagement.Log."));
                        j.IndexerProperty<int>("AdmJobId").HasComment("The ID of the related AdmJob.");
                        j.IndexerProperty<long>("LogId").HasComment("The ID of the related Log.");
                    });
        });

        modelBuilder.Entity<AdmJobRun>(entity =>
        {
            entity.HasKey(e => e.AdmJobRunId).HasName("PK_AcqManagement_AdmJobRun");

            entity.ToTable("AdmJobRun", "AcqManagement", tb => tb.HasComment("Scheduled job runs are recorded here until processing is complete."));

            entity.HasIndex(e => e.AdmJobId, "UQ_AcqManagement_AdmJobRun_01").IsUnique();

            entity.Property(e => e.AdmJobRunId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.AdmJobId).HasComment("The ID of the job being run.");
            entity.Property(e => e.JobRunDetails)
                .IsRequired()
                .HasComment("The run details in an xml format.")
                .HasColumnType("xml");
            entity.Property(e => e.StartedDatetime)
                .HasComment("The Datetime the job run started.")
                .HasColumnType("datetime");

            entity.HasOne(d => d.AdmJob).WithOne(p => p.AdmJobRun)
                .HasForeignKey<AdmJobRun>(d => d.AdmJobId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AcqManagement_AdmJobRun_01");
        });

        modelBuilder.Entity<AdmJobTask>(entity =>
        {
            entity.ToTable("AdmJobTask", "AcqManagement", tb => tb.HasComment("Tasks that will be run in order by their parent Job."));

            entity.HasIndex(e => new { e.Label, e.AdmJobId }, "UQ_AdmJobTask_01").IsUnique();

            entity.Property(e => e.AdmJobTaskId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.AdmJobId).HasComment("The ID of a record in the AcqManagement.AdmJob table determining which AdmJob owns this task.");
            entity.Property(e => e.Description).HasComment("A description of the AdmJobTask.");
            entity.Property(e => e.IsEnabled).HasComment("Flag indicating whether this task should be run.");
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The name of the AdmJobTask.");
            entity.Property(e => e.OrderNumber).HasComment("A number determining the order the parent AdmJob should run its associated tasks.");
            entity.Property(e => e.PackageBinaryType)
                .HasMaxLength(50)
                .HasComment("The field storing the acQuire4 task package MIME type.");
            entity.Property(e => e.PackageBinaryValue).HasComment("The field storing the acQuire4 task package MIME value.");
            entity.Property(e => e.SendMail).HasComment("Whether an email should be sent as part of the job task.");
            entity.Property(e => e.StopOnError).HasComment("Flag indicating if the parent Job should stop if this AdmJobTasks fails.");

            entity.HasOne(d => d.AdmJob).WithMany(p => p.AdmJobTask)
                .HasForeignKey(d => d.AdmJobId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmJobTask_01");
        });

        modelBuilder.Entity<AdmMailAttachment>(entity =>
        {
            entity.ToTable("AdmMailAttachment", "AcqPresentation", tb => tb.HasComment("Details an attachment that is associated with a mail item."));

            entity.Property(e => e.AdmMailAttachmentId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.MailAttachmentBinaryType)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("The mail attachment MIME type.");
            entity.Property(e => e.MailAttachmentBinaryValue)
                .IsRequired()
                .HasComment("The mail attachment MIME value.");
            entity.Property(e => e.MailAttachmentData)
                .IsRequired()
                .HasComment("The serialized information about the mail attachment.");

            entity.HasOne(d => d.AdmMailQueue).WithMany(p => p.AdmMailAttachment)
                .HasForeignKey(d => d.AdmMailQueueId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmMailAttachment_01");
        });

        modelBuilder.Entity<AdmMailQueue>(entity =>
        {
            entity.ToTable("AdmMailQueue", "AcqPresentation", tb => tb.HasComment("Details a queue of mail items that need to be sent."));

            entity.Property(e => e.AdmMailQueueId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.MailData)
                .IsRequired()
                .HasComment("The serialized information about the mail.");
        });

        modelBuilder.Entity<AdmMailTemplate>(entity =>
        {
            entity.ToTable("AdmMailTemplate", "AcqPresentation", tb => tb.HasComment("Details a mail template to be used when constructing an email."));

            entity.HasIndex(e => e.Name, "UQ_AcqPresentation_AdmMailTemplate_01").IsUnique();

            entity.Property(e => e.AdmMailTemplateId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.MailData)
                .IsRequired()
                .HasComment("The serialized information about the mail.");
            entity.Property(e => e.MailTriggerEventType)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("The event type that will trigger the mail to be sent.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The unique name of the mail template.");

            entity.HasMany(d => d.AdmJob).WithMany(p => p.AdmMailTemplate)
                .UsingEntity<Dictionary<string, object>>(
                    "AdmMailTemplateAdmJob",
                    r => r.HasOne<AdmJob>().WithMany()
                        .HasForeignKey("AdmJobId")
                        .HasConstraintName("FK_AcqPresentation_AdmMailTemplateAdmJob_02"),
                    l => l.HasOne<AdmMailTemplate>().WithMany()
                        .HasForeignKey("AdmMailTemplateId")
                        .HasConstraintName("FK_AcqPresentation_AdmMailTemplateAdmJob_01"),
                    j =>
                    {
                        j.HasKey("AdmMailTemplateId", "AdmJobId").HasName("PK_AcqPresentation_AdmMailTemplateAdmJob");
                        j.ToTable("AdmMailTemplateAdmJob", "AcqPresentation", tb => tb.HasComment("Details the jobs a mail template is associated with."));
                        j.IndexerProperty<int>("AdmMailTemplateId").HasComment("The primary key of the mail template.");
                        j.IndexerProperty<int>("AdmJobId").HasComment("The primary key of the job.");
                    });

            entity.HasMany(d => d.AdmJobTask).WithMany(p => p.AdmMailTemplate)
                .UsingEntity<Dictionary<string, object>>(
                    "AdmMailTemplateAdmJobTask",
                    r => r.HasOne<AdmJobTask>().WithMany()
                        .HasForeignKey("AdmJobTaskId")
                        .HasConstraintName("FK_AcqPresentation_AdmMailTemplateAdmJobTask_02"),
                    l => l.HasOne<AdmMailTemplate>().WithMany()
                        .HasForeignKey("AdmMailTemplateId")
                        .HasConstraintName("FK_AcqPresentation_AdmMailTemplateAdmJobTask_01"),
                    j =>
                    {
                        j.HasKey("AdmMailTemplateId", "AdmJobTaskId").HasName("PK_AcqPresentation_AdmMailTemplateAdmJobTask");
                        j.ToTable("AdmMailTemplateAdmJobTask", "AcqPresentation", tb => tb.HasComment("Details the job tasks a mail template is associated with."));
                        j.IndexerProperty<int>("AdmMailTemplateId").HasComment("The primary key of the mail template.");
                        j.IndexerProperty<int>("AdmJobTaskId").HasComment("The primary key of the job task.");
                    });
        });

        modelBuilder.Entity<AdmManualCompoundInclusion>(entity =>
        {
            entity.HasKey(e => e.Name);

            entity.ToTable("AdmManualCompoundInclusion", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Compounds to be included even when compound is unused and IncludeUnusedAdmCompounds is turned off.");
                    tb.HasTrigger("T_AdmManualCompoundInclusion_IUD");
                });

            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasComment("The name of the compound which will be included .");
        });

        modelBuilder.Entity<AdmManualUriField>(entity =>
        {
            entity.HasKey(e => new { e.UriFieldName, e.TableSchema, e.TableName });

            entity.ToTable("AdmManualUriField", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the MIME fields to be created.");
                    tb.HasTrigger("T_AdmManualUriField_IUD");
                });

            entity.Property(e => e.UriFieldName)
                .HasMaxLength(400)
                .HasComment("The name to be given to the uri field.");
            entity.Property(e => e.TableSchema)
                .HasMaxLength(128)
                .HasComment("The schema of the table that this mime field is from.");
            entity.Property(e => e.TableName)
                .HasMaxLength(128)
                .HasComment("The name of the table that this mime field is from.");
            entity.Property(e => e.PathFieldName)
                .HasMaxLength(128)
                .HasComment("The name of the field containing the information for the path of the uri.");
        });

        modelBuilder.Entity<AdmMvtGeologyCompound>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmMvtGeologyCompound", "AcqMetaSystem");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<AdmProcessingTypeEventType>(entity =>
        {
            entity.HasKey(e => new { e.ProcessingTypeId, e.ProcessingEventTypeId }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmProcessingTypeEventType", "AcqManagement", tb => tb.HasComment("Defines the ADM processing change level at which the given processing event type trigger is processed."));

            entity.Property(e => e.ProcessingTypeId).HasComment("The relevant processing type.");
            entity.Property(e => e.ProcessingEventTypeId).HasComment("The relevant processing event type which might trigger this process.");
            entity.Property(e => e.AdmChangeLevel).HasComment("The ADM change level at which this processing event type should be processed.");

            entity.HasOne(d => d.AdmChangeLevelNavigation).WithMany(p => p.AdmProcessingTypeEventType)
                .HasForeignKey(d => d.AdmChangeLevel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmProcessingTypeEventType_02");

            entity.HasOne(d => d.ProcessingTypeEventType).WithOne(p => p.AdmProcessingTypeEventType)
                .HasForeignKey<AdmProcessingTypeEventType>(d => new { d.ProcessingTypeId, d.ProcessingEventTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmProcessingTypeEventType_01");
        });

        modelBuilder.Entity<AdmProcessingWarning>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmProcessingWarning", "AcqManagement");

            entity.Property(e => e.ProcessingDatetime).HasColumnType("datetime");
            entity.Property(e => e.ProcessingType)
                .HasMaxLength(16)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmProcessingWarningCache>(entity =>
        {
            entity.HasKey(e => e.AdmProcessingWarningCacheId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmProcessingWarningCache", "AcqManagement", tb => tb.HasComment("Saves cached processing warnings from the ADM meta system processes."));

            entity.Property(e => e.AdmProcessingWarningCacheId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.ErrorMessageId).HasComment("The error message type for this warning.");
            entity.Property(e => e.LogId).HasComment("The processing event which produced this warning.");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasComment("The warning message.");
            entity.Property(e => e.ProcessingTypeId).HasComment("The processing type which produced this warning.");

            entity.HasOne(d => d.ErrorMessage).WithMany(p => p.AdmProcessingWarningCache)
                .HasForeignKey(d => d.ErrorMessageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmProcessingWarningCache_02");

            entity.HasOne(d => d.Log).WithMany(p => p.AdmProcessingWarningCache)
                .HasForeignKey(d => d.LogId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmProcessingWarningCache_03");

            entity.HasOne(d => d.ProcessingType).WithMany(p => p.AdmProcessingWarningCache)
                .HasForeignKey(d => d.ProcessingTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmProcessingWarningCache_01");
        });

        modelBuilder.Entity<AdmProjectValidation>(entity =>
        {
            entity.HasKey(e => e.RuleId);

            entity.ToTable("AdmProjectValidation", "AcqMetaSystem", tb => tb.HasComment("Stores the asoociation between Acquire4 project validations and their property objects."));

            entity.HasIndex(e => e.PropertyObjectGlobalId, "UQ_AdmProjectValidation_01").IsUnique();

            entity.Property(e => e.RuleId)
                .HasMaxLength(200)
                .HasComment("The rule set id created by processing acquire 4 project validations.");
            entity.Property(e => e.PropertyObjectGlobalId).HasComment("The identity of the property object which was created.");

            entity.HasOne(d => d.PropertyObjectGlobal).WithOne(p => p.AdmProjectValidation)
                .HasForeignKey<AdmProjectValidation>(d => d.PropertyObjectGlobalId)
                .HasConstraintName("FK_AdmProjectValidation_01");
        });

        modelBuilder.Entity<AdmQomCategoryPath>(entity =>
        {
            entity.HasKey(e => e.AdmQomCategoryPathId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmQomCategoryPath", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Stores information on category paths required for the ADM object model.");
                    tb.HasTrigger("T_AdmQomCategoryPath_IUD");
                });

            entity.HasIndex(e => e.CategoryPath, "UQ_AdmQomCategoryPath_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.AdmQomCategoryPathId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.CategoryPath)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("A string representation of a path to a category.");
            entity.Property(e => e.OrderNumber).HasComment("The order in which the category should be displayed within its parent category.");
        });

        modelBuilder.Entity<AdmQomCompound>(entity =>
        {
            entity.HasKey(e => e.AdmQomCompoundId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmQomCompound", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the compounds which will be listed in AcQuire Object Models.");
                    tb.HasTrigger("T_AdmQomCompound_IUD");
                });

            entity.HasIndex(e => e.NameTemplate, "UQ_AdmQomCompound_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.AdmQomCompoundId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.AdmModuleName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The name of the ADM module to which the QOM compound is related.");
            entity.Property(e => e.CompoundBehaviourTypeName)
                .HasMaxLength(255)
                .HasComment("The name of the compound behaviour type to be associated with this QOM compound.");
            entity.Property(e => e.CompoundStyle)
                .IsRequired()
                .HasMaxLength(20)
                .HasComment("The compound style (e.g. Reference, Data).");
            entity.Property(e => e.FilterCondition)
                .HasComment("Preformatted details of any filter required to be applied. Mutually exclusive with the unformatted Filter columns.")
                .HasColumnType("xml");
            entity.Property(e => e.FilterConditionOperator)
                .HasMaxLength(10)
                .HasComment("The operator to apply to the filter condition.");
            entity.Property(e => e.FilterConditionValue)
                .HasMaxLength(200)
                .HasComment("The value to apply to the right hand side of the filter condition.");
            entity.Property(e => e.FilterFieldName)
                .HasMaxLength(128)
                .HasComment("The field in the filter table from which the left hand side of the compound's filter condition can be applied.");
            entity.Property(e => e.FilterTableName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The table from which the left hand side of the compound's filter condition can be applied.");
            entity.Property(e => e.FilterTableSchema)
                .HasMaxLength(128)
                .HasComment("The schema of the table from which the compound's filter condition can be applied.");
            entity.Property(e => e.HideCoordinates).HasComment("When true mark coordinates should be unavailable for this compound.");
            entity.Property(e => e.HideDerivedFields).HasComment("When true mark all derived fields unavailable.");
            entity.Property(e => e.IsGeologyInterval).HasComment("Whether or not the row represents a set of Geology Intervals. If true, a set of compounds will be generated, one each for the rows in GEOLOGYCODEPRIMARY.");
            entity.Property(e => e.IsGeologyIntervalJoin).HasComment("Whether or not the compounds related to this record should be joined to other Geology type compounds using range based derived relationships.");
            entity.Property(e => e.IsLegacy)
                .HasDefaultValue(true)
                .HasComment("The presentation style of the compound.");
            entity.Property(e => e.IsRangeCompound).HasComment("Whether or not compound(s) defined by this record should have a range attribute associated with them.");
            entity.Property(e => e.LabelTemplate)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("A template to use for the external name that will be shown in the UI. Can use %name% as a placeholder to be substitued or can simply be a straight name requiring no substitution.");
            entity.Property(e => e.MinimumAdmMetaVersion).HasComment("The minimum meta version, as determined by METATABLEVERSION.METAVERSION, for which the compound is valid.");
            entity.Property(e => e.NameTemplate)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("A template to use for the internal name of this compound. Can use %name% as a placeholder to be substitued or can simply be a straight name requiring no substitution.");
            entity.Property(e => e.PrimaryBaseTableName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The table on which this compound is primarily based.");
            entity.Property(e => e.PrimaryBaseTableSchema)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The schema of the table on which this compound is primarily based.");
            entity.Property(e => e.RangeFromFieldName)
                .HasMaxLength(200)
                .HasComment("If IsRangeCompound is set, this is the name of the range's from field to use in the compound created.");
            entity.Property(e => e.RangeToFieldName)
                .HasMaxLength(200)
                .HasComment("If IsRangeCompound is set, this is the name of the range's to field to use in the compound created.");

            entity.HasOne(d => d.CompoundBehaviourTypeNameNavigation).WithMany(p => p.AdmQomCompound)
                .HasPrincipalKey(p => p.Name)
                .HasForeignKey(d => d.CompoundBehaviourTypeName)
                .HasConstraintName("FK_AdmQomCompound_01");
        });

        modelBuilder.Entity<AdmQomCompoundAttribute>(entity =>
        {
            entity.HasKey(e => new { e.AdmQomCompoundId, e.AdmQomAttributeName, e.Preference });

            entity.ToTable("AdmQomCompoundAttribute", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the compounds which will be listed in AcQuire Object Models.");
                    tb.HasTrigger("T_AdmQomCompoundAttribute_IUD");
                });

            entity.Property(e => e.AdmQomCompoundId).HasComment("The qom compound against which it is associated.");
            entity.Property(e => e.AdmQomAttributeName)
                .HasMaxLength(200)
                .HasComment("The name of the attribute.");
            entity.Property(e => e.AdmModuleName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The Adm module on which this attribute depends.");
            entity.Property(e => e.AttributeType)
                .IsRequired()
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasComment("The type of attribute.");
            entity.Property(e => e.Definition)
                .IsRequired()
                .HasComment("The xml definition.")
                .HasColumnType("xml");

            entity.HasOne(d => d.AdmQomCompound).WithMany(p => p.AdmQomCompoundAttribute)
                .HasForeignKey(d => d.AdmQomCompoundId)
                .HasConstraintName("FK_AdmQomCompoundAttribute_01");
        });

        modelBuilder.Entity<AdmQomCompoundBaseTable>(entity =>
        {
            entity.HasKey(e => new { e.AdmQomCompoundId, e.Schema, e.Name }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmQomCompoundBaseTable", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the further base tables in addition to each compound's Primary Base table.");
                    tb.HasTrigger("T_AdmQomCompoundBaseTable_IUD");
                });

            entity.Property(e => e.AdmQomCompoundId).HasComment("The primary key of the compound for which this table will be a base table.");
            entity.Property(e => e.Schema)
                .HasMaxLength(128)
                .HasComment("The schema of the base table.");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasComment("The name of the base table.");
            entity.Property(e => e.AdmModuleName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The name of the ADM module in which the base table exists.");

            entity.HasOne(d => d.AdmQomCompound).WithMany(p => p.AdmQomCompoundBaseTable)
                .HasForeignKey(d => d.AdmQomCompoundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmQomCompoundBaseTable_01");
        });

        modelBuilder.Entity<AdmQomCompoundCategoryPath>(entity =>
        {
            entity.HasKey(e => new { e.AdmQomCompoundId, e.AdmQomCategoryPathId }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmQomCompoundCategoryPath", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Stores information on the category paths related to QOM compounds.");
                    tb.HasTrigger("T_AdmQomCompoundCategoryPath_IUD");
                });

            entity.HasIndex(e => new { e.AdmQomCategoryPathId, e.OrderNumber }, "UQ_AdmQomCompoundCategoryPath_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.AdmQomCompoundId).HasComment("The identifier for the QOM compound that is related to this category path.");
            entity.Property(e => e.AdmQomCategoryPathId).HasComment("The identifier for the category path being related to by this QOM compound.");
            entity.Property(e => e.AdmModuleName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The name of the ADM module to which the category path and QOM compound combination is related.");
            entity.Property(e => e.DefaultGroupingAttribute)
                .HasMaxLength(200)
                .HasComment("An optional attribute of the given compound which fields in the compound should be grouped by, by default.");
            entity.Property(e => e.OrderNumber).HasComment("The order in which the compound will be listed within its category in the UI.");

            entity.HasOne(d => d.AdmQomCategoryPath).WithMany(p => p.AdmQomCompoundCategoryPath)
                .HasForeignKey(d => d.AdmQomCategoryPathId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmQomCompoundCategoryPath_02");

            entity.HasOne(d => d.AdmQomCompound).WithMany(p => p.AdmQomCompoundCategoryPath)
                .HasForeignKey(d => d.AdmQomCompoundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmQomCompoundCategoryPath_01");
        });

        modelBuilder.Entity<AdmQomCompoundField>(entity =>
        {
            entity.HasKey(e => new { e.AdmQomCompoundId, e.Name }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmQomCompoundField", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details for the database fields within the AcQuire Object Model compounds.");
                    tb.HasTrigger("T_AdmQomCompoundField_IUD");
                });

            entity.Property(e => e.AdmQomCompoundId).HasComment("The primary key of the compound of which this compound field is a part.");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasComment("The name of the compound field.");
            entity.Property(e => e.DefaultValue)
                .HasComment("An Xml represenation of a constant value to be used as a default.")
                .HasColumnType("xml");
            entity.Property(e => e.IsHidden).HasComment("Whether or not this field should be hidden from the user.");
            entity.Property(e => e.Label)
                .HasMaxLength(200)
                .HasComment("The Label of the compound field to be used for display purposes.");

            entity.HasOne(d => d.AdmQomCompound).WithMany(p => p.AdmQomCompoundField)
                .HasForeignKey(d => d.AdmQomCompoundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmQomCompoundField_01");
        });

        modelBuilder.Entity<AdmQomCompoundName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmQomCompoundName", "AcqMetaSystem");

            entity.Property(e => e.Name).HasMaxLength(2000);
            entity.Property(e => e.PrimaryCode)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmQomCompoundRangeGroupingElement>(entity =>
        {
            entity.HasKey(e => new { e.AdmQomCompoundId, e.OrderNumber }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmQomCompoundRangeGroupingElement", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Defines the range grouping elements for range type compounds defined in AdmQomCompound.");
                    tb.HasTrigger("T_AdmQomCompoundRangeGroupingElement_IUD");
                });

            entity.Property(e => e.AdmQomCompoundId).HasComment("The primary key of the compound details record to which this range grouping element entry belongs.");
            entity.Property(e => e.OrderNumber).HasComment("The order number of this range grouping element entry within the given compound details record.");
            entity.Property(e => e.CompoundFieldName)
                .HasMaxLength(200)
                .HasComment("The name of the field being used as a range grouping element in the compound to be created. This or ParentCompoundName should be set, but not both.");
            entity.Property(e => e.ParentCompoundName)
                .HasMaxLength(200)
                .HasComment("The name of the parent compound which will define the relationship being used as a range grouping element in the compound to be created. This or CompoundFieldName should be set, but not both.");

            entity.HasOne(d => d.AdmQomCompound).WithMany(p => p.AdmQomCompoundRangeGroupingElement)
                .HasForeignKey(d => d.AdmQomCompoundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmQomCompoundRangeGroupingElement_01");
        });

        modelBuilder.Entity<AdmQomCompoundResolved>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmQomCompoundResolved", "AcqMetaSystem");

            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<AdmQomCompoundResolvedAttribute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmQomCompoundResolvedAttribute", "AcqMetaSystem");

            entity.Property(e => e.AdmQomAttributeName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.AttributeType)
                .IsRequired()
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.Definition)
                .IsRequired()
                .HasColumnType("xml");
        });

        modelBuilder.Entity<AdmQomCompoundVirtualTable>(entity =>
        {
            entity.HasKey(e => new { e.AdmQomCompoundId, e.Name }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmQomCompoundVirtualTable", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the virtual field tables to be included within compounds which will be listed in AcQuire Object Models.");
                    tb.HasTrigger("T_AdmQomCompoundVirtualTable_IUD");
                });

            entity.Property(e => e.AdmQomCompoundId).HasComment("The primary key of the compound of which this database field is a part.");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasComment("The name of the virtual field table.");
            entity.Property(e => e.MinimumAdmMetaVersion).HasComment("The minimum meta version, as determined by METATABLEVERSION.METAVERSION, for which the virtual table is valid.");
            entity.Property(e => e.Schema)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The schema of the virtual field table.");

            entity.HasOne(d => d.AdmQomCompound).WithMany(p => p.AdmQomCompoundVirtualTable)
                .HasForeignKey(d => d.AdmQomCompoundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmQomCompoundVirtualTable_01");
        });

        modelBuilder.Entity<AdmQomContextDefinition>(entity =>
        {
            entity.HasKey(e => e.PropertyObjectGlobalId);

            entity.ToTable("AdmQomContextDefinition", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Header record for an ADM Context Defintion.");
                    tb.HasTrigger("T_AdmQomContextDefition_D");
                });

            entity.Property(e => e.PropertyObjectGlobalId)
                .ValueGeneratedNever()
                .HasComment("The identity of context definition and its eventual property object.");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("The description of the Context Definition.");
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The label of the Context Definition.");

            entity.HasMany(d => d.AdmQomCompound).WithMany(p => p.PropertyObjectGlobal)
                .UsingEntity<Dictionary<string, object>>(
                    "AdmQomContextDefinitionCompound",
                    r => r.HasOne<AdmQomCompound>().WithMany()
                        .HasForeignKey("AdmQomCompoundId")
                        .HasConstraintName("FK_AdmQomContextDefinitionCompound_02"),
                    l => l.HasOne<AdmQomContextDefinition>().WithMany()
                        .HasForeignKey("PropertyObjectGlobalId")
                        .HasConstraintName("FK_AdmQomContextDefinitionCompound_01"),
                    j =>
                    {
                        j.HasKey("PropertyObjectGlobalId", "AdmQomCompoundId");
                        j.ToTable("AdmQomContextDefinitionCompound", "AcqMetaSystem", tb =>
                            {
                                tb.HasComment("List of QOM Compounds to be included in an ADM ContextDefinition.");
                                tb.HasTrigger("T_AdmQomContextDefinitionCompound_IUD");
                            });
                        j.IndexerProperty<Guid>("PropertyObjectGlobalId").HasComment("The identity of the AdmQomContextDefinition.");
                        j.IndexerProperty<int>("AdmQomCompoundId").HasComment("The QOM compound to include.");
                    });
        });

        modelBuilder.Entity<AdmQomGeologyIntervalCompoundVirtualField>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmQomGeologyIntervalCompoundVirtualField", "AcqMetaSystem");

            entity.Property(e => e.CodeTable)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CompoundName).HasMaxLength(2000);
            entity.Property(e => e.PrimaryCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VirtualFieldName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmQomInheritedCompound>(entity =>
        {
            entity.HasKey(e => e.AdmQomInheritedCompoundGlobalId).HasName("PK_AdmQomInheritedCompound_01");

            entity.ToTable("AdmQomInheritedCompound", "AcqMetaSystem", tb => tb.HasComment("Definition of a QOM Inherited Compound."));

            entity.HasIndex(e => e.Name, "UQ_AdmQomInheritedCompound_01").IsUnique();

            entity.Property(e => e.AdmQomInheritedCompoundGlobalId)
                .ValueGeneratedNever()
                .HasComment("The unique identifier primary key.");
            entity.Property(e => e.AdmQomCompoundId).HasComment("The identity of the qom compound upon which this inherited compound is based..");
            entity.Property(e => e.Label)
                .HasMaxLength(100)
                .HasComment("The default label of the compound.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name to give the compound upon creation.");
            entity.Property(e => e.ObjectCategoryGlobalId).HasComment("The category through which this compound is presented.");
            entity.Property(e => e.PropertyObjectData)
                .IsRequired()
                .HasComment("The Json string defining the inherited compound.");

            entity.HasOne(d => d.AdmQomCompound).WithMany(p => p.AdmQomInheritedCompound)
                .HasForeignKey(d => d.AdmQomCompoundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmQomInheritedCompound_01");

            entity.HasOne(d => d.ObjectCategoryGlobal).WithMany(p => p.AdmQomInheritedCompound)
                .HasForeignKey(d => d.ObjectCategoryGlobalId)
                .HasConstraintName("FK_AdmQomInheritedCompound_02");
        });

        modelBuilder.Entity<AdmQomObjectCategory>(entity =>
        {
            entity.HasKey(e => e.ObjectCategoryGlobalId);

            entity.ToTable("AdmQomObjectCategory", "AcqMetaSystem", tb => tb.HasComment("Record of an QOM object category."));

            entity.Property(e => e.ObjectCategoryGlobalId)
                .ValueGeneratedNever()
                .HasComment("The unique identifier primary key.");
            entity.Property(e => e.AdmModuleName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The name of the module on which the QOM category depends.");
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The default label of the object category, which is to be overriden by Localization.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The name of the object category.");
            entity.Property(e => e.ObjectCategoryType)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The type of the object category.");
            entity.Property(e => e.ParentObjectCategoryGlobalId).HasComment("The parent user object category, if there is one.");

            entity.HasOne(d => d.ParentObjectCategoryGlobal).WithMany(p => p.InverseParentObjectCategoryGlobal)
                .HasForeignKey(d => d.ParentObjectCategoryGlobalId)
                .HasConstraintName("FK_AdmQomObjectCategory_01");

            entity.HasMany(d => d.AdmQomCompound).WithMany(p => p.ObjectCategoryGlobal)
                .UsingEntity<Dictionary<string, object>>(
                    "AdmQomCompoundObjectCategory",
                    r => r.HasOne<AdmQomCompound>().WithMany()
                        .HasForeignKey("AdmQomCompoundId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AdmQomCompoundObjectCategory_02"),
                    l => l.HasOne<AdmQomObjectCategory>().WithMany()
                        .HasForeignKey("ObjectCategoryGlobalId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AdmQomCompoundObjectCategory_01"),
                    j =>
                    {
                        j.HasKey("ObjectCategoryGlobalId", "AdmQomCompoundId");
                        j.ToTable("AdmQomCompoundObjectCategory", "AcqMetaSystem", tb => tb.HasComment("Stores information associated QOM object categories to QOM compounds."));
                        j.IndexerProperty<Guid>("ObjectCategoryGlobalId").HasComment("The identifier for the QOM object category being related to by this QOM compound.");
                        j.IndexerProperty<int>("AdmQomCompoundId").HasComment("The identifier for the QOM compound that is related to this category path.");
                    });
        });

        modelBuilder.Entity<AdmQomRelationship>(entity =>
        {
            entity.HasKey(e => new { e.SourceQomCompoundId, e.TargetQomCompoundId }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmQomRelationship", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("List of the source and target compound relationships that are expected in the object model.");
                    tb.HasTrigger("T_AdmQomRelationship_IUD");
                });

            entity.Property(e => e.SourceQomCompoundId).HasComment("The source compound of the relationship.");
            entity.Property(e => e.TargetQomCompoundId).HasComment("The target compound of the relationship.");
            entity.Property(e => e.IsParent).HasComment("Whether the source is a parent of the target, or default to relationships existing value when not provided.");
            entity.Property(e => e.IsRequired).HasComment("Flag indicating that the relationship must be set on the source compound.");
            entity.Property(e => e.Label)
                .HasMaxLength(200)
                .HasComment("The label to be used for the relationship.");

            entity.HasOne(d => d.SourceQomCompound).WithMany(p => p.AdmQomRelationshipSourceQomCompound)
                .HasForeignKey(d => d.SourceQomCompoundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmQomRelationship_01");

            entity.HasOne(d => d.TargetQomCompound).WithMany(p => p.AdmQomRelationshipTargetQomCompound)
                .HasForeignKey(d => d.TargetQomCompoundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmQomRelationship_02");
        });

        modelBuilder.Entity<AdmRelationshipRange>(entity =>
        {
            entity.HasKey(e => e.RelationshipRangeId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmRelationshipRange", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the range base tables that need to be configured for derived relationships.");
                    tb.HasTrigger("T_AdmRelationshipRange_IUD");
                    tb.HasTrigger("T_AdmRelationshipRange_OD");
                });

            entity.Property(e => e.RelationshipRangeId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.BaseCompound)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("The base compound that derived relationships are to be based on.");
            entity.Property(e => e.DepthField)
                .HasMaxLength(500)
                .HasComment("The depth field name if this is a depth compound.");
            entity.Property(e => e.FromField)
                .HasMaxLength(500)
                .HasComment("The from field name if this is a range compound.");
            entity.Property(e => e.IsRange).HasComment("Defines if the compound is a range or depth compound.");
            entity.Property(e => e.ToField)
                .HasMaxLength(500)
                .HasComment("The to field name if this is a range compound.");
        });

        modelBuilder.Entity<AdmRelationshipRangeDefaultFilter>(entity =>
        {
            entity.HasKey(e => new { e.RelationshipRangeId, e.FilterField }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmRelationshipRangeDefaultFilter", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the filters to be applied to the range base tables for derived relationships.");
                    tb.HasTrigger("T_AdmRelationshipRangeDefaultFilter_IUD");
                });

            entity.Property(e => e.RelationshipRangeId).HasComment("The Relationship Range Id from the AdmRelationshipRange table.");
            entity.Property(e => e.FilterField)
                .HasMaxLength(200)
                .HasComment("The field to filter.");
            entity.Property(e => e.Calculation)
                .HasMaxLength(15)
                .HasComment("The calculation type to use if relevant for this filter.");
            entity.Property(e => e.Value)
                .HasMaxLength(500)
                .HasComment("The fixed value the filter field must match if relevant.");

            entity.HasOne(d => d.RelationshipRange).WithMany(p => p.AdmRelationshipRangeDefaultFilter)
                .HasForeignKey(d => d.RelationshipRangeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmRelationshipRangeDefaultFilter_01");
        });

        modelBuilder.Entity<AdmRelationshipRangeDefaultOrder>(entity =>
        {
            entity.HasKey(e => new { e.RelationshipRangeId, e.OrderNumber }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmRelationshipRangeDefaultOrder", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the ordering to be applied to the range base tables for derived relationships.");
                    tb.HasTrigger("T_AdmRelationshipRangeDefaultOrder_IUD");
                });

            entity.Property(e => e.RelationshipRangeId).HasComment("The Relationship Range Id from the AdmRelationshipRange table.");
            entity.Property(e => e.OrderNumber).HasComment("The order in which to use the order fields.");
            entity.Property(e => e.IsDescending).HasComment("Should the field be ordered descending.");
            entity.Property(e => e.OrderField)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("The field to order by.");

            entity.HasOne(d => d.RelationshipRange).WithMany(p => p.AdmRelationshipRangeDefaultOrder)
                .HasForeignKey(d => d.RelationshipRangeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmRelationshipRangeDefaultOrder_01");
        });

        modelBuilder.Entity<AdmRelationshipRangeIntersectPath>(entity =>
        {
            entity.HasKey(e => new { e.RelationshipRangeId, e.OrderNumber }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmRelationshipRangeIntersectPath", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the path to a common compound for this range table, to facilitate identifying which range compounds can be linked.");
                    tb.HasTrigger("T_AdmRelationshipRangeIntersectPath_IUD");
                });

            entity.Property(e => e.RelationshipRangeId).HasComment("The Relationship Range Id from the AdmRelationshipRange table.");
            entity.Property(e => e.OrderNumber).HasComment("The order in which the intersect path flows.");
            entity.Property(e => e.DestinationCompound)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("The destination of this intersect path.");
            entity.Property(e => e.SourceCompound)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("The source of this intersect step.");

            entity.HasOne(d => d.RelationshipRange).WithMany(p => p.AdmRelationshipRangeIntersectPath)
                .HasForeignKey(d => d.RelationshipRangeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmRelationshipRangeIntersectPath_01");
        });

        modelBuilder.Entity<AdmSampleGridLocalRankedCoordinate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmSampleGridLocalRankedCoordinate", "dbo");

            entity.Property(e => e.COORDINATESET)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmSampleGridProjectedRankedCoordinate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmSampleGridProjectedRankedCoordinate", "dbo");

            entity.Property(e => e.COORDINATESET)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDTYPE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmSampleProjectedRankedCoordinate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmSampleProjectedRankedCoordinate", "dbo");

            entity.Property(e => e.COORDINATESET)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDTYPE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmSampleRankedLocalCoordinate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmSampleRankedLocalCoordinate", "dbo");

            entity.Property(e => e.COORDINATESET)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SURVEYMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmSampleRankedProjectedCoordinate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmSampleRankedProjectedCoordinate", "dbo");

            entity.Property(e => e.COORDINATESET)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDTYPE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SURVEYMETHOD)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdmTableCompound>(entity =>
        {
            entity.HasKey(e => e.TableCompoundName);

            entity.ToTable("AdmTableCompound", "AcqMetaSystem", tb => tb.HasComment("Stores the translation of names between table references in Acquire4 to their appropriate level boab couterparts."));

            entity.Property(e => e.TableCompoundName)
                .HasMaxLength(200)
                .HasComment("The name given to the table level compound which is to be elevated.");
            entity.Property(e => e.CompoundName)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The Name of the compound level compound which is to be created.");
        });

        modelBuilder.Entity<AdmValueRange>(entity =>
        {
            entity.HasKey(e => e.FieldAttributeId);

            entity.ToTable("AdmValueRange", "AcqMetaSystem", tb => tb.HasComment("Table to assist in the normalization of ADM value range conditions."));

            entity.Property(e => e.FieldAttributeId)
                .ValueGeneratedNever()
                .HasComment("The field attribute identifier.");
            entity.Property(e => e.Condition)
                .IsRequired()
                .HasComment("A Cache of the condition of a between minimum and maximum comparison.")
                .HasColumnType("xml");
            entity.Property(e => e.Maximum).HasComment("The maximum acceptable value.");
            entity.Property(e => e.Minimum).HasComment("The minimum acceptable value.");

            entity.HasOne(d => d.FieldAttribute).WithOne(p => p.AdmValueRange)
                .HasForeignKey<AdmValueRange>(d => d.FieldAttributeId)
                .HasConstraintName("FK_AdmValueRange");
        });

        modelBuilder.Entity<AdmValueRangeFieldType>(entity =>
        {
            entity.HasKey(e => e.FieldTypeId);

            entity.ToTable("AdmValueRangeFieldType", "AcqMetaSystem", tb => tb.HasComment("Table to assist in the reversion of field types."));

            entity.Property(e => e.FieldTypeId)
                .ValueGeneratedNever()
                .HasComment("The range constricted field type identifier.");
            entity.Property(e => e.BaseFieldTypeId).HasComment("The identity of the field type upon which the condition was added.");
            entity.Property(e => e.FieldAttributeId).HasComment("The identity of the field attribute containing the condition.");

            entity.HasOne(d => d.BaseFieldType).WithMany(p => p.AdmValueRangeFieldTypeBaseFieldType)
                .HasForeignKey(d => d.BaseFieldTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmValueRangeFieldType_02");

            entity.HasOne(d => d.FieldAttribute).WithMany(p => p.AdmValueRangeFieldType)
                .HasForeignKey(d => d.FieldAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdmValueRangeFieldType_03");

            entity.HasOne(d => d.FieldType).WithOne(p => p.AdmValueRangeFieldTypeFieldType)
                .HasForeignKey<AdmValueRangeFieldType>(d => d.FieldTypeId)
                .HasConstraintName("FK_AdmValueRangeFieldType_01");
        });

        modelBuilder.Entity<AdmViewCompoundCompound>(entity =>
        {
            entity.HasKey(e => new { e.ViewId, e.CompoundName });

            entity.ToTable("AdmViewCompoundCompound", "AcqPresentation", tb =>
                {
                    tb.HasComment("Maintains an cache of references from view compounds in presentation to compounds in the meta system.");
                    tb.HasTrigger("T_AdmViewCompoundCompound_IUD");
                });

            entity.Property(e => e.ViewId).HasComment("The identity of the view.");
            entity.Property(e => e.CompoundName)
                .HasMaxLength(200)
                .HasComment("The name of the compound as referenced inside the xml of the view compound.");

            entity.HasOne(d => d.View).WithMany(p => p.AdmViewCompoundCompound)
                .HasForeignKey(d => d.ViewId)
                .HasConstraintName("FK_AdmViewCompoundCompound_01");
        });

        modelBuilder.Entity<AdmViewCompoundInheritedCompound>(entity =>
        {
            entity.HasKey(e => new { e.ViewCompoundId, e.OriginalCompoundName });

            entity.ToTable("AdmViewCompoundInheritedCompound", "AcqMetaSystem", tb => tb.HasComment("For a given Neo view, provides the details of the alternative compound which should be used instead of an original compound."));

            entity.Property(e => e.ViewCompoundId).HasComment("The id of the record in AcqPresentation.ViewCompound which this conversion is specific to.");
            entity.Property(e => e.OriginalCompoundName)
                .HasMaxLength(200)
                .HasComment("The name of the original compound in the view.");
            entity.Property(e => e.InheritedCompoundName)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the compound to use in place of the original compound.");
            entity.Property(e => e.ViewId).HasComment("The id of the record in AcqPresentation.View which this conversion is specific to.");
        });

        modelBuilder.Entity<AdmViewCompoundScriptFilter>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AdmViewCompoundScriptFilter", "AcqMetaSystem");
        });

        modelBuilder.Entity<AdmViewValidationExclusion>(entity =>
        {
            entity.HasKey(e => new { e.Label, e.Category }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("AdmViewValidationExclusion", "AcqPresentation", tb => tb.HasTrigger("T_AdmViewValidationExclusion_IUD"));

            entity.Property(e => e.Label).HasMaxLength(500);
            entity.Property(e => e.Category).HasMaxLength(255);
        });

        modelBuilder.Entity<BAK_QLR_CHECKSAMPLE2020_02_05_11_23_27>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BAK_QLR_CHECKSAMPLE2020-02-05 11:23:27", "dbo");

            entity.Property(e => e.ACTIONDATE_QLR).HasColumnType("datetime");
            entity.Property(e => e.ACTION_QLR)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PCHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BAK_QLR_GEOINTERVAL2020_02_05_11_23_29>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BAK_QLR_GEOINTERVAL2020-02-05 11:23:29", "dbo");

            entity.Property(e => e.ACTIONDATE_QLR).HasColumnType("datetime");
            entity.Property(e => e.ACTION_QLR)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BAK_QLR_HOLELOCATION2020_02_05_11_23_30>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BAK_QLR_HOLELOCATION2020-02-05 11:23:30", "dbo");

            entity.Property(e => e.ACTIONDATE_QLR).HasColumnType("datetime");
            entity.Property(e => e.ACTION_QLR)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BAK_QLR_METAFORMDEFINITION2020_02_05_11_23_31>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BAK_QLR_METAFORMDEFINITION2020-02-05 11:23:31", "dbo");

            entity.Property(e => e.ACTIONDATE_QLR).HasColumnType("datetime");
            entity.Property(e => e.ACTION_QLR)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CACHETABLENAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.CATEGORY)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.COMPOUNDTYPE)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LASTCACHESTARTTIME).HasColumnType("datetime");
            entity.Property(e => e.LASTCACHESUCCESSTIME).HasColumnType("datetime");
            entity.Property(e => e.NAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SZISOWNER).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.SZUSER)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TABLENAME)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BAK_QLR_SAMPLE2020_02_05_11_23_31>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BAK_QLR_SAMPLE2020-02-05 11:23:31", "dbo");

            entity.Property(e => e.ACTIONDATE_QLR).HasColumnType("datetime");
            entity.Property(e => e.ACTION_QLR)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CF_COMPOSITE>(entity =>
        {
            entity.HasKey(e => e.COMPOSITEID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_COMPOSITE", "dbo", tb =>
                {
                    tb.HasComment("Identifies the composites present in the database. ");
                    tb.HasTrigger("T_CF_COMPOSITE_D");
                    tb.HasTrigger("T_CF_COMPOSITE_I");
                    tb.HasTrigger("T_CF_COMPOSITE_U");
                });

            entity.HasIndex(e => e.COMPOSITEMETHOD, "IDX_CF_COMPOSITE_01").HasFillFactor(80);

            entity.HasIndex(e => e.COMPOSITETYPE, "IDX_CF_COMPOSITE_02").HasFillFactor(80);

            entity.Property(e => e.COMPOSITEID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A unique identifier and primary key of a composite.");
            entity.Property(e => e.COMPOSITEMETHOD)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The method used to derive the composite.");
            entity.Property(e => e.COMPOSITETYPE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The type of composite, for example raw indicates that it is based on raw samples.");

            entity.HasOne(d => d.COMPOSITEMETHODNavigation).WithMany(p => p.CF_COMPOSITE)
                .HasForeignKey(d => d.COMPOSITEMETHOD)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_COMPOSITE_COMPOSITEMETHOD");

            entity.HasOne(d => d.COMPOSITETYPENavigation).WithMany(p => p.CF_COMPOSITE)
                .HasForeignKey(d => d.COMPOSITETYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_COMPOSITE_COMPOSITETYPE");
        });

        modelBuilder.Entity<CF_COMPOSITECATEGORY>(entity =>
        {
            entity.HasKey(e => e.COMPOSITECATEGORY).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_COMPOSITECATEGORY", "dbo", tb =>
                {
                    tb.HasComment("Stores the different categories of composite that exist in the database. Can be used to distinguish composite sets by module, e.g. Coal Quality. ");
                    tb.HasTrigger("T_CF_COMPOSITECATEGORY_D");
                    tb.HasTrigger("T_CF_COMPOSITECATEGORY_I");
                    tb.HasTrigger("T_CF_COMPOSITECATEGORY_U");
                });

            entity.Property(e => e.COMPOSITECATEGORY)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("A category facilitates the grouping of composites based on their methods.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The verbose description of composite category.");
            entity.Property(e => e.DOMAINCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of a composite or fraction domain, ie COALQUALITYV2.");
        });

        modelBuilder.Entity<CF_COMPOSITEMETHOD>(entity =>
        {
            entity.HasKey(e => e.COMPOSITEMETHOD).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_COMPOSITEMETHOD", "dbo", tb =>
                {
                    tb.HasComment("Stores in the database the methods used to create composites. ");
                    tb.HasTrigger("T_CF_COMPOSITEMETHOD_D");
                    tb.HasTrigger("T_CF_COMPOSITEMETHOD_U");
                });

            entity.Property(e => e.COMPOSITEMETHOD)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The method used to derive the composite.");
            entity.Property(e => e.COMPOSITECATEGORY)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Defines the group a composite method belongs to.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The verbose description of composite method.");

            entity.HasOne(d => d.COMPOSITECATEGORYNavigation).WithMany(p => p.CF_COMPOSITEMETHOD)
                .HasForeignKey(d => d.COMPOSITECATEGORY)
                .HasConstraintName("FK_CF_COMPOSITEMETHOD_01");
        });

        modelBuilder.Entity<CF_COMPOSITESAMPLETREE>(entity =>
        {
            entity.HasKey(e => new { e.COMPOSITEID, e.PSAMPLEID, e.PDUPLICATENO }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_COMPOSITESAMPLETREE", "dbo", tb =>
                {
                    tb.HasComment("Identifies the composites present in the database and their parent samples. ");
                    tb.HasTrigger("T_CF_COMPOSITESAMPLETREE_D");
                    tb.HasTrigger("T_CF_COMPOSITESAMPLETREE_I");
                    tb.HasTrigger("T_CF_COMPOSITESAMPLETREE_U");
                });

            entity.HasIndex(e => new { e.PSAMPLEID, e.PDUPLICATENO }, "IDX_CF_COMPOSITESAMPLETREE_01").HasFillFactor(80);

            entity.Property(e => e.COMPOSITEID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A unique identifier and primary key of a composite.");
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The SampleID or CheckID of a parent (check)sample, also part of primary key.");
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("PRIMARY")
                .HasComment("The Duplicateno of a parent checksample or 'PRIMARY' for a parent sample, also part of primary key.");
        });

        modelBuilder.Entity<CF_COMPOSITESAMPLETREEBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.COMPOSITEID, e.PSAMPLEID, e.PDUPLICATENO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_COMPOSITESAMPLETREEBIGCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Contains the large comments pertaining to the CompositeSampleTree table. ");
                    tb.HasTrigger("T_CF_COMPOSITESAMPLETREEBIGCOMMENT_IU");
                });

            entity.HasIndex(e => e.NAME, "IDX_CF_COMPOSITESAMPLETREEBIGCOMMENT_01").HasFillFactor(80);

            entity.Property(e => e.COMPOSITEID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A unique identifier and part of primary key of a composite.");
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The SampleID or CheckID of a parent (check)sample, also part of primary key.");
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The Duplicateno of a parent checksample or 'PRIMARY' for a parent sample, also part of primary key.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a virtual field, also part of primary key.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The mandatory value of a virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CF_COMPOSITESAMPLETREEBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_COMPOSITESAMPLETREEBIGCOMMENT_01");
        });

        modelBuilder.Entity<CF_COMPOSITESAMPLETREECOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.COMPOSITEID, e.PSAMPLEID, e.PDUPLICATENO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_COMPOSITESAMPLETREECOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Contains the comments pertaining to the CompositeSampleTree table. ");
                    tb.HasTrigger("T_CF_COMPOSITESAMPLETREECOMMENT_IU");
                });

            entity.HasIndex(e => e.NAME, "IDX_CF_COMPOSITESAMPLETREECOMMENT_01").HasFillFactor(80);

            entity.Property(e => e.COMPOSITEID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A unique identifier and primary key of a composite.");
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The SampleID or CheckID of a parent (check)sample, also part of primary key.");
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The Duplicateno of a parent checksample or 'PRIMARY' for a parent sample, also part of primary key.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a virtual field, also part of primary key.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The mandatory value of a virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CF_COMPOSITESAMPLETREECOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_COMPOSITESAMPLETREECOMMENT_SAMPLECOMMENTCODE");
        });

        modelBuilder.Entity<CF_COMPOSITESAMPLETREEDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.COMPOSITEID, e.PSAMPLEID, e.PDUPLICATENO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_COMPOSITESAMPLETREEDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Contains the data pertaining to the CompositeSampleTree table. ");
                    tb.HasTrigger("T_CF_COMPOSITESAMPLETREEDETAILS_IU");
                });

            entity.HasIndex(e => e.NAME, "IDX_CF_COMPOSITESAMPLETREEDETAILS_01").HasFillFactor(80);

            entity.Property(e => e.COMPOSITEID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A unique identifier and primary key of a composite.");
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The SampleID or CheckID of a parent (check)sample, also part of primary key.");
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The Duplicateno of a parent checksample or 'PRIMARY' for a parent sample, also part of primary key.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a virtual field, also part of primary key.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The mandatory value of a virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CF_COMPOSITESAMPLETREEDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_COMPOSITESAMPLETREEDETAILS_SAMPLECODE");
        });

        modelBuilder.Entity<CF_COMPOSITETYPE>(entity =>
        {
            entity.HasKey(e => e.COMPOSITETYPE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_COMPOSITETYPE", "dbo", tb =>
                {
                    tb.HasComment("Identifies the types of composite present in the database. ");
                    tb.HasTrigger("T_CF_COMPOSITETYPE_D");
                    tb.HasTrigger("T_CF_COMPOSITETYPE_U");
                });

            entity.HasIndex(e => e.COMPOSITECATEGORY, "IDX_CF_COMPOSITETYPE_01").HasFillFactor(80);

            entity.Property(e => e.COMPOSITETYPE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("A unique identifier and brief descriptive type of a composite.");
            entity.Property(e => e.COMPOSITECATEGORY)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Defines the group a composite type belongs to.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The verbose descriptions of a composite type.");

            entity.HasOne(d => d.COMPOSITECATEGORYNavigation).WithMany(p => p.CF_COMPOSITETYPE)
                .HasForeignKey(d => d.COMPOSITECATEGORY)
                .HasConstraintName("FK_CF_COMPOSITETYPE_COMPOSITECATEGORY");
        });

        modelBuilder.Entity<CF_DOMAIN>(entity =>
        {
            entity.HasKey(e => e.DOMAINCODE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_DOMAIN", "dbo", tb =>
                {
                    tb.HasComment("Defines the domain a composite or fraction can belong to. Helps to protects domain specific attributes. ");
                    tb.HasTrigger("T_CF_DOMAIN_D");
                    tb.HasTrigger("T_CF_DOMAIN_U");
                });

            entity.Property(e => e.DOMAINCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of a composite and fraction domain, ie COALQUALITYV2.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The descriptions of a composite and fraction domain.");
        });

        modelBuilder.Entity<CF_FIELDRULE>(entity =>
        {
            entity.HasKey(e => e.RULE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FIELDRULE", "dbo", tb =>
                {
                    tb.HasComment("Describes the rules how to treat mass proportions. ");
                    tb.HasTrigger("T_CF_FIELDRULE_D");
                    tb.HasTrigger("T_CF_FIELDRULE_IU");
                });

            entity.Property(e => e.RULE)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A unique identifier and brief descriptive rule.");
            entity.Property(e => e.DOMAINCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of a composite or fraction domain, ie COALQUALITYV2.");
            entity.Property(e => e.FIELD)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Defines the field name affected by the rule.");
        });

        modelBuilder.Entity<CF_FRACTION>(entity =>
        {
            entity.HasKey(e => e.FRACTIONID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTION", "dbo", tb =>
                {
                    tb.HasComment("Identifies the fractions present in the database. ");
                    tb.HasTrigger("T_CF_FRACTION_D");
                    tb.HasTrigger("T_CF_FRACTION_I");
                    tb.HasTrigger("T_CF_FRACTION_U");
                });

            entity.HasIndex(e => e.FRACTIONMETHOD, "IDX_CF_FRACTION_01").HasFillFactor(80);

            entity.HasIndex(e => e.LFRACTIONUNITID, "IDX_CF_FRACTION_02").HasFillFactor(80);

            entity.HasIndex(e => e.UFRACTIONUNITID, "IDX_CF_FRACTION_03").HasFillFactor(80);

            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("A unique identifier of a fraction, also primary key.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The verbose descriptions of a fraction.");
            entity.Property(e => e.EXCLUSIVE)
                .HasDefaultValue((byte)0)
                .HasComment("Flag to indicate that fractions of this ID cannot be re-composited.");
            entity.Property(e => e.FRACTIONMETHOD)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The method used to create a fraction.");
            entity.Property(e => e.FRACTIONNAME)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The descriptive name of a fraction.");
            entity.Property(e => e.INCLGLOBALCALC).HasComment("Flag for future use.");
            entity.Property(e => e.LFRACTIONUNITID).HasComment("The unique ID of the lower size limit of a fraction.");
            entity.Property(e => e.REPEATCOUNT).HasComment("The count of a repeated action to create a fraction.");
            entity.Property(e => e.UFRACTIONUNITID).HasComment("The unique ID of the upper size limit of a fraction.");

            entity.HasOne(d => d.FRACTIONMETHODNavigation).WithMany(p => p.CF_FRACTION)
                .HasForeignKey(d => d.FRACTIONMETHOD)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_FRACTION_FRACTIONMETHOD");

            entity.HasOne(d => d.LFRACTIONUNIT).WithMany(p => p.CF_FRACTIONLFRACTIONUNIT)
                .HasForeignKey(d => d.LFRACTIONUNITID)
                .HasConstraintName("FK_CF_FRACTION_LFRACTIONUNITID");

            entity.HasOne(d => d.UFRACTIONUNIT).WithMany(p => p.CF_FRACTIONUFRACTIONUNIT)
                .HasForeignKey(d => d.UFRACTIONUNITID)
                .HasConstraintName("FK_CF_FRACTION_UFRACTIONUNITID");
        });

        modelBuilder.Entity<CF_FRACTIONCATEGORY>(entity =>
        {
            entity.HasKey(e => e.FRACTIONCATEGORY).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTIONCATEGORY", "dbo", tb =>
                {
                    tb.HasComment("Stores the different categories of fraction that exist in the database. Can be used to distinguish fraction sets by methods or modules, e.g. Coal Quality. ");
                    tb.HasTrigger("T_CF_FRACTIONCATEGORY_D");
                    tb.HasTrigger("T_CF_FRACTIONCATEGORY_I");
                    tb.HasTrigger("T_CF_FRACTIONCATEGORY_U");
                });

            entity.Property(e => e.FRACTIONCATEGORY)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("A unique descriptive name of a fraction category.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The verbose descriptions of a fraction category.");
            entity.Property(e => e.DOMAINCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of a composite or fraction domain, ie COALQUALITYV2.");
            entity.Property(e => e.PFRACTIONCATEGORY)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Defines the immediate parent category of a fraction category.");
        });

        modelBuilder.Entity<CF_FRACTIONCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTIONCODE", "dbo", tb =>
                {
                    tb.HasComment("Stores the virtual field names used in the CF_FractionDetails table. ");
                    tb.HasTrigger("T_CF_FRACTIONCODE_IU");
                    tb.HasTrigger("T_CF_FRACTIONCODE_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the data type of a virtual field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The verbose descriptions of a virtual field.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the units used when a numeric data type is used.");

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.CF_FRACTIONCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_FRACTIONCODE_DATATYPE");
        });

        modelBuilder.Entity<CF_FRACTIONCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.FRACTIONID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTIONCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Comments and observations relating to a given fraction. ");
                    tb.HasTrigger("T_CF_FRACTIONCOMMENT_IU");
                });

            entity.HasIndex(e => e.NAME, "IDX_CF_FRACTIONCOMMENT_01").HasFillFactor(80);

            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("A unique identifier and primary key of a fraction.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a virtual field, also part of primary key.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The mandatory value of a virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CF_FRACTIONCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_FRACTIONCOMMENT_CF_FRACTIONCOMMENTCODE");
        });

        modelBuilder.Entity<CF_FRACTIONCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTIONCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Records the current status of an assay sample. ");
                    tb.HasTrigger("T_CF_FRACTIONCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_CF_FRACTIONCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the data type of a virtual field, can only be Text.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The verbose descriptions of a virtual field.");

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.CF_FRACTIONCOMMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_FRACTIONCOMMENTCODE_DATATYPE");
        });

        modelBuilder.Entity<CF_FRACTIONDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.FRACTIONID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTIONDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Contains the data pertaining to the CF_Fraction table. ");
                    tb.HasTrigger("T_CF_FRACTIONDETAILS_IU");
                });

            entity.HasIndex(e => e.NAME, "IDX_CF_FRACTIONDETAILS_01").HasFillFactor(80);

            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("A unique identifier and primary key of a fraction.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a virtual field, also part of primary key.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The mandatory value of a virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CF_FRACTIONDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_FRACTIONDETAILS_FRACTIONCODE");
        });

        modelBuilder.Entity<CF_FRACTIONMETHOD>(entity =>
        {
            entity.HasKey(e => e.FRACTIONMETHOD).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTIONMETHOD", "dbo", tb =>
                {
                    tb.HasComment("Stores in the database the methods used to create fractions. ");
                    tb.HasTrigger("T_CF_FRACTIONMETHOD_D");
                    tb.HasTrigger("T_CF_FRACTIONMETHOD_U");
                });

            entity.HasIndex(e => e.FRACTIONCATEGORY, "IDX_CF_FRACTIONMETHOD_01").HasFillFactor(80);

            entity.HasIndex(e => e.CATEGORYGROUP, "IDX_CF_FRACTIONMETHOD_02");

            entity.Property(e => e.FRACTIONMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("A unique name and primary key of a fraction method.");
            entity.Property(e => e.CATEGORYGROUP)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The fraction category group.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The verbose descriptions of a fraction method.");
            entity.Property(e => e.FRACTIONCATEGORY)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("A unique descriptive name of a fraction category.");
            entity.Property(e => e.LEVELFRACTIONREPEAT).HasComment("A flag to permit repeated use of same FractionID at same level.");
            entity.Property(e => e.METHODORDER).HasComment("The order in which fractionation methods must be applied.");

            entity.HasOne(d => d.FRACTIONCATEGORYNavigation).WithMany(p => p.CF_FRACTIONMETHOD)
                .HasForeignKey(d => d.FRACTIONCATEGORY)
                .HasConstraintName("FK_CF_FRACTIONMETHOD_FRACTIONCATEGORY");
        });

        modelBuilder.Entity<CF_FRACTIONMETHODCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTIONMETHODCODE", "dbo", tb =>
                {
                    tb.HasComment("Stores the virtual field names used in the CF_FRACTIONMETHODDETAILS table. ");
                    tb.HasTrigger("T_CF_FRACTIONMETHODCODE_IU");
                    tb.HasTrigger("T_CF_FRACTIONMETHODCODE_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the data type of a virtual field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The verbose descriptions of a virtual field.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the units used when a numeric data type is used.");

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.CF_FRACTIONMETHODCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_FRACTIONMETHODCODE_DATATYPE");
        });

        modelBuilder.Entity<CF_FRACTIONMETHODCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.FRACTIONMETHOD, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTIONMETHODCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Comments regarding a given fraction method. ");
                    tb.HasTrigger("T_CF_FRACTIONMETHODCOMMENT_IU");
                });

            entity.HasIndex(e => e.NAME, "IDX_CF_FRACTIONMETHODCOMMENT_01").HasFillFactor(80);

            entity.Property(e => e.FRACTIONMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("A unique name and primary key of a fraction method.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a virtual field, also part of primary key.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The mandatory value of a virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CF_FRACTIONMETHODCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_FRACTIONMETHODCOMMENT_CF_FRACTIONMETHODCOMMENTCODE");
        });

        modelBuilder.Entity<CF_FRACTIONMETHODCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTIONMETHODCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Reference table for fraction method comment fields. ");
                    tb.HasTrigger("T_CF_FRACTIONMETHODCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_CF_FRACTIONMETHODCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the data type of a virtual field, can only be Text.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The verbose descriptions of a virtual field.");

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.CF_FRACTIONMETHODCOMMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_FRACTIONMETHODCOMMENTCODE_DATATYPE");
        });

        modelBuilder.Entity<CF_FRACTIONMETHODDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.FRACTIONMETHOD, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTIONMETHODDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Contains the data pertaining to the CF_FRACTIONMETHOD table. ");
                    tb.HasTrigger("T_CF_FRACTIONMETHODDETAILS_IU");
                });

            entity.HasIndex(e => e.NAME, "IDX_CF_FRACTIONMETHODDETAILS_01").HasFillFactor(80);

            entity.Property(e => e.FRACTIONMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("A unique name and primary key of a fraction method.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a virtual field, also part of primary key.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The mandatory value of a virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CF_FRACTIONMETHODDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_FRACTIONMETHODDETAILS_FRACTIONMETHODCODE");
        });

        modelBuilder.Entity<CF_FRACTIONSUITE>(entity =>
        {
            entity.HasKey(e => e.FRACTIONSUITE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTIONSUITE", "dbo", tb => tb.HasComment("Reference table defining fraction suites stored in table FRACTIONSUITEDEFINITION. "));

            entity.Property(e => e.FRACTIONSUITE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A unique name and primary key of a fraction suite.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The verbose descriptions of a fraction suite.");
        });

        modelBuilder.Entity<CF_FRACTIONSUITEDEFINITION>(entity =>
        {
            entity.HasKey(e => new { e.FRACTIONSUITE, e.FRACTIONID }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTIONSUITEDEFINITION", "dbo", tb =>
                {
                    tb.HasComment("Reference table defining the fractions associated with a fraction suite. ");
                    tb.HasTrigger("T_CF_FRACTIONSUITEDEFINITION_IU");
                });

            entity.Property(e => e.FRACTIONSUITE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A unique name and part of the primary key of a fraction suite.");
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("A unique identifier of a fraction, also primary key.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The verbose descriptions of a fraction as part of suite definition.");
            entity.Property(e => e.FIELDORDER).HasComment("The sort order of the FractionID within a Fractionsuite.");

            entity.HasOne(d => d.FRACTIONSUITENavigation).WithMany(p => p.CF_FRACTIONSUITEDEFINITION)
                .HasForeignKey(d => d.FRACTIONSUITE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_FRACTIONSUITEDEFINITION_FRACTIONSUITE");
        });

        modelBuilder.Entity<CF_FRACTIONUNIT>(entity =>
        {
            entity.HasKey(e => e.FRACTIONUNITID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTIONUNIT", "dbo", tb => tb.HasComment("Reference table defining the fraction size limit associated with fractions. "));

            entity.HasIndex(e => e.UNITS, "IDX_CF_FRACTIONUNIT_01").HasFillFactor(80);

            entity.HasIndex(e => new { e.VALUE, e.UNITS }, "UQ_CF_FRACTIONUNIT")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.FRACTIONUNITID)
                .ValueGeneratedNever()
                .HasComment("A unique identifier and  primary key of a fraction unit.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The verbose description of a fraction unit.");
            entity.Property(e => e.UNITS)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unit associated with a fraction size, ie mm or cm.");
            entity.Property(e => e.VALUE)
                .HasComment("The upper or lower fraction size of a defined fraction.")
                .HasColumnType("decimal(10, 5)");

            entity.HasOne(d => d.UNITSNavigation).WithMany(p => p.CF_FRACTIONUNIT)
                .HasForeignKey(d => d.UNITS)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CF_FRACTIONUNIT_UNITS");
        });

        modelBuilder.Entity<CF_FRACTIONUNITIDENTITY>(entity =>
        {
            entity.HasKey(e => e.FRACTIONUNITID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CF_FRACTIONUNITIDENTITY", "dbo", tb => tb.HasComment("A dummy table to generate sequential identifiers. "));

            entity.Property(e => e.DUMMY)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<CHECKASSAY>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO, e.NAME })
                .HasName("PRIMARYKEYCHECKASSAY")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CHECKASSAY", "dbo", tb =>
                {
                    tb.HasComment("CheckAssay stores the analytical results for the check samples. The combination of CheckID, DuplicateNo and Name must be unique in the database. The Values MUST be numeric. ");
                    tb.HasTrigger("T_CA_VAL");
                });

            entity.HasIndex(e => new { e.CHECKID, e.DUPLICATENO }, "IDX_CHECKASSAY_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_CHECKASSAY_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_CHECKASSAY_03").HasFillFactor(80);

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CHECKBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CHECKBIGCOMMENT", "dbo", tb => tb.HasComment("Stores the values for virtual fields related to check samples when long strings are required."));

            entity.HasIndex(e => new { e.CHECKID, e.DUPLICATENO }, "IDX_CHECKBIGCOMMENT_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_CHECKBIGCOMMENT_02").HasFillFactor(80);

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Part of the foreign key to the CHECKSAMPLE table.");
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Part of the foreign key to the CHECKSAMPLE table.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual field and the foreign key to the virtual field lookup table.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The value of the virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CHECKBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CHECKBIGCOMMENT_01");

            entity.HasOne(d => d.CHECKSAMPLE).WithMany(p => p.CHECKBIGCOMMENT)
                .HasForeignKey(d => new { d.CHECKID, d.DUPLICATENO })
                .HasConstraintName("FK_CHECKBIGCOMMENT_02");
        });

        modelBuilder.Entity<CHECKCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CHECKCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Comment table associated with CHECKSAMPLE.");
                    tb.HasTrigger("T_CCM_VAL");
                });

            entity.HasIndex(e => new { e.CHECKID, e.DUPLICATENO }, "IDX_CHECKCOMMENT_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_CHECKCOMMENT_02").HasFillFactor(80);

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CHECKCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CHECKCOMMENT_NAME");
        });

        modelBuilder.Entity<CHECKDESPATCH>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO, e.DESPATCHNO }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CHECKDESPATCH", "dbo", tb =>
                {
                    tb.HasComment("This table associates CheckID with a DespatchNo. ");
                    tb.HasTrigger("T_CHECKDESPATCH_CORP_D");
                    tb.HasTrigger("T_CHECKDESPATCH_CORP_IU");
                    tb.HasTrigger("T_CHECKDESPATCH_D");
                    tb.HasTrigger("T_CKD_CON");
                });

            entity.HasIndex(e => new { e.CHECKID, e.DUPLICATENO }, "IDX_CHECKDESPATCH_01").HasFillFactor(80);

            entity.HasIndex(e => e.DESPATCHNO, "IDX_CHECKDESPATCH_02").HasFillFactor(80);

            entity.HasIndex(e => e.LABJOBNO, "IDX_CHECKDESPATCH_03").HasFillFactor(80);

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CHECKDESPATCHCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO, e.DESPATCHNO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CHECKDESPATCHCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("CheckDespatchComment stores comments on individual samples in a dispatch. The field names are defined in SampleDespatchComCode.Name. ");
                    tb.HasTrigger("T_CHECKDESPATCHCOMMENT_UI");
                });

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CHECKDESPATCHCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CHECKDESPATCHCOMMENT_NAME");
        });

        modelBuilder.Entity<CHECKDESPATCHDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO, e.DESPATCHNO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CHECKDESPATCHDETAILS", "dbo", tb =>
                {
                    tb.HasComment("CheckDespatchDetails stores particulars of individual samples in a dispatch. The field names are defined in SampleDespatchCode.Name. ");
                    tb.HasTrigger("T_CHECKDESPATCHDETAILS_UI");
                });

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CHECKDESPATCHDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CHECKDESPATCHDETAILS_NAME");
        });

        modelBuilder.Entity<CHECKDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CHECKDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Particulars associated with the virtual fields created in SampleCode (they can be defined as either Text, Numeric or Date) related to CheckID are stored in this table. ");
                    tb.HasTrigger("T_CDT_VAL");
                });

            entity.HasIndex(e => new { e.CHECKID, e.DUPLICATENO }, "IDX_CHECKDETAILS_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_CHECKDETAILS_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_CHECKDETAILS_03").HasFillFactor(80);

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CHECKDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CHECKDETAILS");
        });

        modelBuilder.Entity<CHECKGEOBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CHECKGEOBIGCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Only applicable when Fractions are created. See the pages on Composites and Fractions. ");
                    tb.HasTrigger("T_CHECKGEOBIGCOMMENT_IU");
                });

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CHECKGEOBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CHECKGEOBIGCOMMENT_GBCC");
        });

        modelBuilder.Entity<CHECKGEOCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CHECKGEOCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Only applicable when Fractions are created. See the pages on Composites and Fractions. ");
                    tb.HasTrigger("T_CHECKGEOCOMMENT_IU");
                });

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CHECKGEOCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CHECKGEOCOMMENT_GCC");
        });

        modelBuilder.Entity<CHECKGEOLOGY>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CHECKGEOLOGY", "dbo", tb =>
                {
                    tb.HasComment("Only applicable when Fractions are created. See the pages on Composites and Fractions. ");
                    tb.HasTrigger("T_CHECKGEOLOGY_IU");
                });

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CHECKGEOLOGY)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CHECKGEOLOGY_GCS");
        });

        modelBuilder.Entity<CHECKSAMPLE>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO })
                .HasName("PRIMARYKEYCHECKSAMPLE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CHECKSAMPLE", "dbo", tb =>
                {
                    tb.HasComment("CheckSample stores information about check, duplicate and/or standard assay sample numbers. The primary key fields are CheckID and DuplicateNo.  FractionID is only for use with the Composites and Fractions module. ");
                    tb.HasTrigger("LastModifiedUTCheckSample");
                    tb.HasTrigger("T_CHECKSAMPLE_CF_D");
                    tb.HasTrigger("T_CHECKSAMPLE_CF_I");
                    tb.HasTrigger("T_CHECKSAMPLE_CF_U");
                    tb.HasTrigger("T_CHECKSAMPLE_CHECKIDSTANDARDID_IU");
                    tb.HasTrigger("T_CHECKSAMPLE_D");
                    tb.HasTrigger("T_CHECKSAMPLE_DBMOD_CF");
                    tb.HasTrigger("T_CHECKSAMPLE_HIERARCHY_U");
                    tb.HasTrigger("T_CHECKSAMPLE_PROJVAL_U");
                    tb.HasTrigger("T_CS_CAS");
                    tb.HasTrigger("T_CS_CON_I");
                    tb.HasTrigger("T_CS_CON_U");
                });

            entity.HasIndex(e => e.SAMPLEID, "IDX_CHECKSAMPLE_01").HasFillFactor(80);

            entity.HasIndex(e => new { e.PCHECKID, e.PDUPLICATENO }, "IDX_CHECKSAMPLE_02").HasFillFactor(80);

            entity.HasIndex(e => e.CHECKSTAGE, "IDX_CHECKSAMPLE_03").HasFillFactor(80);

            entity.HasIndex(e => e.FRACTIONID, "IDX_CHECKSAMPLE_04").HasFillFactor(80);

            entity.HasIndex(e => e.GLOBALID, "UQ_CHECKSAMPLE_01").IsUnique();

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLOBALID).HasDefaultValueSql("(newsequentialid())");
            entity.Property(e => e.PCHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.CHECKSTAGENavigation).WithMany(p => p.CHECKSAMPLE)
                .HasForeignKey(d => d.CHECKSTAGE)
                .HasConstraintName("FK_CHECKSAMPLE_CHECKSTAGE");
        });

        modelBuilder.Entity<CHECKSTAGE>(entity =>
        {
            entity.HasKey(e => e.CHECKSTAGE1).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CHECKSTAGE", "dbo", tb =>
                {
                    tb.HasComment("A number of stages in the analytical process at which a laboratory can take another check sample are presented in this table. Defining the stage at which the sample was taken will help to quantify the actual result. ");
                    tb.HasTrigger("T_CHECKSTAGE_U");
                });

            entity.Property(e => e.CHECKSTAGE1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CHECKSTAGE");
            entity.Property(e => e.ALIASDESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.STAGEALIAS)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<COMPANY>(entity =>
        {
            entity.HasKey(e => e.COMPANYCODE)
                .HasName("PRIMARYKEYCOMPANY")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("COMPANY", "dbo", tb =>
                {
                    tb.HasComment("Company associates a CompanyCode with a CompanyName. ");
                    tb.HasTrigger("T_COMPANY_UD");
                });

            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.COMPANYNAME)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.COUNTRY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EMAIL)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FAX1)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.FAX2)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.PHONE1)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.PHONE2)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.POSTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STATE)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.STREET)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TOWN)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<COMPANYCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("COMPANYCODE", "dbo", tb =>
                {
                    tb.HasComment("CompanyCode extends columns available in Company via the Companies compound definition. ");
                    tb.HasTrigger("T_COMPANYCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_COMPANYCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.COMPANYCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPANYCODE_DATATYPE");

            entity.HasOne(d => d.UNITSNavigation).WithMany(p => p.COMPANYCODE)
                .HasForeignKey(d => d.UNITS)
                .HasConstraintName("FK_COMPANYCODE_UNITS");
        });

        modelBuilder.Entity<COMPANYCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.COMPANYCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("COMPANYCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("CompanyComment holds values for columns extended by COMPANYCOMMENTCODE. ");
                    tb.HasTrigger("T_COMPANYCOMMENT_UI");
                });

            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.COMPANYCODENavigation).WithMany(p => p.COMPANYCOMMENT)
                .HasForeignKey(d => d.COMPANYCODE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPANYCOMMENT_COMPANYCODE");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.COMPANYCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPANYCOMMENT_NAME");
        });

        modelBuilder.Entity<COMPANYCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("COMPANYCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("CompanyCommentCode extends columns available in Company via the Companies compound definition where no data validation or units are required. ");
                    tb.HasTrigger("T_COMPANYCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_COMPANYCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.COMPANYCOMMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPANYCOMMENTCODE_DATATYPE");
        });

        modelBuilder.Entity<COMPANYDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.COMPANYCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("COMPANYDETAILS", "dbo", tb =>
                {
                    tb.HasComment("CompanyDetails holds values for columns extended by CompanyCode. ");
                    tb.HasTrigger("T_COMPANYDETAILS_UI");
                });

            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.COMPANYCODENavigation).WithMany(p => p.COMPANYDETAILS)
                .HasForeignKey(d => d.COMPANYCODE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPANYDETAILS_COMPANYCODE");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.COMPANYDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPANYDETAILS_NAME");
        });

        modelBuilder.Entity<CONTRACT>(entity =>
        {
            entity.HasKey(e => e.CONTRACTCODE)
                .HasName("PRIMARYKEYCONTRACT")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CONTRACT", "dbo", tb =>
                {
                    tb.HasComment("Contract associates the start and expiry dates of a contract (ContractCode) with a company (CompanyCode). ");
                    tb.HasTrigger("T_AC_CONTRACT_CORE_U");
                    tb.HasTrigger("T_CONTRACT_AC_LOCK_UD");
                    tb.HasTrigger("T_CT_CAS");
                    tb.HasTrigger("T_CT_CON_I");
                    tb.HasTrigger("T_CT_CON_U");
                });

            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.EXPIRYDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.COMPANYCODENavigation).WithMany(p => p.CONTRACT)
                .HasForeignKey(d => d.COMPANYCODE)
                .HasConstraintName("CONTRACT8COMPANY");
        });

        modelBuilder.Entity<CONTRACTCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.CONTRACTCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CONTRACTCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Comment table associated with CONTRACT.");
                    tb.HasTrigger("T_CTC_VAL");
                });

            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CONTRACTCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRACTCOMMENT_CODE");
        });

        modelBuilder.Entity<CONTRACTCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CONTRACTCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with CONTRACTCOMMENT.");
                    tb.HasTrigger("T_CONTRACTCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_CONTRACTCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.CONTRACTCOMMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRACTCOMMENTCODE_DATATYPE");
        });

        modelBuilder.Entity<CONTRACTDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.CONTRACTCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CONTRACTDETAILS", "dbo", tb =>
                {
                    tb.HasComment("ContractDetails associates a contract or a job with a cost. This association is of value to those who are doing cost analysis, budget planning and so on. The Name fields are viewed in ContractRates compound forms. ");
                    tb.HasTrigger("T_CTD_VAL");
                });

            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.CONTRACTDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CDCONTRACT");
        });

        modelBuilder.Entity<CORPASSAYSTATUS>(entity =>
        {
            entity.HasKey(e => e.DSC).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CORPASSAYSTATUS", "dbo", tb => tb.HasComment("Records the current status of an assay sample. "));

            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPASSAYTRANS>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CORPASSAYTRANS", "dbo", tb => tb.HasComment("This table is used to define a relationship between an assay virtual field, a non-numeric analytical result and a numeric translation value for the non-numeric result. A non-numeric results is transformed into the equivalent numeric value when acQuire's BestAssay form definitions are used (either for viewing or exporting data). These translations are dynamically generated when the compounds are used, leaving the original data unchanged."));

            entity.HasIndex(e => new { e.NAME, e.DSC, e.VALUE }, "UQ_CORPASSAYTRANS")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(80);

            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Expected description on the assay result");
            entity.Property(e => e.EXPRULE1).HasComment("Numeric conversion of DSC, or DSC and Value combined.");
            entity.Property(e => e.EXPRULE2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Numeric conversion for exports to GEMS.");
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Assay name used in virtual field.");
            entity.Property(e => e.VALUE).HasComment("Expected assay result");

            entity.HasOne(d => d.DSCNavigation).WithMany()
                .HasForeignKey(d => d.DSC)
                .HasConstraintName("FK_CORPASSAYTRANS_DSC");

            entity.HasOne(d => d.NAMENavigation).WithMany()
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CORPASSAYTRANS_NAME");
        });

        modelBuilder.Entity<CORPASSAYTYPE_CMB>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPASSAYTYPE_CMB", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPASSAYTYPE_LJN>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPASSAYTYPE_LJN", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAMELJN)
                .IsRequired()
                .HasMaxLength(29)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPASSAYTYPE_ODR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPASSAYTYPE_ODR", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.NAMEODR)
                .IsRequired()
                .HasMaxLength(26)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPASSAYTYPE_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPASSAYTYPE_T", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .IsRequired()
                .HasMaxLength(42)
                .IsUnicode(false);
            entity.Property(e => e.NAMET)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPCHECKASSAY>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.NAME, e.DUPLICATENO, e.PRIORITY }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CORPCHECKASSAY", "dbo", tb =>
                {
                    tb.HasComment("CorpCheckAssay stores the analytical results for the check samples. The combination of CheckID, DuplicateNo and Name must be unique in the database. The values must be numeric. ");
                    tb.HasTrigger("LastModifiedUTCorpCheckAssay");
                    tb.HasTrigger("T_CORPCHECKASSAY_CF_D");
                    tb.HasTrigger("T_CORPCHECKASSAY_CF_I");
                    tb.HasTrigger("T_CORPCHECKASSAY_CF_U");
                    tb.HasTrigger("T_CORPCHECKASSAY_IU");
                });

            entity.HasIndex(e => new { e.CHECKID, e.DUPLICATENO }, "IDX_CORPCHECKASSAY_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_CORPCHECKASSAY_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_CORPCHECKASSAY_03").HasFillFactor(80);

            entity.HasIndex(e => e.LABJOBNO, "IDX_CORPCHECKASSAY_04").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.LABJOBNO }, "IDX_CORPCHECKASSAY_05");

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("the tag for the virtual field (virtual field name)");
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PRIORITY)
                .HasDefaultValue(1)
                .HasComment("A value of 1 means accepted, 2 pending and 3+ rejected");
            entity.Property(e => e.ANALYSISORDER).HasComment("The order that samples were analysed in the lab batch");
            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Stores a description on the assay result");
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("ID used by the lab for the lab batch");
            entity.Property(e => e.LOADDATE)
                .HasDefaultValueSql("(getdate())")
                .HasComment("date the assay results was load to the database")
                .HasColumnType("datetime");
            entity.Property(e => e.VALUE).HasComment("Stores the assay result");

            entity.HasOne(d => d.DSCNavigation).WithMany(p => p.CORPCHECKASSAY)
                .HasForeignKey(d => d.DSC)
                .HasConstraintName("FK_CORPCHECKASSAY_CORPASSAYSTATUS");

            entity.HasOne(d => d.CHECKSAMPLE).WithMany(p => p.CORPCHECKASSAY)
                .HasForeignKey(d => new { d.CHECKID, d.DUPLICATENO })
                .HasConstraintName("FK_CORPCHECKASSAY_CHKSAMPLE");
        });

        modelBuilder.Entity<CORPCHECKASSAY_CMB>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPCHECKASSAY_CMB", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPCHECKASSAY_LJN>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPCHECKASSAY_LJN", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAMELJN)
                .IsRequired()
                .HasMaxLength(29)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPCHECKASSAY_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPCHECKASSAY_N", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPCHECKASSAY_ODR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPCHECKASSAY_ODR", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAMEODR)
                .IsRequired()
                .HasMaxLength(26)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPCHECKASSAY_PEND_CMB>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPCHECKASSAY_PEND_CMB", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPCHECKASSAY_PEND_LJN>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPCHECKASSAY_PEND_LJN", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAMELJN)
                .IsRequired()
                .HasMaxLength(29)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPCHECKASSAY_PEND_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPCHECKASSAY_PEND_N", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPCHECKASSAY_PEND_ODR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPCHECKASSAY_PEND_ODR", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAMEODR)
                .IsRequired()
                .HasMaxLength(26)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPCHECKASSAY_PEND_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPCHECKASSAY_PEND_T", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAMET)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPCHECKASSAY_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPCHECKASSAY_T", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAMET)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPLABPROPERTIES>(entity =>
        {
            entity.HasKey(e => new { e.LABJOBNO, e.DESPATCHNO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CORPLABPROPERTIES", "dbo", tb =>
                {
                    tb.HasComment("This table stores properties reported by a laboratory, by assay type, for a despatch.");
                    tb.HasTrigger("T_CORPLABPROPERTIES_D");
                    tb.HasTrigger("T_CORPLABPROPERTIES_IU");
                });

            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Name of the lab method");
            entity.Property(e => e.MESH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PREPARATION1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PREPARATION2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UOM)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Unit of Measure");

            entity.HasOne(d => d.LABANALYSISMETHODNavigation).WithMany(p => p.CORPLABPROPERTIES)
                .HasForeignKey(d => d.LABANALYSISMETHOD)
                .HasConstraintName("FK_ANALYSISMETHOD");

            entity.HasOne(d => d.PREPARATION1Navigation).WithMany(p => p.CORPLABPROPERTIESPREPARATION1Navigation)
                .HasForeignKey(d => d.PREPARATION1)
                .HasConstraintName("FK_PREP1_LP");

            entity.HasOne(d => d.PREPARATION2Navigation).WithMany(p => p.CORPLABPROPERTIESPREPARATION2Navigation)
                .HasForeignKey(d => d.PREPARATION2)
                .HasConstraintName("FK_PREP2_LP");

            entity.HasOne(d => d.UOMNavigation).WithMany(p => p.CORPLABPROPERTIES)
                .HasForeignKey(d => d.UOM)
                .HasConstraintName("FK_UNITS_LP");
        });

        modelBuilder.Entity<CORPSAMPLEASSAY>(entity =>
        {
            entity.HasKey(e => new { e.SAMPLEID, e.NAME, e.PRIORITY }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CORPSAMPLEASSAY", "dbo", tb =>
                {
                    tb.HasComment("CorpSampleAssay stores the analytical results for the samples. The combination of SampleID, Name and Priority must be unique. ");
                    tb.HasTrigger("LastModifiedUTCorpSampleAssay");
                    tb.HasTrigger("T_CORPSAMPLEASSAY_IU");
                });

            entity.HasIndex(e => e.SAMPLEID, "IDX_CORPSAMPLEASSAY_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_CORPSAMPLEASSAY_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_CORPSAMPLEASSAY_03").HasFillFactor(80);

            entity.HasIndex(e => e.LABJOBNO, "IDX_CORPSAMPLEASSAY_04").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.LABJOBNO }, "IDX_CORPSAMPLEASSAY_05");

            entity.HasIndex(e => e.LABJOBNO, "INdex_OPT").HasFillFactor(80);

            entity.HasIndex(e => e.PRIORITY, "RHDBA_IDX_02").HasFillFactor(80);

            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("the tag for the virtual field (virtual field name)");
            entity.Property(e => e.PRIORITY)
                .HasDefaultValue(1)
                .HasComment("A value of 1 means accepted, 2 pending and 3+ rejected");
            entity.Property(e => e.ANALYSISORDER).HasComment("The order that samples were analysed in the lab batch");
            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Stores a description on the assay result");
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("ID used by the lab for the lab batch");
            entity.Property(e => e.LOADDATE)
                .HasDefaultValueSql("(getdate())")
                .HasComment("date the assay results was load to the database")
                .HasColumnType("datetime");
            entity.Property(e => e.VALUE).HasComment("Stores the assay result");

            entity.HasOne(d => d.DSCNavigation).WithMany(p => p.CORPSAMPLEASSAY)
                .HasForeignKey(d => d.DSC)
                .HasConstraintName("FK_CORPSAMPLEASSAY_CORPASSAYSTATUS");

            entity.HasOne(d => d.SAMPLE).WithMany(p => p.CORPSAMPLEASSAY)
                .HasForeignKey(d => d.SAMPLEID)
                .HasConstraintName("FK_CORPSAMPLEASSAY_SAMPLE");
        });

        modelBuilder.Entity<CORPSAMPLEASSAY_CMB>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPSAMPLEASSAY_CMB", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPSAMPLEASSAY_LJN>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPSAMPLEASSAY_LJN", "dbo");

            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAMELJN)
                .IsRequired()
                .HasMaxLength(29)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPSAMPLEASSAY_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPSAMPLEASSAY_N", "dbo");

            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPSAMPLEASSAY_ODR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPSAMPLEASSAY_ODR", "dbo");

            entity.Property(e => e.NAMEODR)
                .IsRequired()
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPSAMPLEASSAY_PEND_CMB>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPSAMPLEASSAY_PEND_CMB", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPSAMPLEASSAY_PEND_LJN>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPSAMPLEASSAY_PEND_LJN", "dbo");

            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAMELJN)
                .IsRequired()
                .HasMaxLength(29)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPSAMPLEASSAY_PEND_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPSAMPLEASSAY_PEND_N", "dbo");

            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPSAMPLEASSAY_PEND_ODR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPSAMPLEASSAY_PEND_ODR", "dbo");

            entity.Property(e => e.NAMEODR)
                .IsRequired()
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPSAMPLEASSAY_PEND_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPSAMPLEASSAY_PEND_T", "dbo");

            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAMET)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CORPSAMPLEASSAY_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CORPSAMPLEASSAY_T", "dbo");

            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAMET)
                .IsRequired()
                .HasMaxLength(24)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<COST>(entity =>
        {
            entity.HasKey(e => e.COSTCODE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("COST", "dbo", tb =>
                {
                    tb.HasComment("A code applied to a number of different objects allowing them to be grouped based on cost.");
                    tb.HasTrigger("T_C_CAS");
                    tb.HasTrigger("T_C_CON");
                });

            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<COSTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME)
                .HasName("PrK_COSTCODE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("COSTCODE", "dbo", tb =>
                {
                    tb.HasComment("The virtual fields for the CostCode compound forms are stored in this table. The virtual fields are defined with the Virtual Field Wizard. ");
                    tb.HasTrigger("T_COSTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_COSTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.COSTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COSTCODE_DATATYPE");
        });

        modelBuilder.Entity<COSTCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.COSTCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("COSTCOMMENT", "dbo", tb =>
                {
                    tb.HasComment(" Data loading order: 4 ");
                    tb.HasTrigger("T_CSC_VAL");
                });

            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.COSTCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COSTCOMMENT_CODE");
        });

        modelBuilder.Entity<COSTCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("COSTCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with COSTCOMMENT.");
                    tb.HasTrigger("T_COSTCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_COSTCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.COSTCOMMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COSTCOMMENTCODE_DATATYPE");
        });

        modelBuilder.Entity<COSTDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.COSTCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("COSTDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Details table associated with COST.");
                    tb.HasTrigger("T_CSD_VAL");
                });

            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.COSTDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COSTDETAILSCODE");
        });

        modelBuilder.Entity<CacheGroup>(entity =>
        {
            entity.HasKey(e => e.CacheGroupId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CacheGroup", "AcqPresentation", tb => tb.HasComment("Aggregates a number of AcqPresentation.ViewCompounds into a group that will be cached at specified intervals."));

            entity.HasIndex(e => e.Label, "UQ_CacheGroup_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.CacheGroupId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("The description of the cache group. This may be null.");
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The label for the cache group.");
            entity.Property(e => e.ScheduleId).HasComment("The ID of a record in the AcqManagement.Schedule table that determines when the linked ViewCompounds will be cached.");

            entity.HasOne(d => d.Schedule).WithMany(p => p.CacheGroup)
                .HasForeignKey(d => d.ScheduleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CacheGroup_01");

            entity.HasMany(d => d.Log).WithMany(p => p.CacheGroup)
                .UsingEntity<Dictionary<string, object>>(
                    "CacheGroupLog",
                    r => r.HasOne<Log>().WithMany()
                        .HasForeignKey("LogId")
                        .HasConstraintName("FK_CacheGroupLog_02"),
                    l => l.HasOne<CacheGroup>().WithMany()
                        .HasForeignKey("CacheGroupId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CacheGroupLog_01"),
                    j =>
                    {
                        j.HasKey("CacheGroupId", "LogId").HasAnnotation("SqlServer:FillFactor", 80);
                        j.ToTable("CacheGroupLog", "AcqPresentation", tb => tb.HasComment("Joining table that links cache groups to log messages that are relevant to that cache group."));
                        j.IndexerProperty<int>("CacheGroupId").HasComment("The ID of a record in AcqPresentation.CacheGroup.");
                        j.IndexerProperty<long>("LogId").HasComment("The ID of a record in AcqManagement.Log.");
                    });
        });

        modelBuilder.Entity<CacheGroupViewCompound>(entity =>
        {
            entity.HasKey(e => new { e.CacheGroupId, e.ViewCompoundId }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CacheGroupViewCompound", "AcqPresentation", tb => tb.HasComment("Joining table that links ViewCompounds into groups that are scheduled for caching."));

            entity.HasIndex(e => e.ViewCompoundId, "UQ_CacheGroupViewCompound_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.CacheGroupId).HasComment("The ID of a record in AcqPresentation.CacheGroup.");
            entity.Property(e => e.ViewCompoundId).HasComment("The ID of a record in AcqPresentation.ViewCompound.");
            entity.Property(e => e.LastStartTime)
                .HasComment("The last time that caching for the view compound started.")
                .HasColumnType("datetime");
            entity.Property(e => e.LastSuccessfulTime)
                .HasComment("The last time that caching for the view compound completed successfully.")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CacheGroup).WithMany(p => p.CacheGroupViewCompound)
                .HasForeignKey(d => d.CacheGroupId)
                .HasConstraintName("FK_CacheGroupViewCompound_01");

            entity.HasOne(d => d.ViewCompound).WithOne(p => p.CacheGroupViewCompound)
                .HasForeignKey<CacheGroupViewCompound>(d => d.ViewCompoundId)
                .HasConstraintName("FK_CacheGroupViewCompound_02");
        });

        modelBuilder.Entity<Canvas>(entity =>
        {
            entity.HasKey(e => e.CanvasId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Canvas", "AcqPresentation", tb =>
                {
                    tb.HasComment("Details information pertaining to a saved canvas.");
                    tb.HasTrigger("T_Canvas_IU");
                    tb.HasTrigger("T_Canvas_OD");
                });

            entity.Property(e => e.CanvasId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.CanvasData)
                .IsRequired()
                .HasComment("The xml data comprising the canvas.")
                .HasColumnType("xml");
            entity.Property(e => e.CreatorId).HasComment("The Creator of the canvas.");
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("The Label for the canvas.");

            entity.HasOne(d => d.Creator).WithMany(p => p.Canvas)
                .HasForeignKey(d => d.CreatorId)
                .HasConstraintName("FK_Canvas_01");

            entity.HasMany(d => d.UserObjectCategory).WithMany(p => p.Canvas)
                .UsingEntity<Dictionary<string, object>>(
                    "CanvasUserObjectCategory",
                    r => r.HasOne<UserObjectCategory>().WithMany()
                        .HasForeignKey("UserObjectCategoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CanvasUserObjectCategory_02"),
                    l => l.HasOne<Canvas>().WithMany()
                        .HasForeignKey("CanvasId")
                        .HasConstraintName("FK_CanvasUserObjectCategory_01"),
                    j =>
                    {
                        j.HasKey("CanvasId", "UserObjectCategoryId").HasAnnotation("SqlServer:FillFactor", 80);
                        j.ToTable("CanvasUserObjectCategory", "AcqPresentation", tb =>
                            {
                                tb.HasComment("Allows relating of Canvasses to User Object Categories.");
                                tb.HasTrigger("T_CanvasUserObjectCategory_D");
                                tb.HasTrigger("T_CanvasUserObjectCategory_IU");
                            });
                        j.IndexerProperty<int>("CanvasId").HasComment("The primary key of the Canvas.");
                        j.IndexerProperty<int>("UserObjectCategoryId").HasComment("The primary key of the User Object Category.");
                    });
        });

        modelBuilder.Entity<Compound>(entity =>
        {
            entity.HasKey(e => e.CompoundId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Compound", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the compounds the meta system is aware of.");
                    tb.HasTrigger("T_Compound_IUD");
                    tb.HasTrigger("T_Compound_OD");
                });

            entity.HasIndex(e => e.Name, "UQ_Compound_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.CompoundId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.CompoundBehaviourTypeId)
                .HasDefaultValue(1)
                .HasComment("The Compound Behaviour Type of this compound.");
            entity.Property(e => e.CompoundLevelId).HasComment("The Compound Level representing the level as defined in CompoundLevel for this compound.");
            entity.Property(e => e.CompoundStyle)
                .HasMaxLength(20)
                .HasComment("The compound style (e.g. Reference, Data).");
            entity.Property(e => e.CompoundType)
                .HasMaxLength(100)
                .HasComment("The type of the compound, is the compound a System or User Compound.");
            entity.Property(e => e.DataSourceId)
                .HasDefaultValueSql("([AcqMetaSystem].[GetManualDataSourceId]())")
                .HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.FieldAttributesRequired)
                .HasDefaultValue(true)
                .HasComment("Whether or not attributes for fields in this compound need to be loaded to support business logic.");
            entity.Property(e => e.FilterCondition)
                .HasComment("The XML representing the optional filter condition to apply to all queries against this compound.")
                .HasColumnType("xml");
            entity.Property(e => e.Flags).HasComment("Integer packed set of boolean compound flags.");
            entity.Property(e => e.GroupByBaseTableFields).HasComment("Flag representing if the compound should be grouped by its base table fields. This is to flag acQuire 4.x self joining compounds.");
            entity.Property(e => e.HideRowWhenNoVirtual).HasComment("Flag representing if a compound row should be hidden when there are no virtual fields values.");
            entity.Property(e => e.IsSecured).HasComment("Whether entities in this compound can be secured.");
            entity.Property(e => e.IsSingleTable).HasComment("Is this compound based on a single table.");
            entity.Property(e => e.Label)
                .HasMaxLength(200)
                .HasComment("The Label of the compound to be used for display purposes.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The Name of the compound.");
            entity.Property(e => e.ParentCompoundId).HasComment("Id of the parent compound from which this is derived.");

            entity.HasOne(d => d.CompoundBehaviourType).WithMany(p => p.Compound)
                .HasForeignKey(d => d.CompoundBehaviourTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Compound_04");

            entity.HasOne(d => d.CompoundLevel).WithMany(p => p.Compound)
                .HasForeignKey(d => d.CompoundLevelId)
                .HasConstraintName("FK_Compound_01");

            entity.HasOne(d => d.DataSource).WithMany(p => p.Compound)
                .HasForeignKey(d => d.DataSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Compound_03");

            entity.HasOne(d => d.ParentCompound).WithMany(p => p.InverseParentCompound)
                .HasForeignKey(d => d.ParentCompoundId)
                .HasConstraintName("FK_Compound_05");

            entity.HasOne(d => d.Template).WithMany(p => p.Compound)
                .HasForeignKey(d => d.TemplateId)
                .HasConstraintName("FK_Adm_Compound_01");

            entity.HasMany(d => d.PropertyObjectGlobal).WithMany(p => p.Compound)
                .UsingEntity<Dictionary<string, object>>(
                    "CompoundPropertyObject",
                    r => r.HasOne<PropertyObject>().WithMany()
                        .HasForeignKey("PropertyObjectGlobalId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AcqMetaSystem_CompoundProperty_02"),
                    l => l.HasOne<Compound>().WithMany()
                        .HasForeignKey("CompoundId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AcqMetaSystem_CompoundPropertyObject_01"),
                    j =>
                    {
                        j.HasKey("CompoundId", "PropertyObjectGlobalId").HasName("PK_AcqMetaSystem_CompoundPropertyObject");
                        j.ToTable("CompoundPropertyObject", "AcqMetaSystem", tb => tb.HasComment("References between compounds and property objects."));
                        j.HasIndex(new[] { "PropertyObjectGlobalId" }, "IDX_CompoundPropertyObject_01");
                        j.IndexerProperty<int>("CompoundId").HasComment("The compound depending on the property object.");
                        j.IndexerProperty<Guid>("PropertyObjectGlobalId").HasComment("The property object being referenced.");
                    });
        });

        modelBuilder.Entity<CompoundAttribute>(entity =>
        {
            entity.HasKey(e => e.CompoundAttributeId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CompoundAttribute", "AcqMetaSystem", tb => tb.HasComment("Details attributes on a compound."));

            entity.Property(e => e.CompoundAttributeId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.AttributeType)
                .IsRequired()
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasComment("The type of attribute.");
            entity.Property(e => e.CompoundId).HasComment("The main compound which this compound attribute is based on.");
            entity.Property(e => e.DataSourceId)
                .HasDefaultValueSql("([AcqMetaSystem].[GetManualDataSourceId]())")
                .HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.Definition)
                .IsRequired()
                .HasComment("XML definition of the attribute.")
                .HasColumnType("xml");

            entity.HasOne(d => d.Compound).WithMany(p => p.CompoundAttribute)
                .HasForeignKey(d => d.CompoundId)
                .HasConstraintName("FK_CompoundAttribute_01");

            entity.HasOne(d => d.DataSource).WithMany(p => p.CompoundAttribute)
                .HasForeignKey(d => d.DataSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompoundAttribute_02");
        });

        modelBuilder.Entity<CompoundBehaviourType>(entity =>
        {
            entity.HasKey(e => e.CompoundBehaviourTypeId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CompoundBehaviourType", "AcqMetaSystem", tb => tb.HasComment("Details the type of behaviour to be associated with a compound."));

            entity.HasIndex(e => e.Name, "UQ_CompoundBehaviourType_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.CompoundBehaviourTypeId)
                .ValueGeneratedNever()
                .HasComment("The unique identifier of this behaviour type.");
            entity.Property(e => e.Description).HasComment("The description relating to this compound behaviour type.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasComment("The name for this compound behaviour type.");
        });

        modelBuilder.Entity<CompoundField>(entity =>
        {
            entity.HasKey(e => e.CompoundFieldId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CompoundField", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the fields for each compound.");
                    tb.HasTrigger("T_CompoundField_IU");
                    tb.HasTrigger("T_CompoundField_OD");
                });

            entity.HasIndex(e => e.AdmDerivedFieldId, "IDX_ADM_CompoundField_01").HasFillFactor(80);

            entity.HasIndex(e => new { e.CompoundId, e.Name }, "IDX_CompoundField_01").HasFillFactor(80);

            entity.HasIndex(e => new { e.CompoundId, e.DatabaseTableId, e.TableContext }, "IDX_CompoundField_02").HasFillFactor(80);

            entity.HasIndex(e => e.Name, "IDX_CompoundField_03").HasFillFactor(80);

            entity.HasIndex(e => e.DatabaseColumnId, "IDX_CompoundField_04").HasFillFactor(80);

            entity.HasIndex(e => e.VirtualFieldId, "IDX_CompoundField_05").HasFillFactor(80);

            entity.HasIndex(e => new { e.CompoundId, e.Name }, "UQ_CompoundField_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.CompoundFieldId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.CompoundId).HasComment("The Compound this field belongs to.");
            entity.Property(e => e.DataSourceId)
                .HasDefaultValueSql("([AcqMetaSystem].[GetManualDataSourceId]())")
                .HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.DatabaseColumnId).HasComment("The Database Column that this field relates to, only populated for fixed fields.");
            entity.Property(e => e.DatabaseTableId).HasComment("The Database Table that houses this field, this will not be populated for derived fields.");
            entity.Property(e => e.DefaultValue)
                .HasComment("An xml encoded constant expression to be used as the default value for the field.")
                .HasColumnType("xml");
            entity.Property(e => e.DerivedFieldExpression)
                .HasComment("The expression outlining the construction of a derived field.")
                .HasColumnType("xml");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .HasComment("An optional description of the purpose of the field.");
            entity.Property(e => e.FieldExpressionId).HasComment("For cases where type is \"Derived\", this is a link to the expression in the expression table (not implemented yet).");
            entity.Property(e => e.FieldTypeId).HasComment("The related field type, which defines the fields datatype and other meta data about the field.");
            entity.Property(e => e.IsReadOnly).HasComment("Is the data for this field read only.");
            entity.Property(e => e.IsShown).HasComment("Is this field shown to the users.");
            entity.Property(e => e.Label)
                .HasMaxLength(200)
                .HasComment("The Label of the compound field to be used for display purposes.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The Name of the compound field.");
            entity.Property(e => e.OrderNumber).HasComment("The Order in which these fields should be displayed for a compound.");
            entity.Property(e => e.TableContext)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The Table Context, PrimaryBase, Base, Virtual, Derived. Representing both the field and its table.");
            entity.Property(e => e.VirtualFieldId).HasComment("The Virtual Field this field relatess to, only populated for virtual fields.");

            entity.HasOne(d => d.AdmDerivedField).WithMany(p => p.CompoundField)
                .HasForeignKey(d => d.AdmDerivedFieldId)
                .HasConstraintName("FK_Adm_CompoundField_01");

            entity.HasOne(d => d.Compound).WithMany(p => p.CompoundField)
                .HasForeignKey(d => d.CompoundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompoundField_02");

            entity.HasOne(d => d.DataSource).WithMany(p => p.CompoundField)
                .HasForeignKey(d => d.DataSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompoundField_06");

            entity.HasOne(d => d.DatabaseColumn).WithMany(p => p.CompoundField)
                .HasForeignKey(d => d.DatabaseColumnId)
                .HasConstraintName("FK_CompoundField_03");

            entity.HasOne(d => d.DatabaseTable).WithMany(p => p.CompoundField)
                .HasForeignKey(d => d.DatabaseTableId)
                .HasConstraintName("FK_CompoundField_07");

            entity.HasOne(d => d.FieldType).WithMany(p => p.CompoundField)
                .HasForeignKey(d => d.FieldTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompoundField_04");

            entity.HasOne(d => d.VirtualField).WithMany(p => p.CompoundField)
                .HasForeignKey(d => d.VirtualFieldId)
                .HasConstraintName("FK_CompoundField_05");

            entity.HasMany(d => d.AdmDerivedFieldParameter).WithMany(p => p.CompoundField)
                .UsingEntity<Dictionary<string, object>>(
                    "AdmDerivedFieldArgument",
                    r => r.HasOne<AdmDerivedFieldParameter>().WithMany()
                        .HasForeignKey("AdmDerivedFieldParameterId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AdmDerivedFieldArgument_01"),
                    l => l.HasOne<CompoundField>().WithMany()
                        .HasForeignKey("CompoundFieldId")
                        .HasConstraintName("FK_AdmDerivedFieldArgument_02"),
                    j =>
                    {
                        j.HasKey("CompoundFieldId", "AdmDerivedFieldParameterId").HasAnnotation("SqlServer:FillFactor", 80);
                        j.ToTable("AdmDerivedFieldArgument", "AcqMetaSystem", tb => tb.HasComment("Details the links between Compound Fields and the relevant Derived Field Parameters."));
                        j.IndexerProperty<int>("CompoundFieldId").HasComment("The Compound Field that this Derived Field Parameter is linked to.");
                        j.IndexerProperty<int>("AdmDerivedFieldParameterId").HasComment("The Derived Field Parameter to link to the Compound Field.");
                    });

            entity.HasMany(d => d.FieldAttribute).WithMany(p => p.CompoundField)
                .UsingEntity<Dictionary<string, object>>(
                    "CompoundFieldFieldAttribute",
                    r => r.HasOne<FieldAttribute>().WithMany()
                        .HasForeignKey("FieldAttributeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CompoundFieldFieldAttribute_01"),
                    l => l.HasOne<CompoundField>().WithMany()
                        .HasForeignKey("CompoundFieldId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CompoundFieldFieldAttribute_02"),
                    j =>
                    {
                        j.HasKey("CompoundFieldId", "FieldAttributeId").HasAnnotation("SqlServer:FillFactor", 80);
                        j.ToTable("CompoundFieldFieldAttribute", "AcqMetaSystem", tb => tb.HasComment("Details the attributes related to a field."));
                        j.IndexerProperty<int>("CompoundFieldId").HasComment("The Field to link to attributes.");
                        j.IndexerProperty<int>("FieldAttributeId").HasComment("The Attributes to link to the field.");
                    });
        });

        modelBuilder.Entity<CompoundFlags>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CompoundFlags", "AcqMetaSystem");

            entity.Property(e => e.FlagName)
                .IsRequired()
                .HasMaxLength(29)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CompoundKeyAttribute>(entity =>
        {
            entity.HasKey(e => new { e.CompoundId, e.Key, e.Value }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CompoundKeyAttribute", "AcqMetaSystem", tb => tb.HasComment("Contains Key/Value attributes for compounds."));

            entity.Property(e => e.CompoundId).HasComment("The id of the Compound to which the attribute applies.");
            entity.Property(e => e.Key).HasMaxLength(100);
            entity.Property(e => e.Value).HasMaxLength(256);
            entity.Property(e => e.DataSourceId).HasComment("The id of the source system for the row.");

            entity.HasOne(d => d.Compound).WithMany(p => p.CompoundKeyAttribute)
                .HasForeignKey(d => d.CompoundId)
                .HasConstraintName("FK_CompoundKeyAttribute_01");
        });

        modelBuilder.Entity<CompoundLevel>(entity =>
        {
            entity.HasKey(e => e.CompoundLevelId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CompoundLevel", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the level of the compound, is it a table, a compound, etc.");
                    tb.HasTrigger("T_CompoundLevel_OD");
                });

            entity.HasIndex(e => e.Name, "UQ_CompoundLevel_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.CompoundLevelId)
                .ValueGeneratedNever()
                .HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The Name of the Compound Level.");
            entity.Property(e => e.OrderNumber).HasComment("The Order in which the compound levels should be represented.");
        });

        modelBuilder.Entity<CompoundSelfRelationshipDetails>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CompoundSelfRelationshipDetails", "AcqMetaSystem");

            entity.Property(e => e.CompoundName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.JoinCondition)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.RelationshipDirection)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CompoundTable>(entity =>
        {
            entity.HasKey(e => new { e.CompoundId, e.DatabaseTableId, e.TableContext }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CompoundTable", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the relationship between a compound and the Database tables comprising it.");
                    tb.HasTrigger("T_CompoundTable_OD");
                });

            entity.Property(e => e.CompoundId).HasComment("The Compound.");
            entity.Property(e => e.DatabaseTableId).HasComment("The Database Table comprising the compound.");
            entity.Property(e => e.TableContext)
                .HasMaxLength(100)
                .HasComment("How the database table forms part of the compound, supporting \"Primary Base\", \"Base\", and \"Virtual\".");
            entity.Property(e => e.VirtualFieldNameExpression)
                .HasComment("Where TableContext is \"Virtual\", an optional xml expression defining the link between this virtual value table and AcqMetaSystem.VirtualField.Name.")
                .HasColumnType("xml");

            entity.HasOne(d => d.Compound).WithMany(p => p.CompoundTable)
                .HasForeignKey(d => d.CompoundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompoundTable_01");

            entity.HasOne(d => d.DatabaseTable).WithMany(p => p.CompoundTable)
                .HasForeignKey(d => d.DatabaseTableId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompoundTable_02");
        });

        modelBuilder.Entity<CompoundTableRelationship>(entity =>
        {
            entity.HasKey(e => new { e.CompoundId, e.DatabaseTableId, e.TableContext, e.OrderNumber }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CompoundTableRelationship", "AcqMetaSystem", tb => tb.HasComment("Details the relationship chain between the non primary base tables and the primary base table in a compound."));

            entity.Property(e => e.CompoundId).HasComment("The Compound.");
            entity.Property(e => e.DatabaseTableId).HasComment("The Database Table.");
            entity.Property(e => e.TableContext)
                .HasMaxLength(100)
                .HasComment("The Context of the database table, virtual, or base.");
            entity.Property(e => e.OrderNumber).HasComment("The Order in which the relationships are applied to link to the primary base table.");
            entity.Property(e => e.RelationshipId).HasComment("The Relationships that will allow linking back to the Primary Base table.");

            entity.HasOne(d => d.Relationship).WithMany(p => p.CompoundTableRelationship)
                .HasForeignKey(d => d.RelationshipId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompoundTableRelationship_02");

            entity.HasOne(d => d.CompoundTable).WithMany(p => p.CompoundTableRelationship)
                .HasForeignKey(d => new { d.CompoundId, d.DatabaseTableId, d.TableContext })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompoundTableRelationship_01");
        });

        modelBuilder.Entity<CompoundUniqueness>(entity =>
        {
            entity.HasKey(e => e.CompoundUniquenessId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CompoundUniqueness", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the unique key combinations for each compound.");
                    tb.HasTrigger("T_CompoundUniqueness_OD");
                });

            entity.HasIndex(e => e.CompoundId, "IDX_CompoundUniqueness_01").HasFillFactor(80);

            entity.HasIndex(e => e.Name, "UQ_CompoundUniqueness_01").IsUnique();

            entity.Property(e => e.CompoundUniquenessId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.CompoundId).HasComment("The Compound this uniqueness relates to.");
            entity.Property(e => e.ConstraintName)
                .HasMaxLength(500)
                .HasComment("For compound uniquenesses based on a database constraint, the constraint name.");
            entity.Property(e => e.DataSourceId)
                .HasDefaultValueSql("([AcqMetaSystem].[GetManualDataSourceId]())")
                .HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.FilterCondition)
                .HasComment("For all records where this condition is met the uniqueness is enforced.")
                .HasColumnType("xml");
            entity.Property(e => e.IsGlobalId).HasComment("Whether or not this uniqueness represents the global identifier of the data in the compound.");
            entity.Property(e => e.IsLocalId).HasComment("Whether or not this uniqueness represents the primary local unique identifier of the data in the compound.");
            entity.Property(e => e.IsNaturalKey).HasComment("Whether or not this uniqueness represents the natural key of the data in the compound. Generally this will be the same as the primary and unique key, except when a surrogate key system is in use.");
            entity.Property(e => e.IsPhysicalOrder).HasComment("Whether or not this uniqueness represents the physical order of the data in the table (i.e. whether or not it is the clustered index).");
            entity.Property(e => e.IsPrimaryKey).HasComment("Is this unique key the primary key.");
            entity.Property(e => e.IsUniqueId).HasComment("Whether or not this uniqueness should be the uniqueness used to uniquely identify records in this table by the system. Generally this is the primary key, but could be a unique key in the absence of a primary key.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasComment("A unique name generated for this uniqueness. This is based on the Name of the compound, and the keys making comprising uniqueness.");

            entity.HasOne(d => d.Compound).WithMany(p => p.CompoundUniqueness)
                .HasForeignKey(d => d.CompoundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompoundUniqueness_01");
        });

        modelBuilder.Entity<CompoundUniquenessField>(entity =>
        {
            entity.HasKey(e => new { e.CompoundUniquenessId, e.CompoundFieldId }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CompoundUniquenessField", "AcqMetaSystem", tb => tb.HasComment("Details the fields/relationships comprising a unique key combination."));

            entity.HasIndex(e => e.CompoundFieldId, "IDX_CompoundUniquenessField_01").HasFillFactor(80);

            entity.HasIndex(e => new { e.CompoundUniquenessId, e.OrderNumber }, "UQ_CompoundUniquenessField_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.CompoundUniquenessId).HasComment("The primary key of the uniqueness to which this uniqueness field belongs.");
            entity.Property(e => e.CompoundFieldId).HasComment("The compound field for this compound uniqueness field. This may be a derived field from a related compound.");
            entity.Property(e => e.IsDescending).HasComment("Whether or not this field in the uniqueness is descending in it's physical order.");
            entity.Property(e => e.OrderNumber).HasComment("The order number of the uniqueness field within the given uniqueness.");
            entity.Property(e => e.RelationshipId).HasComment("The relationship to a related compound for this compound uniqueness item.");
            entity.Property(e => e.RootCompoundFieldId).HasComment("The original compound field from the root compound.");

            entity.HasOne(d => d.CompoundField).WithMany(p => p.CompoundUniquenessField)
                .HasForeignKey(d => d.CompoundFieldId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompoundUniquenessField_01");

            entity.HasOne(d => d.CompoundUniqueness).WithMany(p => p.CompoundUniquenessField)
                .HasForeignKey(d => d.CompoundUniquenessId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompoundUniquenessField_02");

            entity.HasOne(d => d.Relationship).WithMany(p => p.CompoundUniquenessField)
                .HasForeignKey(d => d.RelationshipId)
                .HasConstraintName("FK_CompoundUniquenessField_03");
        });

        modelBuilder.Entity<CompoundUserObjectCategory>(entity =>
        {
            entity.HasKey(e => new { e.CompoundId, e.UserObjectCategoryId }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CompoundUserObjectCategory", "AcqPresentation", tb => tb.HasComment("Allows relating of Compounds to User Object Categories."));

            entity.HasIndex(e => new { e.UserObjectCategoryId, e.OrderNumber }, "UQ_CompoundUserObjectCategory_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.CompoundId).HasComment("The primary key of the Compound.");
            entity.Property(e => e.UserObjectCategoryId).HasComment("The primary key of the User Object Category.");
            entity.Property(e => e.DefaultGroupingAttribute)
                .HasMaxLength(200)
                .HasComment("An optional attribute of the given compound which fields in the compound should be grouped by, by default.");
            entity.Property(e => e.OrderNumber).HasComment("The order in which the Compound should be listed within the User Object Category.");

            entity.HasOne(d => d.Compound).WithMany(p => p.CompoundUserObjectCategory)
                .HasForeignKey(d => d.CompoundId)
                .HasConstraintName("FK_CompoundUserObjectCategory_01");

            entity.HasOne(d => d.UserObjectCategory).WithMany(p => p.CompoundUserObjectCategory)
                .HasForeignKey(d => d.UserObjectCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompoundUserObjectCategory_02");
        });

        modelBuilder.Entity<CompoundValidationExclusion>(entity =>
        {
            entity.HasKey(e => e.Label).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CompoundValidationExclusion", "AcqMetaSystem", tb => tb.HasTrigger("T_CompoundValidationExclusion_IUD"));

            entity.Property(e => e.Label).HasMaxLength(200);
        });

        modelBuilder.Entity<CoordinateMethod>(entity =>
        {
            entity.ToTable("CoordinateMethod", "AcqCoordinates", tb => tb.HasComment("The method used to determine a set of coordinates."));

            entity.HasIndex(e => e.Name, "UQ_CoordinateMethod_01").IsUnique();

            entity.HasIndex(e => e.Rank, "UQ_CoordinateMethod_02").IsUnique();

            entity.Property(e => e.CoordinateMethodId).HasComment("The auto incrementing primary key.");
            entity.Property(e => e.Description).HasComment("A description of this coordinate method.");
            entity.Property(e => e.IsSurveyed).HasComment("The survey state.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("The unique name given to the method.");
            entity.Property(e => e.Rank).HasComment("A number indicating the preference of the survey method.  The lower the number the more preferential giving a higher ranking.");
        });

        modelBuilder.Entity<CoordinateSystem>(entity =>
        {
            entity.ToTable("CoordinateSystem", "AcqCoordinates", tb => tb.HasComment("The coordinate system employed for coordinates."));

            entity.HasIndex(e => e.Name, "UQ_CoordinateSystem_01").IsUnique();

            entity.Property(e => e.CoordinateSystemId).HasComment("The auto incrementing primary key.");
            entity.Property(e => e.DatumId).HasComment("Id of the datum used by the system.");
            entity.Property(e => e.Definition)
                .IsRequired()
                .HasComment("The XML definition of the coordinate system.")
                .HasColumnType("xml");
            entity.Property(e => e.Description).HasComment("A description of the coordinate system.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The unique name given to the coordinate system.");
            entity.Property(e => e.ProjectionId).HasComment("Id of the projection used by the system.");

            entity.HasOne(d => d.Datum).WithMany(p => p.CoordinateSystem)
                .HasForeignKey(d => d.DatumId)
                .HasConstraintName("FK_CoordinateSystem_02");

            entity.HasOne(d => d.Projection).WithMany(p => p.CoordinateSystem)
                .HasForeignKey(d => d.ProjectionId)
                .HasConstraintName("FK_CoordinateSystem_01");
        });

        modelBuilder.Entity<Coordinates>(entity =>
        {
            entity.ToTable("Coordinates", "AcqCoordinates", tb => tb.HasComment("Stores data for all types of hole."));

            entity.HasIndex(e => e.EntityId, "IDX_Coordinates_01");

            entity.HasIndex(e => new { e.CoordinateMethodId, e.GridSystemId, e.EntityId, e.CoordinatesEntityTypeId }, "UQ_Coordinates_01").IsUnique();

            entity.Property(e => e.CoordinatesId).HasComment("The auto incrementing primary key.");
            entity.Property(e => e.CoordinateMethodId).HasComment("The primary key of the method used to determine the coordinates.");
            entity.Property(e => e.CoordinatesEntityTypeId).HasComment("The primary key of the type (Hole, Point, etc) of the entity to which the coordinates relate.");
            entity.Property(e => e.EntityId).HasComment("The primary key of the entity to which the coordinates relate.");
            entity.Property(e => e.GridSystemId).HasComment("The primary key of the grid system employed.");
            entity.Property(e => e.X).HasComment("The x coordinate.");
            entity.Property(e => e.Y).HasComment("The y coordinate.");
            entity.Property(e => e.Z).HasComment("The z coordinate.");

            entity.HasOne(d => d.CoordinateMethod).WithMany(p => p.Coordinates)
                .HasForeignKey(d => d.CoordinateMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HoleCoordinates_01");

            entity.HasOne(d => d.CoordinatesEntityType).WithMany(p => p.Coordinates)
                .HasForeignKey(d => d.CoordinatesEntityTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HoleCoordinates_03");

            entity.HasOne(d => d.GridSystem).WithMany(p => p.Coordinates)
                .HasForeignKey(d => d.GridSystemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HoleCoordinates_02");
        });

        modelBuilder.Entity<CoordinatesEntityType>(entity =>
        {
            entity.ToTable("CoordinatesEntityType", "AcqCoordinates", tb => tb.HasComment("The type of the entity (Hole, Point) related to the coordinate set."));

            entity.HasIndex(e => e.Identifier, "UQ_CoordinatesEntityType_01").IsUnique();

            entity.Property(e => e.CoordinatesEntityTypeId).HasComment("The auto incrementing primary key.");
            entity.Property(e => e.Identifier)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("The unique identifier given to the type.");
        });

        modelBuilder.Entity<CustomFieldAttributeType>(entity =>
        {
            entity.HasKey(e => e.CustomFieldAttributeTypeId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("CustomFieldAttributeType", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the xml schema of a custom field attribute type.");
                    tb.HasTrigger("T_CustomFieldAttributeType_OD");
                });

            entity.HasIndex(e => e.Name, "UQ_CustomFieldAttributeType_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.CustomFieldAttributeTypeId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.AttributeXSD)
                .IsRequired()
                .HasComment("The Schema of the Custom Field Attribute Type.")
                .HasColumnType("xml");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The Name of the custom field attribute type.");
        });

        modelBuilder.Entity<DATATYPE>(entity =>
        {
            entity.HasKey(e => e.DATATYPE1)
                .HasName("PRIMARYKEYDATATYPE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DATATYPE", "dbo", tb => tb.HasComment("DataType defines the various data types for the virtual fields - in HoleCode, GeologyCodeSecondary, TenementCode and others. Data types can be text, numeric or date. This table MUST NOT be edited. "));

            entity.Property(e => e.DATATYPE1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DATATYPE");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DATELIST>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DATELIST", "dbo");

            entity.Property(e => e.DATELIST1).HasColumnName("DATELIST");
        });

        modelBuilder.Entity<DD_ACQGEOPHYSDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.HOLEID, e.DEPTH, e.PRIORITY, e.DEPTHSTEP });

            entity.ToTable("DD_ACQGEOPHYSDETAILS", "dbo");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
        });

        modelBuilder.Entity<DD_ACQGEOPHYSDETAILS_DM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DD_ACQGEOPHYSDETAILS_DM", "dbo");

            entity.Property(e => e.ColumnName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ExceptSource)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ExceptTarget)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.InsertOn)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.IsPK).HasDefaultValue(false);
            entity.Property(e => e.MergeOn)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.TableCatalog)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TableName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TableSchema)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdateOn)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DD_CollarStatus>(entity =>
        {
            entity.HasKey(e => e.HoleId);

            entity.ToTable("DD_CollarStatus", "dbo");

            entity.Property(e => e.HoleId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DD_Collars>(entity =>
        {
            entity.HasKey(e => e.HoleId);

            entity.ToTable("DD_Collars", "dbo");

            entity.Property(e => e.HoleId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CollarSurveyDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DrillType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EndDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GDP)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HoleStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Lease)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StartDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SurveyMethod)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DD_Drilling>(entity =>
        {
            entity.HasKey(e => new { e.HoleId, e.DrillDiameter, e.DrillStartDepth });

            entity.ToTable("DD_Drilling", "dbo");

            entity.Property(e => e.HoleId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DrillDiameter)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DrillContractor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DrillDate)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DrillMethod)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DD_GEOPHYSDETAILS_DM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DD_GEOPHYSDETAILS_DM", "dbo");

            entity.Property(e => e.ColumnName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ExceptSource)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ExceptTarget)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.InsertOn)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.IsPK).HasDefaultValue(false);
            entity.Property(e => e.MergeOn)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.TableCatalog)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TableName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TableSchema)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdateOn)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DD_GEOPHYSDETAILS_UPDATE_DM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DD_GEOPHYSDETAILS_UPDATE_DM", "dbo");

            entity.Property(e => e.ColumnName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ExceptSource)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ExceptTarget)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.InsertOn)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.IsPK).HasDefaultValue(false);
            entity.Property(e => e.MergeOn)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.TableCatalog)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TableName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TableSchema)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdateOn)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DD_Geology>(entity =>
        {
            entity.HasKey(e => new { e.HOLEID, e.GEOLFROM, e.GEOLTO }).HasName("PK_DD_Geolgoy");

            entity.ToTable("DD_Geology", "dbo");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.COLOUR1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.COLOUR2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DATE_COREDENS_MEASRD)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DATE_LOGGED)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DATE_VALIDATED)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DEFECT_ORIGIN)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DEFECT_SETS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DEFECT_TYPE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FILL_MIN1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FILL_TYPE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GEOLOGICALALTERATION)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HAMMEROIL)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HARDNESS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HISTORIC_STRAND)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HISTORIC_STRAT)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HUE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.INFILL_MIN1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.INFILL_STRENGTH)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.INFILL_TEXTURE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.INTERIM_BY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.INTERIM_DATE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.I_STRAND)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH01)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH02)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH03)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH04)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH05)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH06)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH07)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH08)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH09)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH10)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH11)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH12)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH13)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH14)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH15)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LITH_HARDNESS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LOGGED_BY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LOGGED_STRAND)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LOGGED_STRAT)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MAJOR1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MAJOR2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MAJOR3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MANGANSES_FOUND)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MATERIAL_TYPE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MINOR1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MINOR2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MINOR3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MODELRELEASE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MOD_MATERIAL_INTERP)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ORECODE_GANGUE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ORECODE_HARDNESS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ORECODE_MINERALOGY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ORECODE_STRAT)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ORETYPE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PIOC_ALTERATION)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PIOC_HARDNESS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PIOC_MINERALOGY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PIOC_ORE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PLASTIC_FOUND)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PYRITE_FOUND)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RECOVERY_RC)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.REVIEWED_BY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.REVIEWED_DATE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ROCK_TYPE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SHAPE1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SHAPE2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.STRENGTH)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.STRUCTURE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.STRUCTURE_ORIGIN)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.STRUCTURE_ROUGHNESS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.STRUCTURE_TYPE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TEXTURE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TRACE1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TRACE2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TRACE3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VALIDATED_BY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VALIDATED_STRAND)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WATER_TABLE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WEATHERING)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WET_DRY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.X_STRAND)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ZONE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ZONE_STRUCTURE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e._2024GEOLOGCOLOUR)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024GEOLOGCOLOUR");
            entity.Property(e => e._2024GEOLOGCOLOURSEC)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024GEOLOGCOLOURSEC");
            entity.Property(e => e._2024GEOLOGSHAPE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024GEOLOGSHAPE");
            entity.Property(e => e._2024GEOLOGY)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024GEOLOGY");
            entity.Property(e => e._2024GEOLOGYMOISTURE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024GEOLOGYMOISTURE");
            entity.Property(e => e._2024HARDNESS)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024HARDNESS");
            entity.Property(e => e._2024PRILITH)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024PRILITH");
            entity.Property(e => e._2024RISKFIBRES)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024RISKFIBRES");
            entity.Property(e => e._2024RISKMANGANESE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024RISKMANGANESE");
            entity.Property(e => e._2024RISKMETAL)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024RISKMETAL");
            entity.Property(e => e._2024RISKOIL)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024RISKOIL");
            entity.Property(e => e._2024RISKPLASTIC)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024RISKPLASTIC");
            entity.Property(e => e._2024RISKSULPHIDES)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024RISKSULPHIDES");
            entity.Property(e => e._2024RISKVOIDINTERVAL)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024RISKVOIDINTERVAL");
            entity.Property(e => e._2024RISKVOIDS)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024RISKVOIDS");
            entity.Property(e => e._2024SECLITH)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024SECLITH");
            entity.Property(e => e._2024TEXTURE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("2024TEXTURE");
        });

        modelBuilder.Entity<DD_GeologyValidated>(entity =>
        {
            entity.HasKey(e => new { e.HOLEID, e.GEOLFROM, e.GEOLTO }).HasName("PK_DD_GeolgoyValidated");

            entity.ToTable("DD_GeologyValidated", "dbo");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DATEINTERPRETED)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GEOZONE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.INTERPRETEDBY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.STRAND)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DD_GeophysDetails>(entity =>
        {
            entity.HasKey(e => new { e.HOLEID, e.DEPTH, e.PRIORITY, e.DEPTHSTEP }).HasName("PK_DD_Geophysdetails");

            entity.ToTable("DD_GeophysDetails", "dbo");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
        });

        modelBuilder.Entity<DD_Geophysics>(entity =>
        {
            entity.HasKey(e => e.HoleId);

            entity.ToTable("DD_Geophysics", "dbo");

            entity.Property(e => e.HoleId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EndDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LASCompany)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LASMissed)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LASReceiveDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LASRecordDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Plod_InRod)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Plod_OpenHole)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Plod_OpenHoleDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Plod_inRodDate)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DD_HoleCoords>(entity =>
        {
            entity.HasKey(e => new { e.HOLEID, e.COORDINATESET })
                .HasName("PK_DD_HOLECOORD")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DD_HoleCoords", "dbo");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COORDINATESET)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Date_Coord_Surv).HasColumnType("datetime");
        });

        modelBuilder.Entity<DD_SampleAssays>(entity =>
        {
            entity.HasKey(e => new { e.SampleID, e.DuplicateNo });

            entity.ToTable("DD_SampleAssays", "dbo");

            entity.Property(e => e.SampleID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DuplicateNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HoleID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LOI110_425_RBTGA_pct).HasColumnName("LOI110-425_RBTGA_pct");
            entity.Property(e => e.LOI372_538_RBTGA_pct).HasColumnName("LOI372-538_RBTGA_pct");
            entity.Property(e => e.LOI425_650_RBTGA_pct).HasColumnName("LOI425-650_RBTGA_pct");
            entity.Property(e => e.LOI539_100_RBTGA_pct).HasColumnName("LOI539-100_RBTGA_pct");
            entity.Property(e => e.LOI650_100_RBTGA_pct).HasColumnName("LOI650-100_RBTGA_pct");
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SampleType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DD_SampleSamples>(entity =>
        {
            entity.HasKey(e => new { e.SampleID, e.DuplicateNo }).HasName("PK_DD_SAMPLESAMPLES");

            entity.ToTable("DD_SampleSamples", "dbo");

            entity.Property(e => e.SampleID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DuplicateNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BVBarcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.B_Sample_Requested)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Barcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CheckHole_ID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Date_Sample_Pickup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Date_Sampled)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Geostats_Ref)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HoleID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QAQC_By)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QAQC_Date)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RoyHill_Ref)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SGSBarcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SampleType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sample_Assay_NoValue)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sample_Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sample_Condition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sample_Holeid)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sample_Method)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sampled_By)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SeleniumAssay_Ignore)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Unixtime)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VialBarcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VialPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VialTray)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DD_Sampling>(entity =>
        {
            entity.HasKey(e => e.HoleId);

            entity.ToTable("DD_Sampling", "dbo");

            entity.Property(e => e.HoleId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DateSampled)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SEAnalysisMethod)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SEDespatch)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SELab)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SEReceiveDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SEReturnDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SESendDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.XRFAnalysisMethod)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.XRFDespatch)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.XRFLab)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.XRFReceiveDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.XRFReturnDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.XRFSendDate)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DESPATCHBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.DESPATCHNO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DESPATCHBIGCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Large comments as virtual fields for Despatches sent to a laboratory. ");
                    tb.HasTrigger("T_DESPATCHBIGCOMMENT_IU");
                });

            entity.HasIndex(e => e.DESPATCHNO, "IDX_DESPATCHBIGCOMMENT_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_DESPATCHBIGCOMMENT_02").HasFillFactor(80);

            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasComment("The the despatch code with the instructions for the laboratory, also part of primary key.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a virtual field, also part of primary key.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The mandatory value of a virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.DESPATCHBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DESPATCHBIGCOMMENT_01");
        });

        modelBuilder.Entity<DESPATCHBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DESPATCHBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("DespatchBigCommentCode lists the large comment virtual field definitions for table DespatchSend. ");
                    tb.HasTrigger("T_DESPATCHBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_DESPATCHBIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual field and the primary key of the lookup table.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A verbose description of this virtual field.");
        });

        modelBuilder.Entity<DESPATCHCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DESPATCHCODE", "dbo", tb =>
                {
                    tb.HasComment("This is the defining table for the virtual fields for Despatch compound forms. Virtual fields are created with the Virtual Field Wizard. ");
                    tb.HasTrigger("T_DESPATCHCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_DESPATCHCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.DESPATCHCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DESPATCHCODE_DT");
        });

        modelBuilder.Entity<DESPATCHDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.DESPATCHNO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DESPATCHDETAILS", "dbo", tb =>
                {
                    tb.HasComment("The particulars associated with the virtual fields for Despatch compound forms are stored in this table. ");
                    tb.HasTrigger("T_DD_INS");
                });

            entity.HasIndex(e => e.DESPATCHNO, "IDX_DESPATCHDETAILS_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_DESPATCHDETAILS_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_DESPATCHDETAILS_03").HasFillFactor(80);

            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.DESPATCHDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DESPATCHDETAILS_CODE");
        });

        modelBuilder.Entity<DESPATCHRETBIGCOMCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DESPATCHRETBIGCOMCODE", "dbo", tb =>
                {
                    tb.HasComment("DespatchRetBigComCode lists the large comment virtual field definitions for table DespatchReturn. ");
                    tb.HasTrigger("T_DESPATCHRETBIGCOMCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_DESPATCHRETBIGCOMCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual field and the primary key of the lookup table.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A verbose description of this virtual field.");
        });

        modelBuilder.Entity<DESPATCHRETBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.LABJOBNO, e.DESPATCHNO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DESPATCHRETBIGCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("DespatchRetBigComment Table stores comments on aspects of the despatch return (up to 4000 characters). It is associated with the DespatchReturn table and other details tables to make up the DespatchReturns compound definition. ");
                    tb.HasTrigger("T_DESPATCHRETBIGCOMMENT_IU");
                });

            entity.HasIndex(e => new { e.LABJOBNO, e.DESPATCHNO }, "IDX_DESPATCHRETBIGCOMMENT_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_DESPATCHRETBIGCOMMENT_02").HasFillFactor(80);

            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The laboratory receiving the sample, part of primary key.");
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasComment("The the despatch code with the instructions for the laboratory, also part of primary key.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a virtual field, also part of primary key.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The mandatory value of a virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.DESPATCHRETBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DESPATCHRETBIGCOMMENT_01");
        });

        modelBuilder.Entity<DESPATCHRETCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DESPATCHRETCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with DESPATCHRETDETAILS.");
                    tb.HasTrigger("T_DESPATCHRETCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_DESPATCHRETCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.DESPATCHRETCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DESPATCHRETCODE_DATATYPE");
        });

        modelBuilder.Entity<DESPATCHRETCOMCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DESPATCHRETCOMCODE", "dbo", tb =>
                {
                    tb.HasComment("DespatchRetComCode stores the names of the comment virtual fields for the DespatchReturns compound definition. ");
                    tb.HasTrigger("T_DESPATCHRETCOMCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_DESPATCHRETCOMCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.DESPATCHRETCOMCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DESPATCHRETCOMCODE_DATATYPE");
        });

        modelBuilder.Entity<DESPATCHRETCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.LABJOBNO, e.DESPATCHNO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DESPATCHRETCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("DespatchRetComment Table stores comments on aspects of the despatch return (up to 4000 characters). It is associated with the DespatchReturn table and other details tables to make up the DespatchReturns compound definition. ");
                    tb.HasTrigger("T_DRTC_INS");
                });

            entity.HasIndex(e => new { e.LABJOBNO, e.DESPATCHNO }, "IDX_DESPATCHRETCOMMENT_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_DESPATCHRETCOMMENT_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_DESPATCHRETCOMMENT_03").HasFillFactor(80);

            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.DESPATCHRETCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DESPATCHRETCOMMENT_NAME");
        });

        modelBuilder.Entity<DESPATCHRETDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.LABJOBNO, e.DESPATCHNO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DESPATCHRETDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Details table associated with DESPATCHRETURN.");
                    tb.HasTrigger("T_DRTD_INS");
                });

            entity.HasIndex(e => new { e.LABJOBNO, e.DESPATCHNO }, "IDX_DESPATCHRETDETAILS_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_DESPATCHRETDETAILS_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_DESPATCHRETDETAILS_03").HasFillFactor(80);

            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.DESPATCHRETDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DESPATCHRETDETAILS_NAME");
        });

        modelBuilder.Entity<DESPATCHRETURN>(entity =>
        {
            entity.HasKey(e => new { e.LABJOBNO, e.DESPATCHNO }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DESPATCHRETURN", "dbo", tb =>
                {
                    tb.HasComment("This table associates a particular despatch (LabJobNo and DespatchNo) with a return date. It is possible to have a despatch arriving on different days (change the LabJobNo). ");
                    tb.HasTrigger("T_DESPATCHRETURN_CORP_D");
                    tb.HasTrigger("T_DESPATCHRETURN_CORP_U");
                    tb.HasTrigger("T_DHR_DELCON");
                    tb.HasTrigger("T_DRTD_CAS");
                    tb.HasTrigger("T_DR_CON");
                });

            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DESPATCHSEND>(entity =>
        {
            entity.HasKey(e => e.DESPATCHNO).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DESPATCHSEND", "dbo", tb =>
                {
                    tb.HasComment("DespatchSend stores particulars about a group of assays forwarded to a laboratory. Assays are usually despatched or submitted to a laboratory with a company generated number or code. This number/code means that the group of samples can be tracked by: This is the main table for Despatch compound forms. ");
                    tb.HasTrigger("T_DESPATCHSEND_AC_U");
                    tb.HasTrigger("T_DSPD_CAS");
                    tb.HasTrigger("T_DSPD_CON");
                    tb.HasTrigger("T_DSPD_INS");
                });

            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.ANALYSISSUITENavigation).WithMany(p => p.DESPATCHSEND)
                .HasForeignKey(d => d.ANALYSISSUITE)
                .HasConstraintName("FK_DESPATCHDETAILS_ASUITE");

            entity.HasOne(d => d.CONTRACTCODENavigation).WithMany(p => p.DESPATCHSEND)
                .HasForeignKey(d => d.CONTRACTCODE)
                .HasConstraintName("FK_DESPATCHDETAILS_CONTRACT");

            entity.HasOne(d => d.COSTCODENavigation).WithMany(p => p.DESPATCHSEND)
                .HasForeignKey(d => d.COSTCODE)
                .HasConstraintName("FK_DESPATCHSEND_CC");

            entity.HasOne(d => d.LABCODENavigation).WithMany(p => p.DESPATCHSEND)
                .HasForeignKey(d => d.LABCODE)
                .HasConstraintName("FK_DESPATCHDETAILS_LAB");
        });

        modelBuilder.Entity<DIAMETERTYPE>(entity =>
        {
            entity.HasKey(e => e.DIAMETERTYPE1)
                .HasName("PRIMARYKEYDIAMETERTYPE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DIAMETERTYPE", "dbo", tb => tb.HasComment("DiameterType is a 'list' of the different drilling diameters downhole. For example, for diamond drilling the entries could include HQ, NQ and BQ. Accompanying the different types is the opportunity to record the diameter size. This information is helpful when evaluation costs of projects for government departments and future budget planning. "));

            entity.Property(e => e.DIAMETERTYPE1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DIAMETERTYPE");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.UNITSNavigation).WithMany(p => p.DIAMETERTYPE)
                .HasForeignKey(d => d.UNITS)
                .HasConstraintName("FK_DIAMETERTYPE_01");
        });

        modelBuilder.Entity<DIGESTDEGREE>(entity =>
        {
            entity.HasKey(e => e.DIGESTDEGREE1).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DIGESTDEGREE", "dbo", tb => tb.HasComment("The degree to which a sample is digested into a solution for analysis."));

            entity.Property(e => e.DIGESTDEGREE1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DIGESTDEGREE");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DIGESTTYPE>(entity =>
        {
            entity.HasKey(e => e.DIGESTTYPE1).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DIGESTTYPE", "dbo", tb => tb.HasComment("The method used to dissolve the sample into a solution for analysis."));

            entity.Property(e => e.DIGESTTYPE1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DIGESTTYPE");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DRILLHOLEDIAMCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DRILLHOLEDIAMCODE", "dbo", tb =>
                {
                    tb.HasComment("DrillholeDiamCode stores the names of the virtual fields for the DrillholeDiameters compound definition. ");
                    tb.HasTrigger("T_DRILLHOLEDIAMCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_DRILLHOLEDIAMCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.DRILLHOLEDIAMCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DRILLHOLEDIAMCODE_DATATYPE");
        });

        modelBuilder.Entity<DRILLHOLEDIAMDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.STARTDEPTH, e.DIAMETERTYPE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DRILLHOLEDIAMDETAILS", "dbo", tb =>
                {
                    tb.HasComment("DrillholeDiamDetails stores data for the DrillholeDiameters virtual fields. It is associated with the DrillholeDiameter table to make up the DrillholeDiameters compound definition. ");
                    tb.HasTrigger("LastModifiedUTDrillHoleDiamDetails");
                    tb.HasTrigger("T_DHDD_VAL");
                });

            entity.HasIndex(e => e.NAME, "IDX_DRILLHOLEDIAMDETAILS_01").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_DRILLHOLEDIAMDETAILS_02").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIAMETERTYPE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.DRILLHOLEDIAMDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DRILLHOLEDIAMDETAILS_CODE");
        });

        modelBuilder.Entity<DRILLHOLEDIAMETER>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.STARTDEPTH, e.DIAMETERTYPE }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DRILLHOLEDIAMETER", "dbo", tb =>
                {
                    tb.HasComment("DrillholeDiameter stores details of the type or diameter of drilling used at particular depths downhole. This becomes important to differentiate drillholes in a program by drilling type or to record drillholes that have been precollared by a different method or drillholes that have different drill diameters used downhole. Different diameters or methods usually means different associated costs and keeping this record is important. ");
                    tb.HasTrigger("LastModifiedUTDrillHoleDiameter");
                    tb.HasTrigger("T_DHD_CON");
                    tb.HasTrigger("T_DHD_DCAS");
                    tb.HasTrigger("T_DHD_UCAS");
                });

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIAMETERTYPE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DRILLTYPE)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DIAMETERTYPENavigation).WithMany(p => p.DRILLHOLEDIAMETER)
                .HasForeignKey(d => d.DIAMETERTYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DRILLHOLEDIAMETER13DIAMETERTYP");

            entity.HasOne(d => d.DRILLTYPENavigation).WithMany(p => p.DRILLHOLEDIAMETER)
                .HasForeignKey(d => d.DRILLTYPE)
                .HasConstraintName("DRILLHOLEDIAMETER25DRILLTYPE");
        });

        modelBuilder.Entity<DRILLINGACTIVITY>(entity =>
        {
            entity.HasKey(e => e.NAME)
                .HasName("PRIMARYKEYDRILLINGACTIVITY")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DRILLINGACTIVITY", "dbo", tb =>
                {
                    tb.HasComment("DrillingActivity provides the virtual fields for DrillingDetail in the compound form Events. New fields can be entered via the Virtual Field Wizard. ");
                    tb.HasTrigger("T_DRILLINGACTIVITY_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_DRILLINGACTIVITY_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.DRILLINGACTIVITY)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DRILLINGACTIVITYDATATYPE");
        });

        modelBuilder.Entity<DRILLINGDETAIL>(entity =>
        {
            entity.HasKey(e => new { e.DRILLINGDATE, e.SHIFT, e.HOLEID, e.PROJECTCODE, e.CONTRACTCODE, e.COSTCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DRILLINGDETAIL", "dbo", tb =>
                {
                    tb.HasComment("DrillingDetail stores information on drilling activities and that quantifies that activity - cost per metre, metres drilled, surveys taken for example. This table is the main table of the Events compound form definition. For example, the drilling company has a contract to charge $24.50 per metre for RC and 30m were drilled. The input would look like this: Name = RC4 Defined in DrillingActivity  with CostCode = BX12 Defined in Cost  Value = 30 metres  ContractCode = Ace95 Defined in Contract  Thus there is a relationship between the activity, the costcode and the contract company - for company and government reporting, for budgeting and cost analysis. ");
                    tb.HasTrigger("LastModifiedUTDrillingDetail");
                    tb.HasTrigger("T_DD_VAL");
                });

            entity.HasIndex(e => e.DRILLINGDATE, "IDX_DRILLHOLEDETAILS_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_DRILLINGDETAILS_02").HasFillFactor(80);

            entity.Property(e => e.DRILLINGDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SHIFT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.CONTRACTCODENavigation).WithMany(p => p.DRILLINGDETAIL)
                .HasForeignKey(d => d.CONTRACTCODE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DRILLINGDETAIL50CONTRACT");

            entity.HasOne(d => d.COSTCODENavigation).WithMany(p => p.DRILLINGDETAIL)
                .HasForeignKey(d => d.COSTCODE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DRILLINGDETAIL_CC");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.DRILLINGDETAIL)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DRILLINGDETAIL23DRILLINGACTIVI");

            entity.HasOne(d => d.SHIFTNavigation).WithMany(p => p.DRILLINGDETAIL)
                .HasForeignKey(d => d.SHIFT)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DRILLINGDETAIL43SHIFT");
        });

        modelBuilder.Entity<DRILLING_PLANNED>(entity =>
        {
            entity.HasKey(e => e.HOLEID);

            entity.ToTable("DRILLING_PLANNED", "dbo");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DRILL_DATE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DRILL_STATUS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DRILL_VERSION)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GEOPHYSICS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HERITAGE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.INFRASTRUCTURE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LEASE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LONGID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MIN10K)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MINE_DATE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MINE_STATUS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MINE_VERSION)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MODEL_DATE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NEIGHBOURS)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PIT)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PRIORITY_STAGE_DESCRIPTION)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SHORTID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.STERILE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SUMP)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DRILLTYPE>(entity =>
        {
            entity.HasKey(e => e.DRILLTYPE1)
                .HasName("PRIMARYKEYDRILLTYPE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DRILLTYPE", "dbo", tb => tb.HasComment("DrillType stores a 'list' of possible DrillTypes. In DrillHoleDiameter, these are associated with a DiameterType. Possible DrillType(s) could include RC, RAB, Diamond, Cased and so on. "));

            entity.Property(e => e.DRILLTYPE1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DRILLTYPE");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DataNode>(entity =>
        {
            entity.HasKey(e => e.DataNodeGlobalId);

            entity.ToTable("DataNode", "AcqManagement", tb => tb.HasComment("To write."));

            entity.HasIndex(e => e.DataNodeGlobalId, "UQ_DataNode_01")
                .IsUnique()
                .HasFilter("([DataNodeType]='Self')");

            entity.HasIndex(e => e.DataNodeGlobalId, "UQ_DataNode_02")
                .IsUnique()
                .HasFilter("([DataNodeType]='Parent')");

            entity.Property(e => e.DataNodeGlobalId)
                .ValueGeneratedNever()
                .HasComment("The identifier of a data node.");
            entity.Property(e => e.DataNodeType)
                .IsRequired()
                .HasMaxLength(20)
                .HasComment("The type of the data node referenced in relation to this data node (Self, Parent, Child).");
        });

        modelBuilder.Entity<DataSource>(entity =>
        {
            entity.HasKey(e => e.DataSourceId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DataSource", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Defines which sources data can be sourced from to populate the meta system tables.");
                    tb.HasTrigger("T_DataSource_IU");
                });

            entity.HasIndex(e => e.Name, "UQ_DataSource_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.DataSourceId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.IsManual).HasComment("Whether or not this data source is the pre-defined manual data source. There can only be one.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The data source name.");
        });

        modelBuilder.Entity<DatabaseColumn>(entity =>
        {
            entity.HasKey(e => e.DatabaseColumnId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DatabaseColumn", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the columns in the database.");
                    tb.HasTrigger("T_DatabaseColumn_OD");
                });

            entity.HasIndex(e => new { e.DatabaseTableId, e.IsPrimaryKeyField }, "IDX_DatabaseColumn_01").HasFillFactor(80);

            entity.HasIndex(e => new { e.DatabaseTableId, e.Name }, "UQ_DatabaseColumn_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.DatabaseColumnId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.DatabaseTableId).HasComment("The database table or view this column belongs to.");
            entity.Property(e => e.Datatype)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The datatype of the field.");
            entity.Property(e => e.FieldTypeId).HasComment("The field type to be inherited by compound fields based on this column, where this differs from Datatype.");
            entity.Property(e => e.IsGenerated).HasComment("Can the fields value be created by the database on insert.");
            entity.Property(e => e.IsNullable).HasComment("Is the field nullable.");
            entity.Property(e => e.IsPrimaryKeyField).HasComment("Is the field part of the primary key .");
            entity.Property(e => e.MicaDatatype)
                .HasMaxLength(100)
                .HasComment("The Mica datatype associated with this field's SQL Server datatype.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The Name of the database column.");
            entity.Property(e => e.OrderNumber).HasComment("The Order in which the fields exist in the table or view.");
            entity.Property(e => e.Size).HasComment("The Size of the field.");

            entity.HasOne(d => d.DatabaseTable).WithMany(p => p.DatabaseColumn)
                .HasForeignKey(d => d.DatabaseTableId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DatabaseColumn_01");
        });

        modelBuilder.Entity<DatabaseFiles>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DatabaseFiles", "dbo");

            entity.Property(e => e.CreationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.backup_lsn).HasColumnType("numeric(25, 0)");
            entity.Property(e => e.create_lsn).HasColumnType("numeric(25, 0)");
            entity.Property(e => e.differential_base_lsn).HasColumnType("numeric(25, 0)");
            entity.Property(e => e.differential_base_time).HasColumnType("datetime");
            entity.Property(e => e.drop_lsn).HasColumnType("numeric(25, 0)");
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.physical_name)
                .IsRequired()
                .HasMaxLength(260);
            entity.Property(e => e.read_only_lsn).HasColumnType("numeric(25, 0)");
            entity.Property(e => e.read_write_lsn).HasColumnType("numeric(25, 0)");
            entity.Property(e => e.redo_start_lsn).HasColumnType("numeric(25, 0)");
            entity.Property(e => e.redo_target_lsn).HasColumnType("numeric(25, 0)");
            entity.Property(e => e.state_desc)
                .HasMaxLength(60)
                .UseCollation("Latin1_General_CI_AS_KS_WS");
            entity.Property(e => e.type_desc)
                .HasMaxLength(60)
                .UseCollation("Latin1_General_CI_AS_KS_WS");
        });

        modelBuilder.Entity<DatabaseTable>(entity =>
        {
            entity.HasKey(e => e.DatabaseTableId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DatabaseTable", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the tables and views in the database.");
                    tb.HasTrigger("T_DatabaseTable_OD");
                });

            entity.HasIndex(e => e.Name, "IDX_DatabaseTable_01").HasFillFactor(80);

            entity.HasIndex(e => e.Schema, "IDX_DatabaseTable_02").HasFillFactor(80);

            entity.HasIndex(e => e.BaseTableName, "IDX_DatabaseTable_03").HasFillFactor(80);

            entity.HasIndex(e => e.TableObjectId, "IDX_DatabaseTable_04").HasFillFactor(80);

            entity.HasIndex(e => new { e.Name, e.Schema }, "IDX_DatabaseTable_05").HasFillFactor(80);

            entity.HasIndex(e => new { e.Schema, e.Name }, "UQ_DatabaseTable_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.DatabaseTableId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.BaseTableName)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The Name of the base table for this table. This is to allow for cases where a table has a covering synonym.");
            entity.Property(e => e.CompoundId).HasComment("The Table Compound definition that relates to this table.");
            entity.Property(e => e.DataSourceId)
                .HasDefaultValueSql("([AcqMetaSystem].[GetManualDataSourceId]())")
                .HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.LoadOrder).HasComment("The order in which the tables should be loaded.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The Name of the database table or view, this can include synonyms.");
            entity.Property(e => e.Schema)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The Schema the database table or view belongs to.");
            entity.Property(e => e.TableCategoryId).HasComment("The Table Category of this table.");
            entity.Property(e => e.TableObjectId).HasComment("The Table Object Id as according to sys.tables.");
            entity.Property(e => e.TableType)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The Type of Table, Base Table, View, etc.");

            entity.HasOne(d => d.Compound).WithMany(p => p.DatabaseTable)
                .HasForeignKey(d => d.CompoundId)
                .HasConstraintName("FK_DatabaseTable_01");

            entity.HasOne(d => d.DataSource).WithMany(p => p.DatabaseTable)
                .HasForeignKey(d => d.DataSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DatabaseTable_03");

            entity.HasOne(d => d.TableCategory).WithMany(p => p.DatabaseTable)
                .HasForeignKey(d => d.TableCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DatabaseTable_02");
        });

        modelBuilder.Entity<DatabaseTableValidationExclusion>(entity =>
        {
            entity.HasKey(e => new { e.Name, e.Schema }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DatabaseTableValidationExclusion", "AcqMetaSystem", tb => tb.HasTrigger("T_DatabaseTableValidationExclusion_IUD"));

            entity.Property(e => e.Name).HasMaxLength(128);
            entity.Property(e => e.Schema).HasMaxLength(128);
        });

        modelBuilder.Entity<DateQtrWeek>(entity =>
        {
            entity.HasKey(e => e.D);

            entity.ToTable("DateQtrWeek", "dbo");
        });

        modelBuilder.Entity<Datum>(entity =>
        {
            entity.ToTable("Datum", "AcqCoordinates", tb => tb.HasComment("The datum employed for coordinates."));

            entity.HasIndex(e => e.Name, "UQ_Datum_01").IsUnique();

            entity.Property(e => e.DatumId).HasComment("The auto incrementing primary key.");
            entity.Property(e => e.Definition)
                .IsRequired()
                .HasComment("The XML definition of the datum.")
                .HasColumnType("xml");
            entity.Property(e => e.Description).HasComment("A description of the datum.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The unique name given to the datum.");
        });

        modelBuilder.Entity<DefaultStyling>(entity =>
        {
            entity.HasKey(e => new { e.StylingFieldGroupId, e.StylingCategoryId, e.StylingMode }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DefaultStyling", "AcqPresentation", tb => tb.HasComment("Defines, for a given styling field group and styling mode, which styling elements are shown by default in the user interface."));

            entity.Property(e => e.StylingFieldGroupId).HasComment("A link to the styling field group.");
            entity.Property(e => e.StylingCategoryId).HasComment("A link to the styling category.");
            entity.Property(e => e.StylingMode)
                .HasMaxLength(50)
                .HasComment("The styling mode (e.g. Grid, StripLog) which the given styling will be shown in by default.");
            entity.Property(e => e.StylingId).HasComment("The styling within the given styling category to show by default.");

            entity.HasOne(d => d.StylingCategory).WithMany(p => p.DefaultStyling)
                .HasForeignKey(d => d.StylingCategoryId)
                .HasConstraintName("FK_DefaultStyling_01");

            entity.HasOne(d => d.StylingFieldGroupStyling).WithMany(p => p.DefaultStyling)
                .HasForeignKey(d => new { d.StylingFieldGroupId, d.StylingId })
                .HasConstraintName("FK_DefaultStyling_02");
        });

        modelBuilder.Entity<DerivedRelationshipIndirectRelationship>(entity =>
        {
            entity.HasKey(e => new { e.DerivedRelationshipId, e.RelationshipOrder }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("DerivedRelationshipIndirectRelationship", "AcqMetaSystem");

            entity.HasOne(d => d.DerivedRelationship).WithMany(p => p.DerivedRelationshipIndirectRelationshipDerivedRelationship)
                .HasForeignKey(d => d.DerivedRelationshipId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DerivedRelationshipIndirectRelationship_01");

            entity.HasOne(d => d.IndirectRelationship).WithMany(p => p.DerivedRelationshipIndirectRelationshipIndirectRelationship)
                .HasForeignKey(d => d.IndirectRelationshipId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DerivedRelationshipIndirectRelationship_02");
        });

        modelBuilder.Entity<ELEMENT>(entity =>
        {
            entity.HasKey(e => e.ELEMENT1).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ELEMENT", "dbo", tb => tb.HasTrigger("T_ELEMENT_MS_CACHE_UPDATE_IUD"));

            entity.Property(e => e.ELEMENT1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ELEMENT");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENTTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UNITSPREF)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.ELEMENTTYPENavigation).WithMany(p => p.ELEMENT)
                .HasForeignKey(d => d.ELEMENTTYPE)
                .HasConstraintName("FK_ELEMENT_ELEMENTTYPE");

            entity.HasOne(d => d.UNITSPREFNavigation).WithMany(p => p.ELEMENT)
                .HasForeignKey(d => d.UNITSPREF)
                .HasConstraintName("FK_ELEMENT_UNITSPREF");
        });

        modelBuilder.Entity<ELEMENTTYPE>(entity =>
        {
            entity.HasKey(e => e.ELEMENTTYPE1).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ELEMENTTYPE", "dbo");

            entity.Property(e => e.ELEMENTTYPE1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ELEMENTTYPE");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EQUIPMENT>(entity =>
        {
            entity.HasKey(e => e.EQUIPMENTCODE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENT", "dbo", tb =>
                {
                    tb.HasComment("Stores details of the individual pieces of equipment themselves, i.e. each individual item of equipment.");
                    tb.HasTrigger("T_AC_EQUIPMENT_U");
                    tb.HasTrigger("T_EQUIPMENT_IU");
                });

            entity.Property(e => e.EQUIPMENTCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for this individual item of equipment.");
            entity.Property(e => e.ACTIVE)
                .HasDefaultValue((byte)1)
                .HasComment("Is this equipment available for use or not.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier for the company using this item of equipment.");
            entity.Property(e => e.CONFIGURATIONPERIOD).HasComment("The validity period of a calibration.");
            entity.Property(e => e.CONFIGURATIONPERIODUNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unit in which the validity period is measured.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The description of this item of equipment.");
            entity.Property(e => e.EQUIPMENTMODELCODE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the make and model of this item of equipment.");

            entity.HasOne(d => d.COMPANYCODENavigation).WithMany(p => p.EQUIPMENT)
                .HasForeignKey(d => d.COMPANYCODE)
                .HasConstraintName("FK_EQUIPMENT_02");

            entity.HasOne(d => d.CONFIGURATIONPERIODUNITSNavigation).WithMany(p => p.EQUIPMENT)
                .HasForeignKey(d => d.CONFIGURATIONPERIODUNITS)
                .HasConstraintName("FK_EQUIPMENT_03");

            entity.HasOne(d => d.EQUIPMENTMODELCODENavigation).WithMany(p => p.EQUIPMENT)
                .HasForeignKey(d => d.EQUIPMENTMODELCODE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EQUIPMENT_01");
        });

        modelBuilder.Entity<EQUIPMENTBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.EQUIPMENTCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTBIGCOMMENT", "dbo", tb => tb.HasComment("BigComment table associated with the EQUIPMENTMODEL table virtual field system. "));

            entity.Property(e => e.EQUIPMENTCODE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);

            entity.HasOne(d => d.EQUIPMENTCODENavigation).WithMany(p => p.EQUIPMENTBIGCOMMENT)
                .HasForeignKey(d => d.EQUIPMENTCODE)
                .HasConstraintName("FK_EQUIPMENTBIGCOMMENT_02");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.EQUIPMENTBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EQUIPMENTBIGCOMMENT_01");
        });

        modelBuilder.Entity<EQUIPMENTBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("BigCommentCode table associated with the EQUIPMENT table virtual field system. ");
                    tb.HasTrigger("T_EQUIPMENTBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_EQUIPMENTBIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EQUIPMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with the EQUIPMENT table virtual field system. ");
                    tb.HasTrigger("T_EQUIPMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_EQUIPMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.EQUIPMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EQUIPMENTCODE_01");
        });

        modelBuilder.Entity<EQUIPMENTCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.EQUIPMENTCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTCOMMENT", "dbo", tb => tb.HasComment("Comment table associated with the EQUIPMENT table virtual field system. "));

            entity.Property(e => e.EQUIPMENTCODE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.EQUIPMENTCODENavigation).WithMany(p => p.EQUIPMENTCOMMENT)
                .HasForeignKey(d => d.EQUIPMENTCODE)
                .HasConstraintName("FK_EQUIPMENTCOMMENT_02");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.EQUIPMENTCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EQUIPMENTCOMMENT_01");
        });

        modelBuilder.Entity<EQUIPMENTCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("CommentCode table associated with the EQUIPMENT table virtual field system. ");
                    tb.HasTrigger("T_EQUIPMENTCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EQUIPMENTCONFIG>(entity =>
        {
            entity.HasKey(e => new { e.EQUIPMENTCODE, e.EQUIPMENTDATE }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTCONFIG", "dbo", tb => tb.HasComment(" Stores time-based measurements of equipment configurations and calibrations."));

            entity.Property(e => e.EQUIPMENTCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the equipment to be configured or calibrated.");
            entity.Property(e => e.EQUIPMENTDATE)
                .HasComment("Time stamp of configuration or calibration.")
                .HasColumnType("datetime");

            entity.HasOne(d => d.EQUIPMENTCODENavigation).WithMany(p => p.EQUIPMENTCONFIG)
                .HasForeignKey(d => d.EQUIPMENTCODE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EQUIPMENTCONFIG_01");
        });

        modelBuilder.Entity<EQUIPMENTCONFIGBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.EQUIPMENTCODE, e.EQUIPMENTDATE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTCONFIGBIGCOMMENT", "dbo", tb => tb.HasComment("BigComment table associated with the EQUIPMENTCONFIG table virtual field system. "));

            entity.Property(e => e.EQUIPMENTCODE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EQUIPMENTDATE).HasColumnType("datetime");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.EQUIPMENTCONFIGBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EQUIPMENTCONFIGBIGCOMMENT_01");

            entity.HasOne(d => d.EQUIPMENTCONFIG).WithMany(p => p.EQUIPMENTCONFIGBIGCOMMENT)
                .HasForeignKey(d => new { d.EQUIPMENTCODE, d.EQUIPMENTDATE })
                .HasConstraintName("FK_EQUIPMENTCONFIGBIGCOMMENT_02");
        });

        modelBuilder.Entity<EQUIPMENTCONFIGBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTCONFIGBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("BigCommentCode table associated with the EQUIPMENTCONFIG table virtual field system. ");
                    tb.HasTrigger("T_EQUIPMENTCONFIGBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_EQUIPMENTCONFIGBIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EQUIPMENTCONFIGCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTCONFIGCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with the EQUIPMENTCONFIG table virtual field system. ");
                    tb.HasTrigger("T_EQUIPMENTCONFIGCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_EQUIPMENTCONFIGCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.EQUIPMENTCONFIGCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EQUIPMENTCONFIGCODE_01");
        });

        modelBuilder.Entity<EQUIPMENTCONFIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.EQUIPMENTCODE, e.EQUIPMENTDATE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTCONFIGCOMMENT", "dbo", tb => tb.HasComment("Comment table associated with the EQUIPMENTCONFIG table virtual field system. "));

            entity.Property(e => e.EQUIPMENTCODE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EQUIPMENTDATE).HasColumnType("datetime");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.EQUIPMENTCONFIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EQUIPMENTCONFIGCOMMENT_01");

            entity.HasOne(d => d.EQUIPMENTCONFIG).WithMany(p => p.EQUIPMENTCONFIGCOMMENT)
                .HasForeignKey(d => new { d.EQUIPMENTCODE, d.EQUIPMENTDATE })
                .HasConstraintName("FK_EQUIPMENTCONFIGCOMMENT_02");
        });

        modelBuilder.Entity<EQUIPMENTCONFIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTCONFIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("CommentCode table associated with the EQUIPMENTCONFIG table virtual field system. ");
                    tb.HasTrigger("T_EQUIPMENTCONFIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_EQUIPMENTCONFIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EQUIPMENTCONFIGDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.EQUIPMENTCODE, e.EQUIPMENTDATE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTCONFIGDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Details table associated with the EQUIPMENTCONFIG table virtual field system. ");
                    tb.HasTrigger("T_EQUIPMENTCONFIGDETAILS_IU");
                });

            entity.Property(e => e.EQUIPMENTCODE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EQUIPMENTDATE).HasColumnType("datetime");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.EQUIPMENTCONFIGDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EQUIPMENTCONFIGDETAILS_01");

            entity.HasOne(d => d.EQUIPMENTCONFIG).WithMany(p => p.EQUIPMENTCONFIGDETAILS)
                .HasForeignKey(d => new { d.EQUIPMENTCODE, d.EQUIPMENTDATE })
                .HasConstraintName("FK_EQUIPMENTCONFIGDETAILS_02");
        });

        modelBuilder.Entity<EQUIPMENTDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.EQUIPMENTCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Details table associated with the EQUIPMENT table virtual field system. ");
                    tb.HasTrigger("T_EQUIPMENTDETAILS_IU");
                });

            entity.Property(e => e.EQUIPMENTCODE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.EQUIPMENTCODENavigation).WithMany(p => p.EQUIPMENTDETAILS)
                .HasForeignKey(d => d.EQUIPMENTCODE)
                .HasConstraintName("FK_EQUIPMENTDETAILS_02");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.EQUIPMENTDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EQUIPMENTDETAILS_01");
        });

        modelBuilder.Entity<EQUIPMENTMODEL>(entity =>
        {
            entity.HasKey(e => e.EQUIPMENTMODELCODE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTMODEL", "dbo", tb => tb.HasComment("Stores details of the specific make and model of equipment available."));

            entity.Property(e => e.EQUIPMENTMODELCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the specific make and model of the stored equipment.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the make and model of equipment.");
            entity.Property(e => e.EQUIPMENTTYPECODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for the type of make and model of equipment.");

            entity.HasOne(d => d.EQUIPMENTTYPECODENavigation).WithMany(p => p.EQUIPMENTMODEL)
                .HasForeignKey(d => d.EQUIPMENTTYPECODE)
                .HasConstraintName("FK_EQUIPMENTMODEL_01");
        });

        modelBuilder.Entity<EQUIPMENTMODELBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.EQUIPMENTMODELCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTMODELBIGCOMMENT", "dbo", tb => tb.HasComment("BigComment table associated with the EQUIPMENTMODEL table virtual field system. "));

            entity.Property(e => e.EQUIPMENTMODELCODE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);

            entity.HasOne(d => d.EQUIPMENTMODELCODENavigation).WithMany(p => p.EQUIPMENTMODELBIGCOMMENT)
                .HasForeignKey(d => d.EQUIPMENTMODELCODE)
                .HasConstraintName("FK_EQUIPMENTMODELBIGCOMMENT_02");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.EQUIPMENTMODELBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EQUIPMENTMODELBIGCOMMENT_01");
        });

        modelBuilder.Entity<EQUIPMENTMODELBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTMODELBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("BigCommentCode table associated with the EQUIPMENTMODEL table virtual field system. ");
                    tb.HasTrigger("T_EQUIPMENTMODELBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_EQUIPMENTMODELBIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EQUIPMENTMODELCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTMODELCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with the EQUIPMENTMODEL table virtual field system. Load order: 3 ");
                    tb.HasTrigger("T_EQUIPMENTMODELCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_EQUIPMENTMODELCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.EQUIPMENTMODELCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EQUIPMENTMODELCODE_01");
        });

        modelBuilder.Entity<EQUIPMENTMODELCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.EQUIPMENTMODELCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTMODELCOMMENT", "dbo", tb => tb.HasComment("Comment table associated with the EQUIPMENTMODEL table virtual field system. "));

            entity.Property(e => e.EQUIPMENTMODELCODE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.EQUIPMENTMODELCODENavigation).WithMany(p => p.EQUIPMENTMODELCOMMENT)
                .HasForeignKey(d => d.EQUIPMENTMODELCODE)
                .HasConstraintName("FK_EQUIPMENTMODELCOMMENT_02");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.EQUIPMENTMODELCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EQUIPMENTMODELCOMMENT_01");
        });

        modelBuilder.Entity<EQUIPMENTMODELCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTMODELCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("CommentCode table associated with the EQUIPMENTMODEL table virtual field system. ");
                    tb.HasTrigger("T_EQUIPMENTMODELCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_EQUIPMENTMODELCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EQUIPMENTMODELDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.EQUIPMENTMODELCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTMODELDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Details table associated with the EQUIPMENTMODEL table virtual field system. ");
                    tb.HasTrigger("T_EQUIPMENTMODELDETAILS_IU");
                });

            entity.Property(e => e.EQUIPMENTMODELCODE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.EQUIPMENTMODELCODENavigation).WithMany(p => p.EQUIPMENTMODELDETAILS)
                .HasForeignKey(d => d.EQUIPMENTMODELCODE)
                .HasConstraintName("FK_EQUIPMENTMODELDETAILS_02");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.EQUIPMENTMODELDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EQUIPMENTMODELDETAILS_01");
        });

        modelBuilder.Entity<EQUIPMENTTYPE>(entity =>
        {
            entity.HasKey(e => e.EQUIPMENTTYPECODE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("EQUIPMENTTYPE", "dbo", tb => tb.HasComment("Stores details of the piece of equipment listed in EQUIPMENTMODEL."));

            entity.Property(e => e.EQUIPMENTTYPECODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier of this type of equipment, for example 'DDH Drill Rig'.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of this type of equipment.");
        });

        modelBuilder.Entity<ErrorMessage>(entity =>
        {
            entity.HasKey(e => e.ErrorMessageId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ErrorMessage", "AcqManagement");

            entity.Property(e => e.ErrorMessageId).ValueGeneratedNever();
            entity.Property(e => e.MessageFormat)
                .IsRequired()
                .HasMaxLength(1000);
        });

        modelBuilder.Entity<Expression>(entity =>
        {
            entity.HasKey(e => e.ExpressionId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Expression", "AcqPresentation", tb =>
                {
                    tb.HasComment("Details information pertaining to a saved Expression.");
                    tb.HasTrigger("T_Expression_OD");
                });

            entity.Property(e => e.ExpressionId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.CreatorId).HasComment("The Creator of the Expression.");
            entity.Property(e => e.ExpressionData)
                .IsRequired()
                .HasComment("The xml data comprising the Expression.")
                .HasColumnType("xml");
            entity.Property(e => e.IsPublic).HasComment("Is the Expression public.");

            entity.HasOne(d => d.Creator).WithMany(p => p.Expression)
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Expression_01");
        });

        modelBuilder.Entity<FieldAttribute>(entity =>
        {
            entity.HasKey(e => e.FieldAttributeId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("FieldAttribute", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the field attributes, including precision, storage, or custom attribute details.");
                    tb.HasTrigger("T_FieldAttribute_OD");
                });

            entity.HasIndex(e => e.Name, "UQ_FieldAttribute_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.FieldAttributeId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.ConstraintCondition)
                .HasComment("If type is \"Constraint\", this is the xml detailing the expression which defines the constraint.")
                .HasColumnType("xml");
            entity.Property(e => e.CustomAttributeDetails)
                .HasComment("If type is \"Custom\", this is the xml explaining the custom attribute details. This may include the definition of an expression which defines the value of the attribute based on the value of the field.")
                .HasColumnType("xml");
            entity.Property(e => e.CustomFieldAttributeTypeId).HasComment("If type is \"Custom\", this is the related type information for this custom attribute.");
            entity.Property(e => e.DataSourceId)
                .HasDefaultValueSql("([AcqMetaSystem].[GetManualDataSourceId]())")
                .HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.DateStoragePrecision)
                .HasMaxLength(100)
                .HasComment("The Precision of a date field.");
            entity.Property(e => e.FieldAttributeType)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The Type of Field Attribute, such as precision.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The Name of the Attribute.");
            entity.Property(e => e.NumericStoragePrecision).HasComment("The Precision for numeric storage fields.");
            entity.Property(e => e.NumericStorageScale).HasComment("The Scale for numeric storage fields.");
            entity.Property(e => e.ParentFieldAttributeId).HasComment("This is optional, and is included such that a field attribute can be made up of many other field attributes additively.");
            entity.Property(e => e.UnitId).HasComment("If type is \"Unit\", this is the unit of measure. This can later link to a table detailing the unit (and related tables detailing conversions, etc), but as there is no such functionality in 4.x at present anyway, this will just stay null until required.");

            entity.HasOne(d => d.CustomFieldAttributeType).WithMany(p => p.FieldAttribute)
                .HasForeignKey(d => d.CustomFieldAttributeTypeId)
                .HasConstraintName("FK_FieldAttribute_01");

            entity.HasOne(d => d.ParentFieldAttribute).WithMany(p => p.InverseParentFieldAttribute)
                .HasForeignKey(d => d.ParentFieldAttributeId)
                .HasConstraintName("FK_FieldAttribute_02");

            entity.HasOne(d => d.Unit).WithMany(p => p.FieldAttribute)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_FieldAttribute_03");
        });

        modelBuilder.Entity<FieldType>(entity =>
        {
            entity.HasKey(e => e.FieldTypeId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("FieldType", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the types of fields supported by the system.");
                    tb.HasTrigger("T_FieldType_OD");
                });

            entity.HasIndex(e => e.Name, "UQ_FieldType_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.FieldTypeId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.DataSourceId)
                .HasDefaultValueSql("([AcqMetaSystem].[GetManualDataSourceId]())")
                .HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.Datatype)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The Datatype that matches this field type.");
            entity.Property(e => e.IsBaseFieldType).HasComment("The flag for determining the base fields.");
            entity.Property(e => e.IsSingleField).HasComment("Flag to indicate if the type is tied to a single field.");
            entity.Property(e => e.MaxSize).HasComment("Maximum size for text fields.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The Name of the Field Type.");

            entity.HasOne(d => d.DataSource).WithMany(p => p.FieldType)
                .HasForeignKey(d => d.DataSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FieldType_01");

            entity.HasMany(d => d.FieldAttribute).WithMany(p => p.FieldType)
                .UsingEntity<Dictionary<string, object>>(
                    "FieldTypeFieldAttribute",
                    r => r.HasOne<FieldAttribute>().WithMany()
                        .HasForeignKey("FieldAttributeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FieldTypeFieldAttribute_01"),
                    l => l.HasOne<FieldType>().WithMany()
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FieldTypeFieldAttribute_02"),
                    j =>
                    {
                        j.HasKey("FieldTypeId", "FieldAttributeId").HasAnnotation("SqlServer:FillFactor", 80);
                        j.ToTable("FieldTypeFieldAttribute", "AcqMetaSystem", tb => tb.HasComment("Details the attributes related to a field type."));
                        j.IndexerProperty<int>("FieldTypeId").HasComment("The Field Type to link to attributes.");
                        j.IndexerProperty<int>("FieldAttributeId").HasComment("The Attributes to link to the field type.");
                    });
        });

        modelBuilder.Entity<FieldTypeAcceptableValueText>(entity =>
        {
            entity.HasKey(e => new { e.FieldTypeId, e.Value }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("FieldTypeAcceptableValueText", "AcqMetaSystem");

            entity.HasIndex(e => new { e.FieldTypeId, e.OrderNumber }, "UQ_FieldTypeAcceptableValueText_01").IsUnique();

            entity.Property(e => e.Value).HasMaxLength(254);
            entity.Property(e => e.Description).HasMaxLength(2000);
            entity.Property(e => e.GroupName).HasMaxLength(254);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Label).HasMaxLength(254);

            entity.HasOne(d => d.FieldType).WithMany(p => p.FieldTypeAcceptableValueText)
                .HasForeignKey(d => d.FieldTypeId)
                .HasConstraintName("FK_FieldTypeAcceptableValueText_01");
        });

        modelBuilder.Entity<File>(entity =>
        {
            entity.HasKey(e => e.FileGlobalId).HasName("PK_AcqManagement_File");

            entity.ToTable("File", "AcqManagement", tb => tb.HasComment("Contains files that should be available to any acQuire application that uses this database."));

            entity.Property(e => e.FileGlobalId)
                .ValueGeneratedNever()
                .HasComment("The auto incrementing GUID primary key.");
            entity.Property(e => e.FileBinaryType)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("The MIME type of the file.");
            entity.Property(e => e.FileBinaryValue)
                .IsRequired()
                .HasComment("The binary file data.");
            entity.Property(e => e.Filename)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The name of the file.");
        });

        modelBuilder.Entity<ForeignKeyRelationships>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ForeignKeyRelationships", "AcqMetaSystem");

            entity.Property(e => e.DependentBaseTableName)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.DependentCompoundName).HasMaxLength(200);
            entity.Property(e => e.DependentFieldName).HasMaxLength(128);
            entity.Property(e => e.InternalName)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.ReferencedBaseTableName)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.ReferencedCompoundName).HasMaxLength(200);
            entity.Property(e => e.ReferencedFieldName).HasMaxLength(128);
            entity.Property(e => e.Schema)
                .IsRequired()
                .HasMaxLength(128);
        });

        modelBuilder.Entity<Form>(entity =>
        {
            entity.HasKey(e => e.FormId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Form", "AcqPresentation", tb => tb.HasComment("Details information about user Forms in the system."));

            entity.HasIndex(e => e.Label, "UQ_Form_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.FormId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("A description of the form.");
            entity.Property(e => e.FormData)
                .IsRequired()
                .HasComment("An XML document detailing information about the form.")
                .HasColumnType("xml");
            entity.Property(e => e.FormElementId).HasComment("The root form element for this form.");
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The label for the form.");
            entity.Property(e => e.Style)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("The style of the form being defined.");

            entity.HasOne(d => d.FormElement).WithMany(p => p.Form)
                .HasForeignKey(d => d.FormElementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Form_01");
        });

        modelBuilder.Entity<FormElement>(entity =>
        {
            entity.HasKey(e => e.FormElementId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("FormElement", "AcqPresentation", tb => tb.HasComment("Details information about user Forms in the system."));

            entity.HasIndex(e => e.Label, "UQ_FormElement_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.FormElementId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.CompoundId).HasComment("The primary key of the compound which this form element relates to, if any.");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("A description of the form element.");
            entity.Property(e => e.ElementData)
                .IsRequired()
                .HasComment("An XML document detailing information about the form element.")
                .HasColumnType("xml");
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The label for the form element.");

            entity.HasOne(d => d.Compound).WithMany(p => p.FormElement)
                .HasForeignKey(d => d.CompoundId)
                .HasConstraintName("FK_FormElement_01");

            entity.HasMany(d => d.DependentFormElement).WithMany(p => p.FormElementNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "FormElementDependency",
                    r => r.HasOne<FormElement>().WithMany()
                        .HasForeignKey("DependentFormElementId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FormElementDependency_02"),
                    l => l.HasOne<FormElement>().WithMany()
                        .HasForeignKey("FormElementId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FormElementDependency_01"),
                    j =>
                    {
                        j.HasKey("FormElementId", "DependentFormElementId").HasAnnotation("SqlServer:FillFactor", 80);
                        j.ToTable("FormElementDependency", "AcqPresentation", tb =>
                            {
                                tb.HasComment("Details information about user form element dependencies.");
                                tb.HasTrigger("T_FormElementDependency_IU");
                            });
                        j.IndexerProperty<int>("FormElementId").HasComment("The form element being depended on.");
                        j.IndexerProperty<int>("DependentFormElementId").HasComment("The form element depending on the other form element.");
                    });

            entity.HasMany(d => d.FormElementNavigation).WithMany(p => p.DependentFormElement)
                .UsingEntity<Dictionary<string, object>>(
                    "FormElementDependency",
                    r => r.HasOne<FormElement>().WithMany()
                        .HasForeignKey("FormElementId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FormElementDependency_01"),
                    l => l.HasOne<FormElement>().WithMany()
                        .HasForeignKey("DependentFormElementId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_FormElementDependency_02"),
                    j =>
                    {
                        j.HasKey("FormElementId", "DependentFormElementId").HasAnnotation("SqlServer:FillFactor", 80);
                        j.ToTable("FormElementDependency", "AcqPresentation", tb =>
                            {
                                tb.HasComment("Details information about user form element dependencies.");
                                tb.HasTrigger("T_FormElementDependency_IU");
                            });
                        j.IndexerProperty<int>("FormElementId").HasComment("The form element being depended on.");
                        j.IndexerProperty<int>("DependentFormElementId").HasComment("The form element depending on the other form element.");
                    });
        });

        modelBuilder.Entity<GDCOORDINATESET>(entity =>
        {
            entity.HasKey(e => e.COORDINATESET).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GDCOORDINATESET", "dbo", tb =>
                {
                    tb.HasTrigger("T_GCS_CON_IU");
                    tb.HasTrigger("T_GDCOORDINATESET_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.COORDINATESET)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SURVEYMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.GRIDNAMENavigation).WithMany(p => p.GDCOORDINATESET)
                .HasForeignKey(d => d.GRIDNAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GDCOORDINATESET_GRID");

            entity.HasOne(d => d.SURVEYMETHODNavigation).WithMany(p => p.GDCOORDINATESET)
                .HasForeignKey(d => d.SURVEYMETHOD)
                .HasConstraintName("FK_GDCOORDSET_GDSURVEYMETHOD");
        });

        modelBuilder.Entity<GDCOORDINATESYSTEM>(entity =>
        {
            entity.HasKey(e => e.SRID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GDCOORDINATESYSTEM", "dbo", tb => tb.HasComment("Stores details of geodatums, projections and coordinate systems."));

            entity.Property(e => e.SRID)
                .ValueGeneratedNever()
                .HasComment("The spatial reference ID as defined by the European and Petroleum Survey Group (EPSG).");
            entity.Property(e => e.DATUM)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Defines the Datum.");
            entity.Property(e => e.ESRI_STRING)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasComment("Provides details of the datum and projection.");
            entity.Property(e => e.GRIDTYPE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The grid type of the spatial reference ID - geopgraphic, projected or local.");
            entity.Property(e => e.PROJECTION)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Defines the projection.");
            entity.Property(e => e.SOURCE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The original source of the information.");

            entity.HasOne(d => d.DATUMNavigation).WithMany(p => p.GDCOORDINATESYSTEM)
                .HasForeignKey(d => d.DATUM)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GDCOORDINATESYSTEM_01");

            entity.HasOne(d => d.GRIDTYPENavigation).WithMany(p => p.GDCOORDINATESYSTEM)
                .HasForeignKey(d => d.GRIDTYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GDCOORDINATESYSTEM_03");

            entity.HasOne(d => d.PROJECTIONNavigation).WithMany(p => p.GDCOORDINATESYSTEM)
                .HasForeignKey(d => d.PROJECTION)
                .HasConstraintName("FK_GDCOORDINATESYSTEM_02");
        });

        modelBuilder.Entity<GDDATUM>(entity =>
        {
            entity.HasKey(e => e.DATUM).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GDDATUM", "dbo", tb => tb.HasComment("Stores the set of geodetic reference datums usable by acQuire."));

            entity.Property(e => e.DATUM)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the reference datum.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the reference datum.");
            entity.Property(e => e.ECCENTRICITY)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value of the eccentricity parameter defined for the reference datum.");
            entity.Property(e => e.MAJORAXIS)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value of the major axis parameter defined for the reference datum.");
            entity.Property(e => e.PRIMEMERIDIAN)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value of the prime meridian parameter defined for the reference datum.");
        });

        modelBuilder.Entity<GDGRIDTYPE>(entity =>
        {
            entity.HasKey(e => e.GRIDTYPE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GDGRIDTYPE", "dbo", tb => tb.HasComment("This reference table has a DLO of 0 and cannot be edited. "));

            entity.Property(e => e.GRIDTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GDLOCALDATUMTRANSFORM>(entity =>
        {
            entity.HasKey(e => e.LOCALDATUMTRANSFORM).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GDLOCALDATUMTRANSFORM", "dbo", tb => tb.HasComment("Stores the set of geodetic reference datum transformations usable by acQuire."));

            entity.Property(e => e.LOCALDATUMTRANSFORM)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The code of the transformation.");
            entity.Property(e => e.DATUM)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The reference datum from which the coordinates will be transformed.");
            entity.Property(e => e.DX)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value of the dX parameter required to perform the transformation.");
            entity.Property(e => e.DY)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value of the dY parameter required to perform the transformation.");
            entity.Property(e => e.DZ)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value of the dZ parameter required to perform the transformation.");
            entity.Property(e => e.LOCALDATUMTRANSFORMCODE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The descriptive name of the transformation.");
            entity.Property(e => e.RX)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value of the Rx parameter required to perform the transformation.");
            entity.Property(e => e.RY)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value of the Ry parameter required to perform the transformation.");
            entity.Property(e => e.RZ)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value of the Rz parameter required to perform the transformation.");
            entity.Property(e => e.SCALE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value of the scale parameter required to perform the transformation.");

            entity.HasOne(d => d.DATUMNavigation).WithMany(p => p.GDLOCALDATUMTRANSFORM)
                .HasForeignKey(d => d.DATUM)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GDLOCALTRANSFORM_GDDATUM");
        });

        modelBuilder.Entity<GDPROJECTION>(entity =>
        {
            entity.HasKey(e => e.PROJECTION).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GDPROJECTION", "dbo", tb => tb.HasComment("Stores the set of map projections usable by acQuire."));

            entity.Property(e => e.PROJECTION)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The name of the map projection.");
            entity.Property(e => e.PARAMETERP1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The value of the P1 parameter required to define the projection. (Each parameters' definition changes depending on the projection system used.)");
            entity.Property(e => e.PARAMETERP2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The value of the P2 parameter required to define the projection. (Each parameters' definition changes depending on the projection system used.)");
            entity.Property(e => e.PARAMETERP3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The value of the P3 parameter required to define the projection. (Each parameters' definition changes depending on the projection system used.)");
            entity.Property(e => e.PARAMETERP4)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The value of the P4 parameter required to define the projection. (Each parameters' definition changes depending on the projection system used.)");
            entity.Property(e => e.PARAMETERP5)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The value of the P5 parameter required to define the projection. (Each parameters' definition changes depending on the projection system used.)");
            entity.Property(e => e.PARAMETERP6)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The value of the P6 parameter required to define the projection. (Each parameters' definition changes depending on the projection system used.)");
            entity.Property(e => e.PARAMETERP7)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The value of the P7 parameter required to define the projection. (Each parameters' definition changes depending on the projection system used.)");
            entity.Property(e => e.PARAMETERP8)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The value of the P8 parameter required to define the projection. (Each parameters' definition changes depending on the projection system used.)");
            entity.Property(e => e.TYPE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The projection system used.");
            entity.Property(e => e.UNITS)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The units used for length measurements.");

            entity.HasOne(d => d.UNITSNavigation).WithMany(p => p.GDPROJECTION)
                .HasForeignKey(d => d.UNITS)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GDPROJECTION_GDUNITS");
        });

        modelBuilder.Entity<GDSURVEYMETHOD>(entity =>
        {
            entity.HasKey(e => e.SURVEYMETHOD).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GDSURVEYMETHOD", "dbo");

            entity.Property(e => e.SURVEYMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GDTRANSFORMATIONTYPE>(entity =>
        {
            entity.HasKey(e => e.TRANSFORMATIONTYPE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GDTRANSFORMATIONTYPE", "dbo", tb => tb.HasComment("This reference table has a DLO of 0 and cannot be edited. "));

            entity.Property(e => e.TRANSFORMATIONTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GDUNITS>(entity =>
        {
            entity.HasKey(e => e.UNITS).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GDUNITS", "dbo", tb => tb.HasComment("This reference table has a DLO of 0 and cannot be edited. "));

            entity.Property(e => e.UNITS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GEOBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.GEOLFROM, e.GEOLTO, e.PRIORITY, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOBIGCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("GeoBigComment Table stores long geology comments (up to 4000 characters) for a HoleID/ProjectCode combination. It is associated with the GeoInterval table and other details tables to make up the Geology compound definition. ");
                    tb.HasTrigger("T_GBC_CON");
                    tb.HasTrigger("T_XDM_GEOBIGCOMMENT_IUD");
                });

            entity.HasIndex(e => e.HOLEID, "IDX_GEOBIGCOMMENT_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_GEOBIGCOMMENT_02").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.GEOBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOBIGCOMMENT");
        });

        modelBuilder.Entity<GEOBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("GeoBigCommentCode stores the names of the virtual fields for GeoBigComment (long comments) that are associated with the Geology compound definition. ");
                    tb.HasTrigger("T_GEOBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_GEOBIGCOMMENTCODE_U");
                    tb.HasTrigger("T_GEOBIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.PRIMARYCODE)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.GEOBIGCOMMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOBIGCOMMENTCODE");

            entity.HasOne(d => d.PRIMARYCODENavigation).WithMany(p => p.GEOBIGCOMMENTCODE)
                .HasForeignKey(d => d.PRIMARYCODE)
                .HasConstraintName("FK_GBCC_GCP");
        });

        modelBuilder.Entity<GEOCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.GEOLFROM, e.GEOLTO, e.PRIORITY, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("GeoComment allows the user to record information or comments for an interval. The comment (Value) is given a Priority number. Thus for a particular interval there can be many comments, each with a different priority. Priority can be used to subset the data for reports (eg. Priority = 1 reported and not others), it can be used as a key to different comment topics. For example: Priority 1 = Geology comments. Priority 2 = Texture comments and so on. ");
                    tb.HasTrigger("T_GC_CON");
                    tb.HasTrigger("T_XDM_GEOCOMMENT_IUD");
                });

            entity.HasIndex(e => e.HOLEID, "IDX_GEOCOMMENT_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_GEOCOMMENT_02").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.GEOCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOCOMMENT");
        });

        modelBuilder.Entity<GEOCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Virtual fields defined for the comments section of a Geology compound form are defined here. The fields are defined in Manage, Virtual Field Wizard. ");
                    tb.HasTrigger("T_GEOCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_GEOCOMMENTCODE_U");
                    tb.HasTrigger("T_GEOCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.PRIMARYCODE)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.GEOCOMMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOCOMMENTCODE");

            entity.HasOne(d => d.PRIMARYCODENavigation).WithMany(p => p.GEOCOMMENTCODE)
                .HasForeignKey(d => d.PRIMARYCODE)
                .HasConstraintName("FK_GCC_GCP");
        });

        modelBuilder.Entity<GEOCONTINUITY>(entity =>
        {
            entity.HasKey(e => e.CONTINUITY).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOCONTINUITY", "dbo", tb => tb.HasComment("This table is the reference table for GeologyCodePrimary Continuity. The particular codes that can be associated with a PrimaryCode are defined in this table. "));

            entity.Property(e => e.CONTINUITY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GEODETAILS>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.GEOLFROM, e.GEOLTO, e.PRIORITY, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEODETAILS", "dbo", tb =>
                {
                    tb.HasComment("The names and values for the virtual fields of the Geology compound forms are stored in this table. ");
                    tb.HasTrigger("LastModifiedUTGeoDetails");
                    tb.HasTrigger("T_GD_VAL");
                    tb.HasTrigger("T_XDM_GEODETAILS_IUD");
                });

            entity.HasIndex(e => e.HOLEID, "IDX_GEODETAILS_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_GEODETAILS_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.PRIORITY, e.HOLEID }, "missing_index_1").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.GEODETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEODETAILS_GCS");
        });

        modelBuilder.Entity<GEOINTERVAL>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.GEOLFROM, e.GEOLTO, e.PRIORITY }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOINTERVAL", "dbo", tb =>
                {
                    tb.HasComment("GeoInterval can be used to associate an interval (GeolFrom to GeolTo) in a particular drillhole (HoleID) with particulars (GeolCode(s)) about that interval. It is the main table of the Geology compound form definition.  You might like to establish the GeologyCodePrimary first (this is optional) and then the virtual fields that are viewed in a Geology form. The GeologyCodePrimary is usually a general category or classification e.g. Mineralization, Lithology, Structure and so on. The associated virtual fields (GeologyCodeSecondary) can be a subset of the GeologyCodePrimary e.g. Alteration, Sulphides, % Fracturing, Quartz Veining, Weathering and so on. It is a bit like a tree structure - the GeologyCodePrimary is the trunk and the GeologyCodeSecondary(s) are the branches. The Name(s) are the leaves. Store downhole point information (such as geotechnical readings). As above but the GeolFrom and GeolTo would be equal - to define a point in space. For example: GeologyCodePrimary = Mineralztn and there are three SecondaryCodes: GeologyCodeSecondary = Min1 (major) ");
                    tb.HasTrigger("LastModifiedUTGeoInterval");
                    tb.HasTrigger("T_GI_CAS");
                    tb.HasTrigger("T_GI_VAL_I");
                    tb.HasTrigger("T_GI_VAL_U");
                });

            entity.HasIndex(e => e.HOLEID, "IDX_GEOINTERVAL_01").HasFillFactor(80);

            entity.HasIndex(e => e.GLOBALID, "UQ_GEOINTERVAL_01").IsUnique();

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GLOBALID).HasDefaultValueSql("(newsequentialid())");
        });

        modelBuilder.Entity<GEOINTERVALPRIMARYCODE>(entity =>
        {
            entity.HasKey(e => e.LOCALID);

            entity.ToTable("GEOINTERVALPRIMARYCODE", "dbo", tb => tb.HasComment("This table links an ID for the GEOINTERVAL table to a PRIMARYCODE."));

            entity.HasIndex(e => new { e.GEOINTERVAL_ID, e.PRIMARYCODE }, "UQ_GEOINTERVALPRIMARYCODE_01").IsUnique();

            entity.Property(e => e.PRIMARYCODE)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.PRIMARYCODENavigation).WithMany(p => p.GEOINTERVALPRIMARYCODE)
                .HasForeignKey(d => d.PRIMARYCODE)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_GEOINTERVALPRIMARYCODE_01");
        });

        modelBuilder.Entity<GEOLOGYCODEPRIMARY>(entity =>
        {
            entity.HasKey(e => e.PRIMARYCODE)
                .HasName("PRIMARYKEYGEOLOGYCODEPRIMARY")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOLOGYCODEPRIMARY", "dbo", tb =>
                {
                    tb.HasComment("GeologyCodePrimary provides the user with the tools to collect geological information about an interval in space (usually referenced as a distance from a starting point, such as with a drillhole collar) in a structured fashion. ");
                    tb.HasTrigger("T_GEOLOGYCODEPRIMARY_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.PRIMARYCODE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CONTINUITY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.CONTINUITYNavigation).WithMany(p => p.GEOLOGYCODEPRIMARY)
                .HasForeignKey(d => d.CONTINUITY)
                .HasConstraintName("FK_GEOCODEPRIM_CONTINUITY");
        });

        modelBuilder.Entity<GEOLOGYCODESECONDARY>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOLOGYCODESECONDARY", "dbo", tb =>
                {
                    tb.HasComment("GeologyCodeSecondary is the storage of SecondaryCode(s) - each SecondaryCode may be associated with a PrimaryCode that must be defined first in GeologyCodePrimary  ");
                    tb.HasTrigger("T_GEOLOGYCODESECONDARY_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_GEOLOGYCODESECONDARY_U");
                    tb.HasTrigger("T_GEOLOGYCODESECONDARY_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.PRIMARYCODE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.GEOLOGYCODESECONDARY)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GCS_DATATYPE");

            entity.HasOne(d => d.PRIMARYCODENavigation).WithMany(p => p.GEOLOGYCODESECONDARY)
                .HasForeignKey(d => d.PRIMARYCODE)
                .HasConstraintName("FK_GCS_GCP");
        });

        modelBuilder.Entity<GEOPHYSCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSCODE", "dbo", tb =>
                {
                    tb.HasTrigger("T_GEOPHYSCODE_IU");
                    tb.HasTrigger("T_GEOPHYSCODE_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CATEGORY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.CATEGORYNavigation).WithMany(p => p.GEOPHYSCODE)
                .HasForeignKey(d => d.CATEGORY)
                .HasConstraintName("FK_GEOPHYSCODE_CATEGORY");

            entity.HasOne(d => d.UNITSNavigation).WithMany(p => p.GEOPHYSCODE)
                .HasForeignKey(d => d.UNITS)
                .HasConstraintName("FK_GEOPHYSCODE_UNITS");
        });

        modelBuilder.Entity<GEOPHYSCODECATEGORY>(entity =>
        {
            entity.HasKey(e => e.CATEGORY).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSCODECATEGORY", "dbo");

            entity.Property(e => e.CATEGORY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GEOPHYSDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.GEOPHYSGID, e.PROPERTYID, e.DEPTH, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSDETAILS", "dbo", tb =>
                {
                    tb.HasTrigger("LastModifiedUTGeophysDetails");
                    tb.HasTrigger("T_GEOPHYSDETAILS_IU");
                });

            entity.Property(e => e.DEPTH).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.GEOPHYSG).WithMany(p => p.GEOPHYSDETAILS)
                .HasForeignKey(d => d.GEOPHYSGID)
                .HasConstraintName("FK_GEOPHYSDETAILS_GEOPHYSHEADER");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.GEOPHYSDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOPHYSDETAILS_CODE");

            entity.HasOne(d => d.PROPERTY).WithMany(p => p.GEOPHYSDETAILS)
                .HasForeignKey(d => d.PROPERTYID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOPHYSDETAILS_PROPERTYID");
        });

        modelBuilder.Entity<GEOPHYSHEADER>(entity =>
        {
            entity.HasKey(e => e.GEOPHYSGID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSHEADER", "dbo", tb =>
                {
                    tb.HasTrigger("LastModifiedUTGeophysHeader");
                    tb.HasTrigger("T_GEOPHYSHEADER_I");
                    tb.HasTrigger("T_GEOPHYSHEADER_U");
                });

            entity.HasIndex(e => e.LOOP, "IX_GEOPHYSHEADER").HasFillFactor(80);

            entity.HasIndex(e => new { e.HOLEID, e.PROJECTCODE, e.TYPE, e.DEPTHSTEP, e.RUN, e.PRIORITY }, "UQ_GEOPHYSHEADER")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.GEOPHYSGID).ValueGeneratedNever();
            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOOP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PRIORITY).HasDefaultValue(1);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RUN).HasDefaultValue(1);
            entity.Property(e => e.TYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("STD");

            entity.HasOne(d => d.LOOPNavigation).WithMany(p => p.GEOPHYSHEADER)
                .HasForeignKey(d => d.LOOP)
                .HasConstraintName("FK_GEOPHYSHEADER_GEOPHYSLOOP");

            entity.HasOne(d => d.TYPENavigation).WithMany(p => p.GEOPHYSHEADER)
                .HasForeignKey(d => d.TYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOPHYSHEADER_GEOPHYSTYPE");

            entity.HasOne(d => d.HOLELOCATION).WithMany(p => p.GEOPHYSHEADER)
                .HasForeignKey(d => new { d.PROJECTCODE, d.HOLEID })
                .HasConstraintName("FK_GEOPHYSHEADER_HOLELOCATION");
        });

        modelBuilder.Entity<GEOPHYSHEADERBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.GEOPHYSGID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSHEADERBIGCOMMENT", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);

            entity.HasOne(d => d.GEOPHYSG).WithMany(p => p.GEOPHYSHEADERBIGCOMMENT)
                .HasForeignKey(d => d.GEOPHYSGID)
                .HasConstraintName("FK_GEOPHYSHEADERBIGCOMMENT_GEOPHYSGID");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.GEOPHYSHEADERBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOPHYSHEADERBIGCOMMENT_NAME");
        });

        modelBuilder.Entity<GEOPHYSHEADERBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSHEADERBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasTrigger("T_GEOPHYSHEADERBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_GEOPHYSHEADERBIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.GEOPHYSHEADERBIGCOMMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOPHYSHEADERBIGCOMMENTCODE_DATATYPE");
        });

        modelBuilder.Entity<GEOPHYSHEADERCATEGORY>(entity =>
        {
            entity.HasKey(e => e.HCATEGORY).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSHEADERCATEGORY", "dbo");

            entity.Property(e => e.HCATEGORY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GEOPHYSHEADERCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.GEOPHYSGID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSHEADERCOMMENT", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.GEOPHYSG).WithMany(p => p.GEOPHYSHEADERCOMMENT)
                .HasForeignKey(d => d.GEOPHYSGID)
                .HasConstraintName("FK_GEOPHYSHEADERCOMMENT_GEOPHYSHEADER");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.GEOPHYSHEADERCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOPHYSHEADERCOMMENT_CODE");
        });

        modelBuilder.Entity<GEOPHYSHEADERCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSHEADERCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasTrigger("T_GEOPHYSHEADERCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_GEOPHYSHEADERCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.HCATEGORY)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.GEOPHYSHEADERCOMMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOPHYSHEADERCOMMENTCODE_DATATYPE");

            entity.HasOne(d => d.HCATEGORYNavigation).WithMany(p => p.GEOPHYSHEADERCOMMENTCODE)
                .HasForeignKey(d => d.HCATEGORY)
                .HasConstraintName("FK_GEOPHYSHEADERCOMMENTCODE_HC");
        });

        modelBuilder.Entity<GEOPHYSHEADERDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.GEOPHYSGID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSHEADERDETAILS", "dbo", tb =>
                {
                    tb.HasTrigger("LastModifiedUTGeophysHeaderDetails");
                    tb.HasTrigger("T_GEOPHYSHEADERDETAILS_IU");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.GEOPHYSG).WithMany(p => p.GEOPHYSHEADERDETAILS)
                .HasForeignKey(d => d.GEOPHYSGID)
                .HasConstraintName("FK_GEOPHYSHEADERDETAILS_GEOPHYSHEADER");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.GEOPHYSHEADERDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOPHYSHEADERDETAILS_CODE");
        });

        modelBuilder.Entity<GEOPHYSHEADERDETAILSCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSHEADERDETAILSCODE", "dbo", tb =>
                {
                    tb.HasTrigger("T_GEOPHYSHEADERDETAILSCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_GEOPHYSHEADERDETAILSCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.HCATEGORY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.GEOPHYSHEADERDETAILSCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOPHYSHEADERDETAILSCODE_DATATYPE");

            entity.HasOne(d => d.HCATEGORYNavigation).WithMany(p => p.GEOPHYSHEADERDETAILSCODE)
                .HasForeignKey(d => d.HCATEGORY)
                .HasConstraintName("FK_GEOPHYSHEADERDETAILSCODE_HC");

            entity.HasOne(d => d.UNITSNavigation).WithMany(p => p.GEOPHYSHEADERDETAILSCODE)
                .HasForeignKey(d => d.UNITS)
                .HasConstraintName("FK_GEOPHYSHEADERDETAILSCODE_UNITS");
        });

        modelBuilder.Entity<GEOPHYSIDENTITY>(entity =>
        {
            entity.HasKey(e => e.GEOPHYSGID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSIDENTITY", "dbo");

            entity.Property(e => e.DUMMY)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<GEOPHYSLOOP>(entity =>
        {
            entity.HasKey(e => e.LOOP).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSLOOP", "dbo");

            entity.Property(e => e.LOOP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GEOPHYSLOOPCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSLOOPCODE", "dbo", tb =>
                {
                    tb.HasTrigger("T_GEOPHYSLOOPCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_GEOPHYSLOOPCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.GEOPHYSLOOPCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOPHYSLOOPCODE_DATATYPE");
        });

        modelBuilder.Entity<GEOPHYSLOOPCOORD>(entity =>
        {
            entity.HasKey(e => new { e.LOOP, e.NODE, e.COORDINATESET }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSLOOPCOORD", "dbo");

            entity.Property(e => e.LOOP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COORDINATESET)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.COORDINATESETNavigation).WithMany(p => p.GEOPHYSLOOPCOORD)
                .HasForeignKey(d => d.COORDINATESET)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOPHYSLOOPCOORD_GDCOORDINATESET");

            entity.HasOne(d => d.LOOPNavigation).WithMany(p => p.GEOPHYSLOOPCOORD)
                .HasForeignKey(d => d.LOOP)
                .HasConstraintName("FK_GEOPHYSLOOPCOORD_GEOPHYSLOOP");
        });

        modelBuilder.Entity<GEOPHYSLOOPDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.LOOP, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSLOOPDETAILS", "dbo", tb => tb.HasTrigger("T_GEOPHYSLOOPDETAILS_IU"));

            entity.Property(e => e.LOOP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.LOOPNavigation).WithMany(p => p.GEOPHYSLOOPDETAILS)
                .HasForeignKey(d => d.LOOP)
                .HasConstraintName("FK_GEOPHYSLOOPDETAILS_GEOPHYSLOOP");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.GEOPHYSLOOPDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GEOPHYSLOOPDETAILS_CODE");
        });

        modelBuilder.Entity<GEOPHYSPROPERTY>(entity =>
        {
            entity.HasKey(e => e.PROPERTYID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSPROPERTY", "dbo", tb =>
                {
                    tb.HasTrigger("T_GEOPHYSPROPERTY_D");
                    tb.HasTrigger("T_GEOPHYSPROPERTY_OLD_D");
                    tb.HasTrigger("T_GEOPHYSPROPERTY_OLD_U");
                    tb.HasTrigger("T_GEOPHYSPROPERTY_U");
                });

            entity.HasIndex(e => e.PROPERTYTAG, "UQ_GEOPHYSPROPERTY").IsUnique();

            entity.HasIndex(e => e.PROPERTYTAG, "UQ_GEOPHYSPROPERTY_OLD")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.PROPERTYID).ValueGeneratedNever();
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.PROPERTYTAG)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GEOPHYSTYPE>(entity =>
        {
            entity.HasKey(e => e.TYPE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GEOPHYSTYPE", "dbo", tb =>
                {
                    tb.HasTrigger("T_GEOPHYSTYPE_D");
                    tb.HasTrigger("T_GEOPHYSTYPE_U");
                });

            entity.Property(e => e.TYPE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GRID>(entity =>
        {
            entity.HasKey(e => e.GRIDNAME)
                .HasName("PRIMARYKEYGRID")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GRID", "dbo", tb =>
                {
                    tb.HasComment("Each sample collected (either DRILLHOLE or GEOCHEM) should be located in space (preferably in 3D space). The coordinates of a point can be stored in: If the HoleID of a point has a defined GridName in HoleLocation, then the coordinates must fit within the parameters of the grid before the record can be saved. ");
                    tb.HasTrigger("T_GRID_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_G_CON_I");
                    tb.HasTrigger("T_G_CON_U");
                    tb.HasTrigger("T_G_DCAS");
                    tb.HasTrigger("T_G_DEL");
                    tb.HasTrigger("T_G_UCAS");
                });

            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.COORDSYSTEM)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.GENERATION).HasDefaultValue(0);
            entity.Property(e => e.GRIDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOCALDATUMTRANSFORM)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PARENTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTION)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TRANSFORMATIONTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VERTICALUNITS)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.GRIDTYPENavigation).WithMany(p => p.GRID)
                .HasForeignKey(d => d.GRIDTYPE)
                .HasConstraintName("FK_GRID_GDGRIDTYPE");

            entity.HasOne(d => d.LOCALDATUMTRANSFORMNavigation).WithMany(p => p.GRID)
                .HasForeignKey(d => d.LOCALDATUMTRANSFORM)
                .HasConstraintName("FK_GRID_GDLOCALDATUMTRANSFORM");

            entity.HasOne(d => d.PROJECTIONNavigation).WithMany(p => p.GRID)
                .HasForeignKey(d => d.PROJECTION)
                .HasConstraintName("FK_GRID_GDPROJECTION");

            entity.HasOne(d => d.TRANSFORMATIONTYPENavigation).WithMany(p => p.GRID)
                .HasForeignKey(d => d.TRANSFORMATIONTYPE)
                .HasConstraintName("FK_GRID_GDTRANSFORMATIONTYPE");

            entity.HasOne(d => d.VERTICALUNITSNavigation).WithMany(p => p.GRID)
                .HasForeignKey(d => d.VERTICALUNITS)
                .HasConstraintName("FK_GRID_GDUNITS");
        });

        modelBuilder.Entity<GRIDCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GRIDCODE", "dbo", tb =>
                {
                    tb.HasComment("GridCode.Name defines the virtual fields for the Grid compound definition. ");
                    tb.HasTrigger("T_GRIDCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_GRIDCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.GRIDCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GRIDCODE_DATATYPE");
        });

        modelBuilder.Entity<GRIDDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.GRIDNAME, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GRIDDETAILS", "dbo", tb =>
                {
                    tb.HasComment("GridDetails.Value stores the data associated with the virtual field GridDetails.Name for the Grid compound definition. ");
                    tb.HasTrigger("T_GDD_VAL");
                });

            entity.HasIndex(e => e.GRIDNAME, "IX_GRIDDETAILS_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IX_GRIDDETAILS_02").HasFillFactor(80);

            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.GRIDDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GRIDDETAILS_GRIDCODE");
        });

        modelBuilder.Entity<GRIDPICKUP>(entity =>
        {
            entity.HasKey(e => new { e.GRIDNAME, e.PICKUPNO })
                .HasName("PRIMARYKEYGRIDPICKUP")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("GRIDPICKUP", "dbo", tb =>
                {
                    tb.HasComment("GridPickUp stores the points that define a local grid in terms of another grid. The primary key fields are GridName and PickupNo. Refer to Grid. ");
                    tb.HasTrigger("T_GP_CON");
                    tb.HasTrigger("T_GRIDPICKUP_IU");
                });

            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PICKUPNO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BASEGRID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BASEZONE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LOCALRELIABILITY)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.LOCALUNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PICKUPDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GridSystem>(entity =>
        {
            entity.ToTable("GridSystem", "AcqCoordinates", tb => tb.HasComment("The grid system employed for coordinates."));

            entity.HasIndex(e => e.Name, "UQ_GridSystem_01").IsUnique();

            entity.Property(e => e.GridSystemId).HasComment("The auto incrementing primary key.");
            entity.Property(e => e.CoordinateSystemId).HasComment("Id of coordinate system.");
            entity.Property(e => e.Definition)
                .IsRequired()
                .HasComment("The XML definition of the grid.")
                .HasColumnType("xml");
            entity.Property(e => e.Description).HasComment("A description of the grid.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The unique name given to the grid system.");
            entity.Property(e => e.ParentGridId).HasComment("Id of parent grid.");
            entity.Property(e => e.TransformId).HasComment("Id of datum transform.");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasComment("Type of grid.");

            entity.HasOne(d => d.CoordinateSystem).WithMany(p => p.GridSystem)
                .HasForeignKey(d => d.CoordinateSystemId)
                .HasConstraintName("FK_GridSystem_02");

            entity.HasOne(d => d.ParentGrid).WithMany(p => p.InverseParentGrid)
                .HasForeignKey(d => d.ParentGridId)
                .HasConstraintName("FK_GridSystem_03");

            entity.HasOne(d => d.Transform).WithMany(p => p.GridSystem)
                .HasForeignKey(d => d.TransformId)
                .HasConstraintName("FK_GridSystem_01");
        });

        modelBuilder.Entity<HOLEBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLEBIGCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("HoleBigComment Table stores long comments (up to 4000 characters) for a HoleID/ProjectCode combination. It is associated with the HoleLocation table and other details tables to make up the Collar compound definition. ");
                    tb.HasTrigger("T_DHBC_CON");
                });

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.HOLEBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOLEBIGCOMMENT_HBCC");
        });

        modelBuilder.Entity<HOLEBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLEBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("HoleBigCommentCode stores the names of the virtual fields for HoleBigComment (long comments) that are associated with the Collar compound definition. ");
                    tb.HasTrigger("T_HOLEBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_HOLEBIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.HOLEBIGCOMMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOLEBIGCOMMENTCODE_DATATYPE");
        });

        modelBuilder.Entity<HOLECODE>(entity =>
        {
            entity.HasKey(e => e.NAME)
                .HasName("PRIMARYKEYHOLECODE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLECODE", "dbo", tb =>
                {
                    tb.HasComment("HoleCode stores particulars that can be attributed to each sample or HoleID - information, for example, like the header on a geological log. These field names can be defined at any time. Examples of Name(s) could be, for example: For point sampling (geochem or geotech), it may be, for example: ");
                    tb.HasTrigger("T_HOLECODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_HOLECODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.HOLECODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("HOLECODE33DATATYPE");
        });

        modelBuilder.Entity<HOLECOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.NAME })
                .HasName("PRIMARYKEYDRILLHOLECOMMENT")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLECOMMENT", "dbo", tb =>
                {
                    tb.HasComment("HoleComment collects comments about the drillhole. Virtual fields are defined in HoleCommentCode.Name and the data associated with the virtual field in HoleComment.  ");
                    tb.HasTrigger("T_DHC_CON");
                });

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.HOLECOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOLECOMMENT_HOLECOMMENTCODE");
        });

        modelBuilder.Entity<HOLECOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLECOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("The virtual field names for the comment aspect of a Collar compound definition are defined in this table. ");
                    tb.HasTrigger("T_HOLECOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_HOLECOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.HOLECOMMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOLECOMMENTCODE_DATATYPE");
        });

        modelBuilder.Entity<HOLECOORD>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.COORDINATESET }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLECOORD", "dbo", tb =>
                {
                    tb.HasComment("To store the X, Y and Z coordinates for the Collar coordinate virtual fields. HoleCoord is present in two compound definitions: ");
                    tb.HasTrigger("LastModifiedUTHoleCoord");
                    tb.HasTrigger("T_HCRD_CON");
                });

            entity.HasIndex(e => e.HOLEID, "IDX_HOLECOORD_01").HasFillFactor(80);

            entity.HasIndex(e => e.COORDINATESET, "IDX_HOLECOORD_02").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COORDINATESET)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.COORDINATESETNavigation).WithMany(p => p.HOLECOORD)
                .HasForeignKey(d => d.COORDINATESET)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOLECOORD_GDCOORDINATESET");
        });

        modelBuilder.Entity<HOLECOORDBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.COORDINATESET, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLECOORDBIGCOMMENT", "dbo", tb => tb.HasComment("BigComment table in the virtual field system associated with the HoleCoord table. "));

            entity.HasIndex(e => e.COORDINATESET, "IDX_HOLECOORDBIGCOMMENT_01").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COORDINATESET)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.HOLECOORDBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOLECOORDBIGCOMMENT_01");

            entity.HasOne(d => d.HOLECOORD).WithMany(p => p.HOLECOORDBIGCOMMENT)
                .HasForeignKey(d => new { d.PROJECTCODE, d.HOLEID, d.COORDINATESET })
                .HasConstraintName("FK_HOLECOORDBIGCOMMENT_02");
        });

        modelBuilder.Entity<HOLECOORDBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLECOORDBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("BigCommentCode table in the virtual field system associated with the HoleCoord table. ");
                    tb.HasTrigger("T_HOLECOORDBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_HOLECOORDBIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HOLECOORDCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLECOORDCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table in the virtual field system associated with the HoleCoord table. ");
                    tb.HasTrigger("T_HOLECOORDCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_HOLECOORDCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.HOLECOORDCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOLECOORDCODE_01");
        });

        modelBuilder.Entity<HOLECOORDCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.COORDINATESET, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLECOORDCOMMENT", "dbo", tb => tb.HasComment("Comment table in the virtual field system associated with the HoleCoord table. "));

            entity.HasIndex(e => e.COORDINATESET, "IDX_HOLECOORDCOMMENT_01").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COORDINATESET)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.HOLECOORDCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOLECOORDCOMMENT_01");

            entity.HasOne(d => d.HOLECOORD).WithMany(p => p.HOLECOORDCOMMENT)
                .HasForeignKey(d => new { d.PROJECTCODE, d.HOLEID, d.COORDINATESET })
                .HasConstraintName("FK_HOLECOORDCOMMENT_02");
        });

        modelBuilder.Entity<HOLECOORDCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLECOORDCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("CommentCode table in the virtual field system associated with the HoleCoord table. ");
                    tb.HasTrigger("T_HOLECOORDCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_HOLECOORDCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HOLECOORDDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.COORDINATESET, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLECOORDDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Details table in the virtual field system associated with the HoleCoord table. ");
                    tb.HasTrigger("LastModifiedUTHoleCoordDetails");
                    tb.HasTrigger("T_HOLECOORDDETAILS_IU");
                });

            entity.HasIndex(e => e.COORDINATESET, "IDX_HOLECOORDDETAILS_01").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COORDINATESET)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.HOLECOORDDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOLECOORDDETAILS_01");

            entity.HasOne(d => d.HOLECOORD).WithMany(p => p.HOLECOORDDETAILS)
                .HasForeignKey(d => new { d.PROJECTCODE, d.HOLEID, d.COORDINATESET })
                .HasConstraintName("FK_HOLECOORDDETAILS_02");
        });

        modelBuilder.Entity<HOLEDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.NAME })
                .HasName("PRIMARYKEYHOLEDETAILS")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLEDETAILS", "dbo", tb =>
                {
                    tb.HasComment("HoleDetails stores particulars or Values under the field names or headings defined in HoleCode.Name. The primary key fields are HoleID, ProjectCode and Name. In HoleCode the records in Name become virtual fields and appear as field names on some Compound Forms.  This ability of records in HoleCode to become field names in Compound Forms gives the user scope to customise the database to particular needs - it is in fact, the implementation of the third normal form of database management. ");
                    tb.HasTrigger("LastModifiedUTHoleDetails");
                    tb.HasTrigger("T_HD_VAL");
                });

            entity.HasIndex(e => e.HOLEID, "IDX_HOLEDETAILS_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_HOLEDETAILS_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "idx_Nonclustered_HOLEDETAILS_NAME_VALUE").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.HOLEDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("HOLEDETAILS34HOLECODE");
        });

        modelBuilder.Entity<HOLEDETAILS_PIVOT>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("HOLEDETAILS_PIVOT", "dbo");

            entity.Property(e => e.Actual_Drill_Date)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Actual_RigID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApproxDepthFrom)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApproxDepthTo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Archive_Survey_Methd)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Archive_Survey_Valid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Archived_Survey_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Archived_Survey_Date)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Assays_Valid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Cleared)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Clearing_Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Collar_Cut)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Collar_Valid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Computer_Name)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Contracted_Year)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DH_Geophys_Company)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DH_Geophys_Date)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DH_Geophys_LogUnit)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DND)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date_Bag_Slashed)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date_Cleared)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date_Part_Cleared)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date_Partial_Rehab)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date_Pegged)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date_Photographed)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date_Sample_Stored)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date_Scarified)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date_plan_Imported)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date_water_meas)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Destroyed)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Dipping_Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DrillEquipRecovered)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DrillPattern)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DrillPriority)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Drilled_Peg_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DrillholeType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Drum_Destroyed)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Drum_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DuplicateSelected)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ExemptRehab)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ExemptRehabReason)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FEXRF_FROM)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FEXRF_TO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GDA)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GDP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPSCUT_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPSCUT_Date)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPS_HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPS_Zone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Geol_Interp_Valid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Historic_Hole_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HoleCollared)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HolePlugged)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Cleared_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Exported)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Pegged_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Purpose)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hole_Validated_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAST_MODIFIED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Landfill_Analysis)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Lith_Valid)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Logging_Complete)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Logging_Geo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Logging_Geo_Date)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MM_Region)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MM_RegionPit)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MM_SubRegionPit)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Machine)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MeasureDrillRecorded)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Metals_Analysis)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MineDate_2013_LOM)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MineDate_201508_LOMP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MineDate_2015_Accel)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MineDate_30Month)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MineDate_Tails_2015)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Mine_Month)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Mine_Plan)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Mine_Year)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MiningProposal)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Model_Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MoistureTest)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Oil_Spills)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Original_TenementID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POW)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Pad_Rehab)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Parent_Hole_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PegLabelled)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Peg_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Peg_Marked)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pegged)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Photographed)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PlanDepthReached)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Plan_Drill_Priority)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_Area)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_Date)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_Depth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_DrilledByDat)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_DryMetres)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_DupDepth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_Duplicate)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_Leadtime)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_MineDate)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_OreDepth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_PitDepth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_Priority)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_RockDepth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_Standard)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_StandardDpth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_WaterDepth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_WetMetres)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_nncountc)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_nncountu)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_nnstdevc)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Planned_nnstdevu)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pln_DDte_201508_LOMP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pln_Year_201508_LOMP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pln_YrMn_201508_LOMP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pln_YrQt_201508_LOMP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PlugLabelled)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PreCollarType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Precollar_Depth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Program_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Proposed_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Rehabbed_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Rej_Def_Reason)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Reliability)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Responsible_Person)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Rubbish)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SE4AD_FROM)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SE4AD_TO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SSCheckedModel)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SS_XRF_From)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SS_XRF_To)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SampSizeInspected)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Sample_Stored_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Section)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Selenium)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StandardInserted)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StandardSpiked)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SubRegion)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Sump)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SurveyValidated_Date)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Survey_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Survey_Date)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Survey_Method)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Survey_ValidBy)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TailType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Testing_Required)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Twin1_Hole_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Twin2_Hole_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validated_Date)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.WHO_MODIFIED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Water_Area)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Water_Measured_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Water_Table_Raw)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Water_Table_Reliable)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Water_Table_Valid)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HOLELOCATION>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID })
                .HasName("PRIMARYKEYHOLELOCATION")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLELOCATION", "dbo", tb =>
                {
                    tb.HasComment("The HoleLocation table is the entry point for data in an acQuire database. The data in this table is either the collar details of drillholes or the name of a geochemical sampling program. The primary key fields are HoleID and ProjectCode. Drillholes, costeans, downhole geotechnical surveys or face samples are considered to be linear samples and are classified as HoleType= DRILLHOLE. In a work program there probably would be numerous HoleID(s) associated with a ProjectCode. For example: HoleID = DDH013, DDH014 or DDH015 ProjectCode = King River HoleType = DRILLHOLE For geochemical or pit geotechnical samples (ie point samples but, NOT downhole point samples such as geotech drilling - they would be defined as DRILLHOLE) the HoleType would be GEOCHEM. In this case the HoleID would probably reflect the sampling type/method or program name.  For example: HoleID = BLEG97 (a sampling program) ProjectCode = King River HoleType = GEOCHEM SampleID = M03451, M03452 or M03453 and so on (SampleID are entered into the Sample table). ");
                    tb.HasTrigger("LastModifiedUTHoleLocation");
                    tb.HasTrigger("T_HL_CAS");
                    tb.HasTrigger("T_HL_VAL_I");
                    tb.HasTrigger("T_HL_VAL_U");
                    tb.HasTrigger("T_HOLELOCATION_CF_U");
                    tb.HasTrigger("T_HOLELOCATION_GEOP_U");
                });

            entity.HasIndex(e => e.HOLEID, "IDX_HOLELOCATION_01").HasFillFactor(80);

            entity.HasIndex(e => e.TENEMENTID, "IDX_HOLELOCATION_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.HOLEID, e.PROJECTCODE }, "IDX_HOLELOCATION_03").HasFillFactor(80);

            entity.HasIndex(e => e.HOLEID, "IDX_HOLELOCATION_04").HasFillFactor(80);

            entity.HasIndex(e => e.TENEMENTID, "IDX_HOLELOCATION_05").HasFillFactor(80);

            entity.HasIndex(e => new { e.HOLEID, e.PROJECTCODE }, "IDX_HOLELOCATION_06").HasFillFactor(80);

            entity.HasIndex(e => e.GLOBALID, "UQ_HOLELOCATION_01").IsUnique();

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The name of the project the hole belongs to, part of the primary key.");
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The identifying name of a hole, a kind of geographical anchor point, part of the primary key.");
            entity.Property(e => e.DEPTH).HasComment("The final distance from start to end point of a hole or sampling line.");
            entity.Property(e => e.EAST).HasComment("The X coordinate of the hole anchor point.");
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The data work ended on the hole or linear construction.");
            entity.Property(e => e.GLOBALID).HasDefaultValueSql("(newsequentialid())");
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the grid the hole coordinates refer to.");
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The type of hole, can be DRILLHOLE for linear/sequential groupings of samples, or GEOCHEM for dispersed samples.");
            entity.Property(e => e.NORTH).HasComment("The Y coordinate of the hole anchor point.");
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The sub-division of a project.");
            entity.Property(e => e.RL).HasComment("The Z coordinate of the hole anchor point reduced to a reference point, for example sea level, hence the name Reduced Level.");
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The data work commenced on the hole or linear construction.");
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The name of the tenement the hole is geographically located in.");

            entity.HasOne(d => d.GRIDNAMENavigation).WithMany(p => p.HOLELOCATION)
                .HasForeignKey(d => d.GRIDNAME)
                .HasConstraintName("HOLELOCATION32GRID");

            entity.HasOne(d => d.HOLETYPENavigation).WithMany(p => p.HOLELOCATION)
                .HasForeignKey(d => d.HOLETYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("HOLELOCATION35HOLETYPE");

            entity.HasOne(d => d.TENEMENT).WithMany(p => p.HOLELOCATION)
                .HasForeignKey(d => d.TENEMENTID)
                .HasConstraintName("HOLELOCATION52TENEMENT");
        });

        modelBuilder.Entity<HOLESURVEY>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.DEPTH, e.SURVTYPE })
                .HasName("PRIMARYKEYHOLESURVEY")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLESURVEY", "dbo", tb =>
                {
                    tb.HasComment("HoleSurvey stores downhole survey information - as the azimuth and / or dip the drillhole deviates. There are references to the type of survey; this could be a record of the instrument to undertake the survey e.g. Eastman single shot or digital gyroscope. The azimuth type could be a record of the format of the reading - if degrees, minutes and seconds or in decimal degrees; if a magnetic reading or relative to local grid. The Priority could be used to assign reliability to the data. The dip must be between -90 and 90.  It is recommended that the measured or the highest quality survey is stored in HoleSurvey.Azimuth, and that transformed azimuths are stored in virtual fields in SurveyAzimuth.  ");
                    tb.HasTrigger("LastModifiedUTHoleSurvey");
                    tb.HasTrigger("T_HOLESURVEY_IU");
                    tb.HasTrigger("T_HS_DCAS");
                    tb.HasTrigger("T_HS_VAL_I");
                    tb.HasTrigger("T_HS_VAL_U");
                });

            entity.HasIndex(e => e.AZIMUTHGRIDNAME, "IDX_HOLESURVEY_02").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SURVTYPE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AZIMUTHGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AZIMUTHTYPE)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.AZIMUTHGRIDNAMENavigation).WithMany(p => p.HOLESURVEY)
                .HasForeignKey(d => d.AZIMUTHGRIDNAME)
                .HasConstraintName("FK_HOLESURVEY_GRID");

            entity.HasOne(d => d.AZIMUTHTYPENavigation).WithMany(p => p.HOLESURVEY)
                .HasForeignKey(d => d.AZIMUTHTYPE)
                .HasConstraintName("HOLESURVEY7AZIMUTHTYPE");

            entity.HasOne(d => d.SURVTYPENavigation).WithMany(p => p.HOLESURVEY)
                .HasForeignKey(d => d.SURVTYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("HOLESURVEY50SURVEYTYPE");
        });

        modelBuilder.Entity<HOLETYPE>(entity =>
        {
            entity.HasKey(e => e.HOLETYPE1)
                .HasName("PRIMARYKEYHOLETYPE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("HOLETYPE", "dbo", tb => tb.HasComment("HoleType defines the data type: either DRILLHOLE or GEOCHEM. If the information collected in HoleLocation refers to a drillhole, a costean, trench or face samples, for example, the entry is DRILLHOLE. If the information is about geochemical or geotechnical sampling, the entry is GEOCHEM. See: HoleLocation. "));

            entity.Property(e => e.HOLETYPE1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HOLETYPE");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IDENTITYRANGE>(entity =>
        {
            entity.HasKey(e => e.TABLENAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("IDENTITYRANGE", "dbo", tb =>
                {
                    tb.HasTrigger("T_GEOPHYS_IDENTITYRANGE_D");
                    tb.HasTrigger("T_GEOPHYS_IDENTITYRANGE_U");
                });

            entity.Property(e => e.TABLENAME)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK_AcqManagement_Image");

            entity.ToTable("Image", "AcqManagement", tb => tb.HasComment("Contains images that should be available to any acQuire application that uses this database."));

            entity.Property(e => e.ImageId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.ImageType)
                .HasMaxLength(50)
                .HasComment("The MIME type of the image.");
            entity.Property(e => e.ImageValue)
                .HasComment("The binary image data.")
                .HasColumnType("image");
            entity.Property(e => e.Title)
                .HasMaxLength(200)
                .HasComment("The title of the image (e.g. file name or something else useful to users).");
        });

        modelBuilder.Entity<LocalPermission>(entity =>
        {
            entity.ToTable("LocalPermission", "AcqLocalSecurity", tb => tb.HasComment("Details local permissions a role has to a entity."));

            entity.Property(e => e.LocalPermissionId).HasComment("The auto incrementing primary key.");
            entity.Property(e => e.AccessRight).HasComment("The level of rights this role has to the entity.");
            entity.Property(e => e.Condition)
                .HasComment("The condition under which the right applies.")
                .HasColumnType("xml");
            entity.Property(e => e.EntityId)
                .IsRequired()
                .HasMaxLength(400)
                .HasComment("The associated entity.");
            entity.Property(e => e.EntityType)
                .IsRequired()
                .HasMaxLength(20)
                .HasComment("The type of the associated entity.");
            entity.Property(e => e.RoleGlobalId).HasComment("The associated role.");
        });

        modelBuilder.Entity<LocalProfileValueDefinition>(entity =>
        {
            entity.HasKey(e => e.LocalProfileValueDefinitionGlobalId);

            entity.ToTable("LocalProfileValueDefinition", "AcqLocalSecurity", tb => tb.HasComment("Defines local profile values that can be set."));

            entity.Property(e => e.LocalProfileValueDefinitionGlobalId)
                .ValueGeneratedNever()
                .HasComment("The auto incrementing primary key.");
            entity.Property(e => e.DefaultValue).HasComment("The optional expression specifying the default for the profile value.");
            entity.Property(e => e.ProfileValueDefinition)
                .IsRequired()
                .HasComment("The argument definition for the profile value.");
            entity.Property(e => e.RoleGlobalId).HasComment("Role Id if this profile value is specific to a role.");
        });

        modelBuilder.Entity<LocalRole>(entity =>
        {
            entity.HasKey(e => e.LocalRoleGlobalId);

            entity.ToTable("LocalRole", "AcqLocalSecurity", tb => tb.HasComment("Definition of a role local to a data store."));

            entity.HasIndex(e => e.Name, "UQ_LocalRole_01").IsUnique();

            entity.Property(e => e.LocalRoleGlobalId)
                .ValueGeneratedNever()
                .HasComment("The Id of the role.");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("The description of the role.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The name of the role.");
            entity.Property(e => e.RoleData).HasComment("Additional serialised role data.");
        });

        modelBuilder.Entity<LocalRoleParentRole>(entity =>
        {
            entity.HasKey(e => new { e.ParentRoleGlobalId, e.ChildRoleGlobalId });

            entity.ToTable("LocalRoleParentRole", "AcqLocalSecurity", tb => tb.HasComment("Details the links from a role to its parent roles."));

            entity.Property(e => e.ParentRoleGlobalId).HasComment("The parent role.");
            entity.Property(e => e.ChildRoleGlobalId).HasComment("The child role.");
        });

        modelBuilder.Entity<Log>(entity =>
        {
            entity.HasKey(e => e.LogId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Log", "AcqManagement", tb => tb.HasComment("Details the events that have been logged by the system."));

            entity.Property(e => e.LogId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Context)
                .HasMaxLength(100)
                .HasComment("The context of the message recorded.");
            entity.Property(e => e.Description).HasComment("The Description of the log.");
            entity.Property(e => e.LogDatetime)
                .HasDefaultValueSql("(getdate())")
                .HasComment("The Datetime the event was logged.")
                .HasColumnType("datetime");
            entity.Property(e => e.LogDetails)
                .HasComment("The Log Details in an xml format.")
                .HasColumnType("xml");
            entity.Property(e => e.LogTypeId).HasComment("The Type of Event Logged.");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(4000)
                .HasComment("The Message recorded.");

            entity.HasOne(d => d.LogType).WithMany(p => p.Log)
                .HasForeignKey(d => d.LogTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Log_01");
        });

        modelBuilder.Entity<LogType>(entity =>
        {
            entity.HasKey(e => e.LogTypeId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("LogType", "AcqManagement", tb => tb.HasComment("Details the types of events that can be logged."));

            entity.Property(e => e.LogTypeId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.CanDelete).HasComment("A flag indicating whether logs of this type may be deleted.");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(4000)
                .HasComment("The Description of the log type.");
            entity.Property(e => e.LogDetailsXSD)
                .HasComment("The XSD pertaining to the supported format of the logged records details.")
                .HasColumnType("xml");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("The Name of the log type.");
        });

        modelBuilder.Entity<Logger>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Logger", "dbo");

            entity.HasIndex(e => e.Date_Stamp, "ClusteredIndex-Date_Stamp")
                .IsClustered()
                .HasFillFactor(80);

            entity.Property(e => e.Database_Name).HasMaxLength(1024);
            entity.Property(e => e.Instance).HasMaxLength(1024);
            entity.Property(e => e.User).HasMaxLength(1024);
        });

        modelBuilder.Entity<META3600UPGRADEEXCLUSION>(entity =>
        {
            entity.HasKey(e => new { e.OBJECTNAME, e.SCHEMANAME, e.EXCLUDEOBJECTNAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("META3600UPGRADEEXCLUSION", "dbo");

            entity.Property(e => e.OBJECTNAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.SCHEMANAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.EXCLUDEOBJECTNAME)
                .HasMaxLength(128)
                .IsUnicode(false);

            entity.HasOne(d => d.META3600UPGRADEOBJECT).WithMany(p => p.META3600UPGRADEEXCLUSION)
                .HasForeignKey(d => new { d.OBJECTNAME, d.SCHEMANAME })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_META3600UPGRADEEXCLUSION_OBJECTNAME_SCHEMANAME");
        });

        modelBuilder.Entity<META3600UPGRADEOBJECT>(entity =>
        {
            entity.HasKey(e => new { e.OBJECTNAME, e.SCHEMANAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("META3600UPGRADEOBJECT", "dbo");

            entity.Property(e => e.OBJECTNAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.SCHEMANAME)
                .HasMaxLength(128)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METAACQ2ACQ>(entity =>
        {
            entity.HasKey(e => new { e.PACKAGEID, e.ELEMENTID }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAACQ2ACQ", "dbo");

            entity.Property(e => e.PACKAGEID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENTID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FROMCD)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FROMFORMCAT)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FROMFORMDEF)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FROMFUN)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FROMTABLE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OPMODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SQLWHERE)
                .HasMaxLength(1024)
                .IsUnicode(false);
            entity.Property(e => e.TOCD)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TOFUN)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TOTABLE)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.PACKAGE).WithMany(p => p.METAACQ2ACQ)
                .HasForeignKey(d => d.PACKAGEID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_METAACQ2ACQ_PACKAGEID");
        });

        modelBuilder.Entity<METAACQ2ACQREF>(entity =>
        {
            entity.HasKey(e => e.PACKAGEID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAACQ2ACQREF", "dbo");

            entity.Property(e => e.PACKAGEID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CATEGORY)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.FILTERBYCD)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METAASSAYEXPORT>(entity =>
        {
            entity.HasKey(e => new { e.ATNAME, e.SCNAME, e.SCVALUE }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAASSAYEXPORT", "dbo", tb =>
                {
                    tb.HasComment("MetaAssayExport table is one of the meta tables of acQuire. Meta tables should only be accessed by the acQuire manager on site. This table is used to define a relationship between Assay virtual fields, non-numeric analytical results and values that can be substituted for the non-numeric result when the data is exported, or presented in objects based on read-only compound definitions. The list of virtual fields and their substitute values are also referenced by some stored procedures. The substituted values can be inserted into another field, they can be displayed in derived fields or they can be displayed in current virtual field. In the latter two cases, the results are read-only. ");
                    tb.HasTrigger("T_MAE_VAL");
                    tb.HasTrigger("T_METAASSAYEXPORT_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.ATNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SCNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SCVALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ATVALUE).HasDefaultValue(-9999.0);
            entity.Property(e => e.EXPRULE1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("((-9999))");
            entity.Property(e => e.EXPRULE2)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.SCNAMENavigation).WithMany(p => p.METAASSAYEXPORT)
                .HasForeignKey(d => d.SCNAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_METAASSAYEXPORT_SAMPLECODE");
        });

        modelBuilder.Entity<METAASSAYRULE>(entity =>
        {
            entity.HasKey(e => new { e.NAME, e.FORMULA })
                .HasName("PK_ASSAYRULE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAASSAYRULE", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FORMULA)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METACALCULATEDFIELD>(entity =>
        {
            entity.HasKey(e => new { e.SZFORMCATEGORY, e.SZFORMDEFINITION, e.SZFIELDNAME })
                .HasName("PRIMARYKEYMETACALCULATEDFIELD")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METACALCULATEDFIELD", "dbo");

            entity.Property(e => e.SZFORMCATEGORY)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SZFORMDEFINITION)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SZFIELDNAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BFILTER).HasMaxLength(3000);
            entity.Property(e => e.SZEXPRESSION)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.SZFREQUENCY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SZLASTUPDATE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SZUSER)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METACLIENTALIASES>(entity =>
        {
            entity.HasKey(e => new { e.CLIENT, e.COMPOUNDDEF, e.ACQFIELD })
                .HasName("PK_CLIENTALIASES")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METACLIENTALIASES", "dbo");

            entity.Property(e => e.CLIENT)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.COMPOUNDDEF)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ACQFIELD)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.ALIASFIELD)
                .HasMaxLength(64)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METACONSTRAINTERRORMESSAGE>(entity =>
        {
            entity.HasKey(e => e.METACONSTRAINTERRORMESSAGEID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METACONSTRAINTERRORMESSAGE", "dbo");

            entity.HasIndex(e => new { e.FAILINGCONSTRAINTNAME, e.DMLACTION }, "UQ_METACONSTRAINTERRORMESSAGE_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.DMLACTION)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FAILINGCONSTRAINTNAME)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.USERMESSAGE)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METADBOBJECT>(entity =>
        {
            entity.HasKey(e => e.OBJECTNAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METADBOBJECT", "dbo");

            entity.Property(e => e.OBJECTNAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.OBJECTTYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METADCVIEW>(entity =>
        {
            entity.HasKey(e => new { e.SZVIEWNAME, e.SZUSER })
                .HasName("PRIMARYKEYMETADCVIEW")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METADCVIEW", "dbo");

            entity.Property(e => e.SZVIEWNAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SZUSER)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SZVIEWCOMMENT)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SZVIEWTYPE)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METADCVIEWSUB>(entity =>
        {
            entity.HasKey(e => new { e.SZVIEWNAME, e.SUBVIEWNAME, e.SZUSER })
                .HasName("PRIMARYKEYMETADCVIEWSUB")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METADCVIEWSUB", "dbo");

            entity.Property(e => e.SZVIEWNAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SUBVIEWNAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SZUSER)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METADEFAULTS>(entity =>
        {
            entity.HasKey(e => new { e.PROFILE, e.MODULE, e.PARNAME, e.PARSEQ }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METADEFAULTS", "dbo", tb =>
                {
                    tb.HasTrigger("T_METADEFAULTS_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_METADEFAULTS_VALIDATE_D");
                    tb.HasTrigger("T_METADEFAULTS_VALIDATE_I");
                    tb.HasTrigger("T_METADEFAULTS_VALIDATE_U");
                });

            entity.Property(e => e.PROFILE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MODULE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PARNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PARVALUE)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METAFIELD>(entity =>
        {
            entity.HasKey(e => new { e.TABLENAME, e.FIELDNAME })
                .HasName("PRIMARYKEYMETAFIELD")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAFIELD", "dbo", tb => tb.HasTrigger("T_METAFIELD_MS_CACHE_UPDATE_IUD"));

            entity.Property(e => e.TABLENAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.FIELDNAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.FIELDSTDTYPE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RELATEDTABLEFIELDNAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.RELATEDTABLENAME)
                .HasMaxLength(128)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METAFORMDEFINITION>(entity =>
        {
            entity.HasKey(e => new { e.NAME, e.CATEGORY })
                .HasName("PRIMARYKEYMETAFORMDEFINITION")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAFORMDEFINITION", "dbo", tb => tb.HasTrigger("T_METAFORMDEFINITION_P_CACHE_UPDATE_IUD"));

            entity.Property(e => e.NAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CATEGORY)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CACHETABLENAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.COMPOUNDTYPE)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.GLOBALID).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LASTCACHESTARTTIME).HasColumnType("datetime");
            entity.Property(e => e.LASTCACHESUCCESSTIME).HasColumnType("datetime");
            entity.Property(e => e.SZISOWNER).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.SZUSER)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TABLENAME)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METAFORMDEFINITIONDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.NAME, e.CATEGORY, e.PARNAME, e.PARSEQ }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAFORMDEFINITIONDETAILS", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CATEGORY)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PARNAME)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PARVALUE)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.METAFORMDEFINITION).WithMany(p => p.METAFORMDEFINITIONDETAILS)
                .HasForeignKey(d => new { d.NAME, d.CATEGORY })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_METAFORMDEFINITIONDETAILS_1");
        });

        modelBuilder.Entity<METAFORMDEFINITIONFIELD>(entity =>
        {
            entity.HasKey(e => new { e.NAME, e.FIELDNAME, e.CATEGORY })
                .HasName("PRIMARYKEYMETAFORMDEFINITIONFI")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAFORMDEFINITIONFIELD", "dbo", tb => tb.HasTrigger("T_METAFORMDEFINITIONFIELD_P_CACHE_UPDATE_IUD"));

            entity.Property(e => e.NAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FIELDNAME)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CATEGORY)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ALIAS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DEFVAL)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METAFORMDEFINITIONFILTER>(entity =>
        {
            entity.HasKey(e => new { e.NAME, e.CATEGORY, e.DBMS, e.VERSION, e.SEQNO }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAFORMDEFINITIONFILTER", "dbo", tb => tb.HasTrigger("T_METAFORMDEFINITIONFILTER_P_CACHE_UPDATE_IUD"));

            entity.Property(e => e.NAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CATEGORY)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DBMS)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VERSION)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ORDERBYSQL)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.WHERESQL)
                .HasMaxLength(3000)
                .IsUnicode(false);

            entity.HasOne(d => d.METAFORMDEFINITION).WithMany(p => p.METAFORMDEFINITIONFILTER)
                .HasForeignKey(d => new { d.NAME, d.CATEGORY })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_METAFORMDEFINITIONFILTER_1");
        });

        modelBuilder.Entity<METAFUNCTION>(entity =>
        {
            entity.HasKey(e => new { e.FUNCTION, e.CD_TABLE, e.FIELD }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAFUNCTION", "dbo", tb => tb.HasTrigger("T_METAFUNCTION_MS_CACHE_UPDATE_IUD"));

            entity.Property(e => e.FUNCTION)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CD_TABLE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FIELD)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DBFIELD)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METAIMPORTALIASES>(entity =>
        {
            entity.HasKey(e => new { e.CATEGORY, e.SUBCATEGORY, e.SOURCEVALUE }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAIMPORTALIASES", "dbo");

            entity.Property(e => e.CATEGORY)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.SUBCATEGORY)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.SOURCEVALUE)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ALIASVALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METAPROFILE>(entity =>
        {
            entity.HasKey(e => new { e.PROFILE, e.MODULE }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAPROFILE", "dbo", tb => tb.HasComment("Stores data on acQuire Direct profiles."));

            entity.Property(e => e.PROFILE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The name of the profile.");
            entity.Property(e => e.MODULE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The module to which the data pertains.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("A description of the profile.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasComment("A blob containing the data for this profile and this module.");
        });

        modelBuilder.Entity<METASQL>(entity =>
        {
            entity.HasKey(e => new { e.TEMPLATEID, e.DBMS, e.VERSION, e.SEQNO }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METASQL", "dbo", tb => tb.HasTrigger("T_METASQL_MS_CACHE_UPDATE_IUD"));

            entity.Property(e => e.TEMPLATEID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DBMS)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VERSION)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SQLTEXT)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);

            entity.HasOne(d => d.TEMPLATE).WithMany(p => p.METASQL)
                .HasForeignKey(d => d.TEMPLATEID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_METASQL_METASQLREF");
        });

        modelBuilder.Entity<METASQLEXP>(entity =>
        {
            entity.HasKey(e => new { e.DFIELDNAME, e.DBMS, e.VERSION, e.SEQNO }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METASQLEXP", "dbo", tb => tb.HasTrigger("T_METASQLEXP_MS_CACHE_UPDATE_IUD"));

            entity.Property(e => e.DFIELDNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DBMS)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VERSION)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SQLEXP)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);

            entity.HasOne(d => d.DFIELDNAMENavigation).WithMany(p => p.METASQLEXP)
                .HasForeignKey(d => d.DFIELDNAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_METASQLEXP_METASQLEXPREF");
        });

        modelBuilder.Entity<METASQLEXPFIELD>(entity =>
        {
            entity.HasKey(e => new { e.DFIELDNAME, e.FIELDNAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METASQLEXPFIELD", "dbo", tb =>
                {
                    tb.HasTrigger("T_METASQLEXPFIELD_IU");
                    tb.HasTrigger("T_METASQLEXPFIELD_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.DFIELDNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDNAME)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TABLENAME)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.DFIELDNAMENavigation).WithMany(p => p.METASQLEXPFIELD)
                .HasForeignKey(d => d.DFIELDNAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_METASQLEXPFIELD_METASQLEXPR");
        });

        modelBuilder.Entity<METASQLEXPREF>(entity =>
        {
            entity.HasKey(e => e.DFIELDNAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METASQLEXPREF", "dbo", tb =>
                {
                    tb.HasTrigger("T_METASQLEXPREF_D");
                    tb.HasTrigger("T_METASQLEXPREF_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_METASQLEXPREF_UI");
                });

            entity.Property(e => e.DFIELDNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METASQLFUNC>(entity =>
        {
            entity.HasKey(e => e.FNAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METASQLFUNC", "dbo");

            entity.Property(e => e.FNAME)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CATEGORY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.FTYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METASQLFUNCPARAM>(entity =>
        {
            entity.HasKey(e => new { e.FNAME, e.PNAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METASQLFUNCPARAM", "dbo");

            entity.HasIndex(e => new { e.FNAME, e.ORDINAL }, "UQ_METASQLFUNCPARAM_ORDINAL")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.FNAME)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.FNAMENavigation).WithMany(p => p.METASQLFUNCPARAM)
                .HasForeignKey(d => d.FNAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_METASQLFUNCPARAM_FNAME");
        });

        modelBuilder.Entity<METASQLFUNCPARAMFIELD>(entity =>
        {
            entity.HasKey(e => new { e.FNAME, e.PNAME, e.GROUPID }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METASQLFUNCPARAMFIELD", "dbo");

            entity.Property(e => e.FNAME)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DTYPE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DVALUE)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.FIELDNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PTYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TABLENAME)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.METASQLFUNCPARAM).WithMany(p => p.METASQLFUNCPARAMFIELD)
                .HasForeignKey(d => new { d.FNAME, d.PNAME })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_METASQLFUNCPARAMFIELD_1");
        });

        modelBuilder.Entity<METASQLREF>(entity =>
        {
            entity.HasKey(e => e.TEMPLATEID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METASQLREF", "dbo");

            entity.Property(e => e.TEMPLATEID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METATABLE>(entity =>
        {
            entity.HasKey(e => e.TABLENAME)
                .HasName("PRIMARYKEYMETATABLE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METATABLE", "dbo", tb => tb.HasTrigger("T_METATABLE_MS_CACHE_UPDATE_IUD"));

            entity.Property(e => e.TABLENAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.ABBREVIATIONS)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.REFTABLENAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.REFTABLENAMEFIELD)
                .HasMaxLength(128)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METATABLEVERSION>(entity =>
        {
            entity.HasKey(e => e.VERSION)
                .HasName("PRIMARYKEYMETATABLEVERSION")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METATABLEVERSION", "dbo");

            entity.Property(e => e.ID).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.LOOKUPSDATE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SZISOWNER).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.SZUSER)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METATRACKINGCATEGORY>(entity =>
        {
            entity.HasKey(e => e.CATEGORY).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METATRACKINGCATEGORY", "dbo");

            entity.Property(e => e.CATEGORY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.PKEY)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PKEY1)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STATUSTABLE)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METATRACKINGPROPERTY>(entity =>
        {
            entity.HasKey(e => new { e.CATEGORY, e.TABLETYPE, e.PARNAME, e.PARSEQ }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METATRACKINGPROPERTY", "dbo");

            entity.Property(e => e.CATEGORY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TABLETYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PARNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PARVALUE)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);

            entity.HasOne(d => d.METATRACKINGREF).WithMany(p => p.METATRACKINGPROPERTY)
                .HasForeignKey(d => new { d.CATEGORY, d.TABLETYPE })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_METATRACKINGPROPERTY_REF");
        });

        modelBuilder.Entity<METATRACKINGREF>(entity =>
        {
            entity.HasKey(e => new { e.CATEGORY, e.TABLETYPE }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METATRACKINGREF", "dbo");

            entity.Property(e => e.CATEGORY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TABLETYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.CATEGORYNavigation).WithMany(p => p.METATRACKINGREF)
                .HasForeignKey(d => d.CATEGORY)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_METATRACKINGREF_CATEGORY");
        });

        modelBuilder.Entity<METATRACKINGSUSPENDED>(entity =>
        {
            entity.HasKey(e => e.TABLENAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METATRACKINGSUSPENDED", "dbo");

            entity.Property(e => e.TABLENAME)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METATRACKINGTABLE>(entity =>
        {
            entity.HasKey(e => new { e.CATEGORY, e.TABLETYPE, e.TABLENAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METATRACKINGTABLE", "dbo");

            entity.Property(e => e.CATEGORY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TABLETYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TABLENAME)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.METATRACKINGREF).WithMany(p => p.METATRACKINGTABLE)
                .HasForeignKey(d => new { d.CATEGORY, d.TABLETYPE })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_METATRACKINGTABLE_REF");
        });

        modelBuilder.Entity<METAVALIDATION>(entity =>
        {
            entity.HasKey(e => e.NAME)
                .HasName("PRIMARYKEYMETAVALIDATION")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAVALIDATION", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SZISOWNER).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.SZUSER)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METAVIEW>(entity =>
        {
            entity.HasKey(e => new { e.SZVIEWNAME, e.SZUSER })
                .HasName("PRIMARYKEYMETAVIEW")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAVIEW", "dbo");

            entity.Property(e => e.SZVIEWNAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SZUSER)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SZISOWNER).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.SZTIME)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SZVIEWCOMMENT)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METAVIEWSUB>(entity =>
        {
            entity.HasKey(e => new { e.SZVIEWNAME, e.SUBVIEWNAME, e.SZUSER })
                .HasName("PRIMARYKEYMETAVIEWSUB")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAVIEWSUB", "dbo");

            entity.Property(e => e.SZVIEWNAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SUBVIEWNAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SZUSER)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<METAVIEWTYPE>(entity =>
        {
            entity.HasKey(e => e.SZVIEWTYPE)
                .HasName("PRIMARYKEYMETAVIEWTYPE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("METAVIEWTYPE", "dbo", tb => tb.HasTrigger("T_METAVIEWTYPE_MS_CACHE_UPDATE_IUD"));

            entity.Property(e => e.SZVIEWTYPE)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CATEGORY)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LONGDESCRIPTION)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.MAINJOINTABLE)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.MODULENAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.SZBASETABLE)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SZVIRTUALNAMEREFFIELD)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SZVIRTUALNAMEREFTABLE)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SZVIRTUALTABLE)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SZVIRTUALTYPEFIELD)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SZVIRTUALVALUEFIELD)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TEMPLATEID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WSFCDNAME)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.TEMPLATE).WithMany(p => p.METAVIEWTYPE)
                .HasForeignKey(d => d.TEMPLATEID)
                .HasConstraintName("FK_METAVIEWTYPE_METASQLREF");
        });

        modelBuilder.Entity<MM_DefineSample>(entity =>
        {
            entity.HasKey(e => e.HOLEID);

            entity.ToTable("MM_DefineSample", "dbo");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Region)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.RegionPit)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubRegionPit)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ManualCompound>(entity =>
        {
            entity.HasKey(e => e.Name);

            entity.ToTable("ManualCompound", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the manually defined compounds to be created.");
                    tb.HasTrigger("T_ManualCompound_IUD");
                });

            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasComment("The name of the compound.");
            entity.Property(e => e.DetectVirtualTables).HasComment("Whether or not standard virtual value tables (i.e. of the format \"[BASETABLENAME]Virtual[DATATYPE]\") should be automatically detected and added to this compound.");
            entity.Property(e => e.FilterCondition)
                .HasComment("An XML filter condition that will be applied to the compound.")
                .HasColumnType("xml");
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The label of the compound.");
            entity.Property(e => e.PrimaryBaseTableName)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The name of the compound's primary base table.");
            entity.Property(e => e.PrimaryBaseTableSchema)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The schema to which the compound's primary base table belongs.");
        });

        modelBuilder.Entity<ManualCompoundFieldOverride>(entity =>
        {
            entity.HasKey(e => new { e.CompoundName, e.FieldName });

            entity.ToTable("ManualCompoundFieldOverride", "AcqMetaSystem", tb => tb.HasComment("Details the manually defined associations between Compounds and Object Categories to be created."));

            entity.Property(e => e.CompoundName)
                .HasMaxLength(200)
                .HasComment("The name of the Compound.");
            entity.Property(e => e.FieldName)
                .HasMaxLength(200)
                .HasComment("The name of the Field.");
            entity.Property(e => e.DefaultValue)
                .HasComment("The default value constant expression to use.")
                .HasColumnType("xml");
            entity.Property(e => e.DefaultValueIsOverriden).HasComment("Flag for if DefaultValue is to be overridden.");
        });

        modelBuilder.Entity<ManualCompoundObjectCategory>(entity =>
        {
            entity.HasKey(e => new { e.ObjectCategoryGlobalId, e.CompoundName });

            entity.ToTable("ManualCompoundObjectCategory", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the manually defined associations between Compounds and Object Categories to be created.");
                    tb.HasTrigger("T_ManualCompoundObjectCategory_IUD");
                });

            entity.Property(e => e.ObjectCategoryGlobalId).HasComment("The unqiue identifier of the Object Category.");
            entity.Property(e => e.CompoundName)
                .HasMaxLength(200)
                .HasComment("The name of the Compound.");

            entity.HasOne(d => d.ObjectCategoryGlobal).WithMany(p => p.ManualCompoundObjectCategory)
                .HasForeignKey(d => d.ObjectCategoryGlobalId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ManualCompoundObjectCategory_01");
        });

        modelBuilder.Entity<ManualCompoundOverride>(entity =>
        {
            entity.HasKey(e => e.Name);

            entity.ToTable("ManualCompoundOverride", "AcqMetaSystem");

            entity.Property(e => e.Name).HasMaxLength(200);
        });

        modelBuilder.Entity<ManualCompoundTable>(entity =>
        {
            entity.HasKey(e => new { e.CompoundName, e.Schema, e.Name });

            entity.ToTable("ManualCompoundTable", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details tables which are not the primary base table (e.g. virtual) which should be added to a manually defined compound.");
                    tb.HasTrigger("T_ManualCompoundTable_IUD");
                });

            entity.Property(e => e.CompoundName)
                .HasMaxLength(200)
                .HasComment("The name of the manually defined compound.");
            entity.Property(e => e.Schema)
                .HasMaxLength(128)
                .HasComment("The schema to which the table belongs.");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasComment("The name of the table.");
            entity.Property(e => e.TableContext)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The context which this table is being used within this compound (e.g. Virtual, Base).");
            entity.Property(e => e.VirtualFieldNameExpression)
                .HasComment("If the table context is Virtual, and the table being referenced does not contain a field to link to AcqMetaSystem.VirtualField.VirtualFieldId, this is the serialized expression defining the link to AcqMetaSystem.VirtualField.Name.")
                .HasColumnType("xml");

            entity.HasOne(d => d.CompoundNameNavigation).WithMany(p => p.ManualCompoundTable)
                .HasForeignKey(d => d.CompoundName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ManualCompoundTable_01");
        });

        modelBuilder.Entity<ManualCompoundUniqueness>(entity =>
        {
            entity.HasKey(e => new { e.CompoundName, e.UniquenessName });

            entity.ToTable("ManualCompoundUniqueness", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details manually defined values for compound uniqnenesses.");
                    tb.HasTrigger("T_ManualCompoundUniqueness_IU");
                });

            entity.Property(e => e.CompoundName)
                .HasMaxLength(200)
                .HasComment("The name of the compound to which the uniqueness belongs.");
            entity.Property(e => e.UniquenessName)
                .HasMaxLength(128)
                .HasComment("The internal name of the uniqueness. Required for unique keys as there may be more than 1 per compound. Should correspond to the SQL Server key name if it exists.");
            entity.Property(e => e.DataSourceName)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the data source.");
            entity.Property(e => e.FilterCondition)
                .HasComment("For all records where this condition is true the uniqueness is enforced.")
                .HasColumnType("xml");
            entity.Property(e => e.IsGlobalId).HasComment("Whether or not this uniqueness represents the global identifier of the data in the compound. Generally this will be the same as the primary and unique key, except when a surrogate key system is in use.");
            entity.Property(e => e.IsNaturalKey).HasComment("Whether or not this uniqueness represents the natural key of the data in the compound. Generally this will be the same as the primary and unique key, except when a surrogate key system is in use.");
            entity.Property(e => e.IsPhysicalOrder).HasComment("Whether or not this uniqueness represents the physical order of the data in the underlying table (i.e. whether or not it is the clustered index).");
            entity.Property(e => e.IsPrimaryKey).HasComment("Is this unique key the primary key.");
            entity.Property(e => e.IsUniqueId).HasComment("Whether or not this uniqueness should be the uniqueness used to uniquely identify records in this compound by the system. Generally this is the primary key, but could be a unique key in the absence of a primary key.");

            entity.HasOne(d => d.DataSourceNameNavigation).WithMany(p => p.ManualCompoundUniqueness)
                .HasPrincipalKey(p => p.Name)
                .HasForeignKey(d => d.DataSourceName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ManualCompoundUniqueness_01");
        });

        modelBuilder.Entity<ManualCompoundUniquenessField>(entity =>
        {
            entity.HasKey(e => new { e.CompoundName, e.UniquenessName, e.CompoundFieldName });

            entity.ToTable("ManualCompoundUniquenessField", "AcqMetaSystem", tb => tb.HasComment("Details manually defined values for compound uniqnenesses."));

            entity.Property(e => e.CompoundName)
                .HasMaxLength(200)
                .HasComment("The name of the compound to which the uniqueness belongs.");
            entity.Property(e => e.UniquenessName)
                .HasMaxLength(128)
                .HasComment("The internal name of the uniqueness. Required for unique keys as there may be more than 1 per compound. Should correspond to the SQL Server key name if it exists.");
            entity.Property(e => e.CompoundFieldName)
                .HasMaxLength(200)
                .HasComment("The name of the field within the compound to which the uniqueness belongs.");
            entity.Property(e => e.IsDescending).HasComment("Whether or not this field in the uniqueness is descending in it's physical order.");
            entity.Property(e => e.OrderNumber).HasComment("The order number of the uniqueness field within the given uniqueness.");

            entity.HasOne(d => d.ManualCompoundUniqueness).WithMany(p => p.ManualCompoundUniquenessField)
                .HasForeignKey(d => new { d.CompoundName, d.UniquenessName })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ManualCompoundUniquenessField_01");
        });

        modelBuilder.Entity<ManualCoordinate>(entity =>
        {
            entity.HasKey(e => new { e.CompoundName, e.GridName, e.MethodName });

            entity.ToTable("ManualCoordinate", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the manually defined coordinates to be created.");
                    tb.HasTrigger("T_ManualCoordinate_IUD");
                });

            entity.Property(e => e.CompoundName)
                .HasMaxLength(200)
                .HasComment("The name of the associated manual compound.");
            entity.Property(e => e.GridName)
                .HasMaxLength(200)
                .HasComment("The name of the grid for the coordinates.");
            entity.Property(e => e.MethodName)
                .HasMaxLength(200)
                .HasComment("The method of establishing the coordinates.");
            entity.Property(e => e.XField)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the compound field for the x value.");
            entity.Property(e => e.YField)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the compound field for the y value.");
            entity.Property(e => e.ZField)
                .HasMaxLength(200)
                .HasComment("The name of the compound field for the z value.");
        });

        modelBuilder.Entity<ManualDatabaseColumn>(entity =>
        {
            entity.HasKey(e => e.ManualDatabaseColumnId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ManualDatabaseColumn", "AcqMetaSystem", tb => tb.HasComment("Manual override details for columns in the database."));

            entity.HasIndex(e => new { e.DatabaseTableSchema, e.DatabaseTableName, e.Name }, "UQ_ManualDatabaseColumn_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.ManualDatabaseColumnId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.DatabaseTableName)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The name of the table the column belongs to.");
            entity.Property(e => e.DatabaseTableSchema)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The schema of the table the column belongs to.");
            entity.Property(e => e.FieldTypeName)
                .HasMaxLength(200)
                .HasComment("The name of the field type to be manually added to the column.");
            entity.Property(e => e.IsGenerated).HasComment("Can the fields value be generated by the database.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The Name of the database column.");
        });

        modelBuilder.Entity<ManualDerivedRelationship>(entity =>
        {
            entity.HasKey(e => e.Name);

            entity.ToTable("ManualDerivedRelationship", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details manually defined derived relationships between compounds.");
                    tb.HasTrigger("T_ManualDerivedRelationship_IUD");
                });

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasComment("A name which uniquely identifies this relationship.");
            entity.Property(e => e.Compound1Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the source compound.");
            entity.Property(e => e.Compound2Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the target compound.");
            entity.Property(e => e.IsParent).HasComment("Whether the source of this relationship is a parent of the target.");
            entity.Property(e => e.JoinExpression)
                .HasComment("Details the expression required to perform the join forwards.")
                .HasColumnType("xml");
            entity.Property(e => e.RelationshipDirection)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The relationship direction.");
            entity.Property(e => e.ReverseJoinExpression)
                .HasComment("Details the expression required to perform the join in reverse.")
                .HasColumnType("xml");
        });

        modelBuilder.Entity<ManualDerivedRelationshipDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ManualDerivedRelationshipDetail", "AcqMetaSystem");

            entity.Property(e => e.JoinCondition)
                .IsRequired()
                .HasMaxLength(58);
            entity.Property(e => e.JoinExpression).HasColumnType("xml");
            entity.Property(e => e.ManualDerivedRelationshipName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.RelationshipDirection)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReverseJoinCondition)
                .IsRequired()
                .HasMaxLength(62);
            entity.Property(e => e.ReverseJoinExpression).HasColumnType("xml");
            entity.Property(e => e.ReverseRelationshipDirection)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReverseRelationshipName).HasMaxLength(500);
        });

        modelBuilder.Entity<ManualDerivedRelationshipIndirectRelationship>(entity =>
        {
            entity.HasKey(e => new { e.Name, e.OrderNumber });

            entity.ToTable("ManualDerivedRelationshipIndirectRelationship", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the relationship chain defining the indirect path for the parent ManualDerivedRelationship defined relationship.");
                    tb.HasTrigger("T_ManualDerivedRelationshipIndirectRelationship_IUD");
                });

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasComment("The name of the parent record in ManualDerivedRelationship. Part of the primary key.");
            entity.Property(e => e.OrderNumber).HasComment("The order number of the indirect relationship within the parent ManualDerivedRelationship relationship. Part of the primary key.");
            entity.Property(e => e.RelationshipName)
                .IsRequired()
                .HasMaxLength(450)
                .HasComment("The name of the indirect relationship.")
                .UseCollation("Latin1_General_CS_AS");

            entity.HasOne(d => d.NameNavigation).WithMany(p => p.ManualDerivedRelationshipIndirectRelationship)
                .HasForeignKey(d => d.Name)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ManualDerivedRelationshipIndirectRelationship_01");
        });

        modelBuilder.Entity<ManualEqualityRelationship>(entity =>
        {
            entity.HasKey(e => e.ManualEqualityRelationshipGlobalId);

            entity.ToTable("ManualEqualityRelationship", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details manually defined equality relationships between compounds.");
                    tb.HasTrigger("T_ManualEqualityRelationship_IUD");
                });

            entity.Property(e => e.ManualEqualityRelationshipGlobalId)
                .ValueGeneratedNever()
                .HasComment("The GUID primary key.");
            entity.Property(e => e.Compound1Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the source compound.");
            entity.Property(e => e.Compound2Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the target compound.");
            entity.Property(e => e.DataSourceId).HasComment("The data source of this record.");
            entity.Property(e => e.IsParent).HasComment("Whether the source of this relationship is a parent of the target.");
            entity.Property(e => e.IsRequired).HasComment("Flag indicating that the relationship must be set on the source compound.");
            entity.Property(e => e.IsVisible).HasComment("Specifies if the relationship should be visible, null does not override.");
            entity.Property(e => e.Label)
                .HasMaxLength(200)
                .HasComment("The Label of the specified relationship.");
            entity.Property(e => e.RelationshipDirection)
                .IsRequired()
                .HasMaxLength(10)
                .HasComment("The relationship direction.");
            entity.Property(e => e.RuleBehavior)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Specifies kind of relationship with respect to rule propagation.");

            entity.HasOne(d => d.DataSource).WithMany(p => p.ManualEqualityRelationship)
                .HasForeignKey(d => d.DataSourceId)
                .HasConstraintName("FK_ManualEqualityRelationship_01");
        });

        modelBuilder.Entity<ManualEqualityRelationshipDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ManualEqualityRelationshipDetail", "AcqMetaSystem");

            entity.Property(e => e.Compound1Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Compound2Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Label).HasMaxLength(200);
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.RelationshipDirection)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.ReverseRelationshipDirection)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.ReverseRelationshipName).HasMaxLength(500);
            entity.Property(e => e.RuleBehavior)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ManualEqualityRelationshipJoin>(entity =>
        {
            entity.HasKey(e => new { e.ManualEqualityRelationshipGlobalId, e.OrderNumber });

            entity.ToTable("ManualEqualityRelationshipJoin", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details manually defined equality relationships between compounds.");
                    tb.HasTrigger("T_ManualEqualityRelationshipJoin_IUD");
                });

            entity.Property(e => e.ManualEqualityRelationshipGlobalId).HasComment("The link to the manual equality relationship.");
            entity.Property(e => e.OrderNumber).HasComment("The order of the fields to be joined.");
            entity.Property(e => e.CompoundField1Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The compound field from the source of the relationship.");
            entity.Property(e => e.CompoundField2Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The compound field from the target of the relationship.");

            entity.HasOne(d => d.ManualEqualityRelationshipGlobal).WithMany(p => p.ManualEqualityRelationshipJoin)
                .HasForeignKey(d => d.ManualEqualityRelationshipGlobalId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ManualEqualityRelationshipJoin_01");
        });

        modelBuilder.Entity<ManualExtendedRelationship>(entity =>
        {
            entity.HasKey(e => e.ManualExtendedRelationshipId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ManualExtendedRelationship", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details manually defined extended relationships between compounds. These relationship simply extend existing equality relationships.");
                    tb.HasTrigger("T_ManualExtendedRelationship_IUD");
                });

            entity.HasIndex(e => e.Name, "UQ_ManualExtendedRelationship_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.ManualExtendedRelationshipId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.DefaultFilterCondition)
                .HasComment("The default filter condition to apply to the relationship, if required.")
                .HasColumnType("xml");
            entity.Property(e => e.DefaultOrderingCondition)
                .HasComment("The default order condition to apply to the relationship, if required.")
                .HasColumnType("xml");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("A name which uniquely identifies this extended relationship.");
            entity.Property(e => e.OriginalRelationshipName)
                .IsRequired()
                .HasMaxLength(400)
                .HasComment("The name of the equality relationship which this relationship is extending.")
                .UseCollation("Latin1_General_CS_AS");
            entity.Property(e => e.ReverseDefaultFilterCondition)
                .HasComment("The default filter condition to apply to the reverse relationship, if required.")
                .HasColumnType("xml");
            entity.Property(e => e.ReverseDefaultOrderingCondition)
                .HasComment("The default order condition to apply to the reverse relationship, if required.")
                .HasColumnType("xml");
        });

        modelBuilder.Entity<ManualExtendedRelationshipDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ManualExtendedRelationshipDetail", "AcqMetaSystem");

            entity.Property(e => e.DefaultFilterCondition).HasColumnType("xml");
            entity.Property(e => e.DefaultOrderingCondition).HasColumnType("xml");
            entity.Property(e => e.JoinCondition)
                .IsRequired()
                .HasMaxLength(491);
            entity.Property(e => e.JoinType)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.RelationshipDirection)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReverseDefaultFilterCondition).HasColumnType("xml");
            entity.Property(e => e.ReverseDefaultOrderingCondition).HasColumnType("xml");
            entity.Property(e => e.ReverseJoinCondition)
                .IsRequired()
                .HasMaxLength(495);
            entity.Property(e => e.ReverseRelationshipDirection)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReverseRelationshipName).HasMaxLength(500);
        });

        modelBuilder.Entity<ManualMimeField>(entity =>
        {
            entity.HasKey(e => e.ManualMimeFieldId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ManualMimeField", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the MIME fields to be created.");
                    tb.HasTrigger("T_ManualMimeField_IUD");
                });

            entity.HasIndex(e => new { e.MimeFieldName, e.TableSchema, e.TableName, e.FieldType }, "UQ_ManualMimeField_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.ManualMimeFieldId).HasComment("The identity key for the Manual Mime Field table.");
            entity.Property(e => e.ComprisingFieldName)
                .HasMaxLength(128)
                .HasComment("The name of the field containing the information for this part of the mime.");
            entity.Property(e => e.FieldType)
                .IsRequired()
                .HasMaxLength(400)
                .HasComment("The type for this component of the mime field. ie Value, Type, SupportedValues");
            entity.Property(e => e.LockedFieldValue)
                .HasComment("The supported values for this part of the mime field.")
                .HasColumnType("xml");
            entity.Property(e => e.MimeFieldName)
                .IsRequired()
                .HasMaxLength(400)
                .HasComment("The name to be given to the mime field.");
            entity.Property(e => e.OrderNumber).HasComment("The order in which the ComprisingFields / LockedFieldValues are put into the xml for the mime field.");
            entity.Property(e => e.TableName)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The name of the table that this mime field is from.");
            entity.Property(e => e.TableSchema)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The schema of the table that this mime field is from.");
            entity.Property(e => e.XmlType)
                .HasMaxLength(50)
                .HasComment("The type of xml to be created, ElementPath or LockedFieldValue ");
        });

        modelBuilder.Entity<ManualObjectCategory>(entity =>
        {
            entity.HasKey(e => e.ObjectCategoryGlobalId);

            entity.ToTable("ManualObjectCategory", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Manual Record of an Object Category.");
                    tb.HasTrigger("T_ManualObjectCategory_IUD");
                });

            entity.HasIndex(e => new { e.ParentObjectCategoryGlobalId, e.Name }, "UQ_ManualObjectCategory_01").IsUnique();

            entity.Property(e => e.ObjectCategoryGlobalId)
                .ValueGeneratedNever()
                .HasComment("The unique identifier primary key.");
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The default label of the Object Category, which is to be overriden by Localization.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The name of the Object Category.");
            entity.Property(e => e.ObjectCategoryType)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The type of the Object Category.");
            entity.Property(e => e.ParentObjectCategoryGlobalId).HasComment("The Parent Object Category, if there is one.");

            entity.HasOne(d => d.ParentObjectCategoryGlobal).WithMany(p => p.InverseParentObjectCategoryGlobal)
                .HasForeignKey(d => d.ParentObjectCategoryGlobalId)
                .HasConstraintName("FK_ManualObjectCategory_01");
        });

        modelBuilder.Entity<ManualRange>(entity =>
        {
            entity.HasKey(e => e.RangeName);

            entity.ToTable("ManualRange", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the manually defined ranges to be created.");
                    tb.HasTrigger("T_ManualRange_IUD");
                });

            entity.Property(e => e.RangeName)
                .HasMaxLength(200)
                .HasComment("The name of the range.");
            entity.Property(e => e.CompoundName)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the manual compound upon which it is based.");
            entity.Property(e => e.FromField)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the compound field used as the from value.");
            entity.Property(e => e.HasDuplicatedIntervals).HasComment("Whether this range allows repeated values for the from and to fields for the given range grouping elements.");
            entity.Property(e => e.ToField)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the compound field used as the from value.");
        });

        modelBuilder.Entity<ManualRangeGroupingElement>(entity =>
        {
            entity.HasKey(e => new { e.RangeName, e.OrderNumber });

            entity.ToTable("ManualRangeGroupingElement", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the manually defined range grouping elements to be created.");
                    tb.HasTrigger("T_ManualRangeGroupingElement_IUD");
                });

            entity.HasIndex(e => new { e.RangeName, e.FieldName }, "UQ_ManualRangeGroupingElement_01")
                .IsUnique()
                .HasFilter("([FieldName] IS NOT NULL)");

            entity.HasIndex(e => new { e.RangeName, e.CompoundName }, "UQ_ManualRangeGroupingElement_02")
                .IsUnique()
                .HasFilter("([CompoundName] IS NOT NULL)");

            entity.Property(e => e.RangeName)
                .HasMaxLength(200)
                .HasComment("The name of the range.");
            entity.Property(e => e.OrderNumber).HasComment("The order number of the grouping element within the range.");
            entity.Property(e => e.CompoundName)
                .HasMaxLength(200)
                .HasComment("The compound used to group the ranges.");
            entity.Property(e => e.FieldName)
                .HasMaxLength(200)
                .HasComment("The compound field used to group the ranges.");

            entity.HasOne(d => d.RangeNameNavigation).WithMany(p => p.ManualRangeGroupingElement)
                .HasForeignKey(d => d.RangeName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ManualRangeGroupingElement_01");
        });

        modelBuilder.Entity<ManualSurrogateKeyParent>(entity =>
        {
            entity.HasKey(e => new { e.TableSchema, e.TableName });

            entity.ToTable("ManualSurrogateKeyParent", "AcqMetaSystem", tb => tb.HasComment("Details parent fields inherited by a child table from a parent table via a manually defined surrogate key relationship.  Note: This is a pragmatic design that may be expanded to become more generic in the future; MC-11669."));

            entity.Property(e => e.TableSchema)
                .HasMaxLength(128)
                .HasComment("The schema of the child table.");
            entity.Property(e => e.TableName)
                .HasMaxLength(128)
                .HasComment("The name of the child table.");
            entity.Property(e => e.CompoundName)
                .HasMaxLength(200)
                .HasComment("The name of the compound to which the uniqueness belongs.");
            entity.Property(e => e.DataSourceName)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.IncludeCompoundNamePrefix).HasComment("Whether or not to prefix the field name with the source compound name.");
            entity.Property(e => e.SurrogateKeyFieldName)
                .HasMaxLength(128)
                .HasComment("The name of the surrogate key field.");
            entity.Property(e => e.UniquenessConstraintName)
                .HasMaxLength(128)
                .HasComment("The name of the constraint defining uniqueness where it's automated rather than manual. Mutually exclusive with SurrogateKeyFieldName and ParentManualCompoundUniquenessId since the unique constraint will define the relevant columns and their foreign keys will define the relationship path.");
            entity.Property(e => e.UniquenessName)
                .HasMaxLength(128)
                .HasComment("The internal name of the uniqueness. Required for unique keys as there may be more than 1 per compound. Should correspond to the SQL Server key name if it exists.");

            entity.HasOne(d => d.DataSourceNameNavigation).WithMany(p => p.ManualSurrogateKeyParent)
                .HasPrincipalKey(p => p.Name)
                .HasForeignKey(d => d.DataSourceName)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ManualSurrogateKeyParent_02");

            entity.HasOne(d => d.ManualCompoundUniqueness).WithMany(p => p.ManualSurrogateKeyParent)
                .HasForeignKey(d => new { d.CompoundName, d.UniquenessName })
                .HasConstraintName("FK_ManualSurrogateKeyParent_01");
        });

        modelBuilder.Entity<ManualTableInclusion>(entity =>
        {
            entity.HasKey(e => new { e.Schema, e.Name });

            entity.ToTable("ManualTableInclusion", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the tables and views that need to be included in database table and column, but dont have keys.");
                    tb.HasTrigger("T_ManualTableInclusion_IUD");
                });

            entity.Property(e => e.Schema)
                .HasMaxLength(128)
                .HasComment("The Schema of the object.");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasComment("The name of the object.");
        });

        modelBuilder.Entity<ManualTableInclusionKey>(entity =>
        {
            entity.HasKey(e => new { e.Schema, e.Name, e.ColumnName });

            entity.ToTable("ManualTableInclusionKey", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the columns to be part of the primary key for tables or views that have been identified in ManualTableInclusion.");
                    tb.HasTrigger("T_ManualTableInclusionKey_IUD");
                });

            entity.Property(e => e.Schema)
                .HasMaxLength(128)
                .HasComment("The Schema of the object.");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasComment("The name of the object.");
            entity.Property(e => e.ColumnName)
                .HasMaxLength(128)
                .HasComment("The name of the column that is part of the primary key to be used for this object.");

            entity.HasOne(d => d.ManualTableInclusion).WithMany(p => p.ManualTableInclusionKey)
                .HasForeignKey(d => new { d.Schema, d.Name })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ManualTableInclusionKey_01");
        });

        modelBuilder.Entity<ManualVirtualFieldTable>(entity =>
        {
            entity.HasKey(e => e.ManualVirtualFieldTableId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ManualVirtualFieldTable", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Allows manual configuration of virtual field systems.");
                    tb.HasTrigger("T_ManualVirtualFieldTable_IUD");
                });

            entity.HasIndex(e => new { e.ValueColumnTableSchema, e.ValueColumnTableName, e.ValueColumnName, e.CodeColumnTableSchema, e.CodeColumnTableName, e.CodeColumnName }, "UQ_ManualVirtualFieldTable_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.ManualVirtualFieldTableId).HasComment("The auto incrementing primary key.");
            entity.Property(e => e.CodeColumnName)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The column containing the virtual field codes.");
            entity.Property(e => e.CodeColumnTableName)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The table containing the virtual field codes.");
            entity.Property(e => e.CodeColumnTableSchema)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The schema of the table containing the virtual field codes.");
            entity.Property(e => e.DataSourceId).HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.DataTypeColumnName)
                .HasMaxLength(128)
                .HasComment("The column containing the type of the data held by the virtual field.");
            entity.Property(e => e.DefaultMicaDataType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The standard Mica data type of the type of the data held by the virtual field. If it is supplied, this will be applied in precedence of DataTypeColumnName.");
            entity.Property(e => e.IsParentCompulsory).HasComment("Is the parent virtual field value compulsory when trying to determine this virtual field.");
            entity.Property(e => e.IsReadOnly).HasComment("Whether the virtual field should be read only.");
            entity.Property(e => e.ValueColumnName)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The column containing the virtual field values.");
            entity.Property(e => e.ValueColumnTableName)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The table containing the virtual field values.");
            entity.Property(e => e.ValueColumnTableSchema)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The schema of the table containing the virtual field values.");
        });

        modelBuilder.Entity<MigratedFormPropertyObject>(entity =>
        {
            entity.HasKey(e => new { e.FormId, e.PropertyObjectGlobalId }).HasName("PK_AcqPresentation.MigratedFormPropertyObject");

            entity.ToTable("MigratedFormPropertyObject", "AcqPresentation", tb => tb.HasComment("Associates a Neo 2.9 form (dashboard) residing in AcqPresentation.Form with a GIM Suite 4+ property object residing in AcqManagement.PropertyObject."));

            entity.HasIndex(e => e.FormId, "UQ_AcqPresentation.MigratedFormPropertyObject_01").IsUnique();

            entity.HasIndex(e => e.PropertyObjectGlobalId, "UQ_AcqPresentation.MigratedFormPropertyObject_02").IsUnique();

            entity.Property(e => e.FormId).HasComment("The ID of the item in AcqPresentation.Form to associate with a property object.");
            entity.Property(e => e.PropertyObjectGlobalId).HasComment("The GUID of the item in AcqManagement.PropertyObject to associate with the old form.");

            entity.HasOne(d => d.Form).WithOne(p => p.MigratedFormPropertyObject)
                .HasForeignKey<MigratedFormPropertyObject>(d => d.FormId)
                .HasConstraintName("FK_AcqPresentation.MigratedFormPropertyObject_AcqPresentation.Form_01");
        });

        modelBuilder.Entity<MigratedViewPropertyObject>(entity =>
        {
            entity.HasKey(e => new { e.ViewGlobalId, e.PropertyObjectGlobalId }).HasName("PK_AcqPresentation.MigratedViewPropertyObject");

            entity.ToTable("MigratedViewPropertyObject", "AcqPresentation", tb => tb.HasComment("Associates a Neo 2.9 view template residing in AcqPresentation.View with a GIM Suite 4+ property object residing in AcqManagement.PropertyObject."));

            entity.HasIndex(e => e.ViewGlobalId, "UQ_AcqPresentation.MigratedViewPropertyObject_01").IsUnique();

            entity.HasIndex(e => e.PropertyObjectGlobalId, "UQ_AcqPresentation.MigratedViewPropertyObject_02").IsUnique();

            entity.Property(e => e.ViewGlobalId).HasComment("The GUID of the item in AcqPresentation.View to associate with a property object.");
            entity.Property(e => e.PropertyObjectGlobalId).HasComment("The GUID of the item in AcqManagement.PropertyObject to associate with the old view template.");

            entity.HasOne(d => d.ViewGlobal).WithOne(p => p.MigratedViewPropertyObject)
                .HasPrincipalKey<View>(p => p.ViewGlobalId)
                .HasForeignKey<MigratedViewPropertyObject>(d => d.ViewGlobalId)
                .HasConstraintName("FK_AcqPresentation.MigratedViewPropertyObject_AcqPresentation.View_01");
        });

        modelBuilder.Entity<Module>(entity =>
        {
            entity.HasKey(e => e.ModuleId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Module", "AcqManagement", tb => tb.HasComment("Details the modules installed on the system."));

            entity.HasIndex(e => e.Name, "UQ_Module_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.ModuleId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Description).HasComment("The description of the module.");
            entity.Property(e => e.ModuleDetails)
                .HasComment("An XML document providing extra information about the module.")
                .HasColumnType("xml");
            entity.Property(e => e.ModuleTypeId).HasComment("The primary key of the module type of this module.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("The name of the module.");

            entity.HasOne(d => d.ModuleType).WithMany(p => p.Module)
                .HasForeignKey(d => d.ModuleTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Module_01");

            entity.HasMany(d => d.DependentModule).WithMany(p => p.ModuleNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "ModuleDependency",
                    r => r.HasOne<Module>().WithMany()
                        .HasForeignKey("DependentModuleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ModuleDependency_02"),
                    l => l.HasOne<Module>().WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ModuleDependency_01"),
                    j =>
                    {
                        j.HasKey("ModuleId", "DependentModuleId").HasAnnotation("SqlServer:FillFactor", 80);
                        j.ToTable("ModuleDependency", "AcqManagement", tb =>
                            {
                                tb.HasComment("Lists the different types of modules in the system.");
                                tb.HasTrigger("T_ModuleDependency_IU");
                            });
                        j.IndexerProperty<int>("ModuleId").HasComment("The integer primary key of the module being depended upon.");
                        j.IndexerProperty<int>("DependentModuleId").HasComment("The integer primary key of the module which relies on the other module.");
                    });

            entity.HasMany(d => d.ModuleNavigation).WithMany(p => p.DependentModule)
                .UsingEntity<Dictionary<string, object>>(
                    "ModuleDependency",
                    r => r.HasOne<Module>().WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ModuleDependency_01"),
                    l => l.HasOne<Module>().WithMany()
                        .HasForeignKey("DependentModuleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ModuleDependency_02"),
                    j =>
                    {
                        j.HasKey("ModuleId", "DependentModuleId").HasAnnotation("SqlServer:FillFactor", 80);
                        j.ToTable("ModuleDependency", "AcqManagement", tb =>
                            {
                                tb.HasComment("Lists the different types of modules in the system.");
                                tb.HasTrigger("T_ModuleDependency_IU");
                            });
                        j.IndexerProperty<int>("ModuleId").HasComment("The integer primary key of the module being depended upon.");
                        j.IndexerProperty<int>("DependentModuleId").HasComment("The integer primary key of the module which relies on the other module.");
                    });
        });

        modelBuilder.Entity<ModuleDependencyOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ModuleDependencyOrder", "AcqManagement");
        });

        modelBuilder.Entity<ModuleType>(entity =>
        {
            entity.HasKey(e => e.ModuleTypeId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ModuleType", "AcqManagement", tb => tb.HasComment("Details the different types of modules in the system."));

            entity.HasIndex(e => e.Name, "UQ_ModuleType_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.ModuleTypeId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Description).HasComment("A description of the module type.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("The name of the module type.");
        });

        modelBuilder.Entity<ModuleVersioning>(entity =>
        {
            entity.HasKey(e => new { e.ModuleId, e.Major, e.Minor, e.Revision, e.Interim }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ModuleVersioning", "AcqManagement", tb => tb.HasComment("Details the compatibility versions supported for each installed module."));

            entity.Property(e => e.ModuleId).HasComment("The module id.");
            entity.Property(e => e.Major).HasComment("The major number component of the module version.");
            entity.Property(e => e.Minor).HasComment("The minor number component of the module version.");
            entity.Property(e => e.Revision).HasComment("The revision number component of the module version.");
            entity.Property(e => e.Interim).HasComment("The interim number component of the module version.");
            entity.Property(e => e.IsSupported).HasComment("Whether this version of the module is supported by the currently installed version.");
            entity.Property(e => e.ReleaseDate)
                .HasComment("The date that this version of the module was released.")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Module).WithMany(p => p.ModuleVersioning)
                .HasForeignKey(d => d.ModuleId)
                .HasConstraintName("FK_ModuleVersioning_01");
        });

        modelBuilder.Entity<Numbers>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Numbers", "dbo");

            entity.HasIndex(e => e.Number, "CIX_Number")
                .IsUnique()
                .IsClustered()
                .HasFillFactor(100);
        });

        modelBuilder.Entity<ObjectCategory>(entity =>
        {
            entity.HasKey(e => e.ObjectCategoryGlobalId);

            entity.ToTable("ObjectCategory", "AcqMetaSystem", tb => tb.HasComment("Cached record of an object category."));

            entity.HasIndex(e => e.ParentObjectCategoryGlobalId, "IDX_ObjectCategory_01");

            entity.HasIndex(e => new { e.ParentObjectCategoryGlobalId, e.Name }, "UQ_ObjectCategory_01").IsUnique();

            entity.Property(e => e.ObjectCategoryGlobalId)
                .ValueGeneratedNever()
                .HasComment("The unique identifier primary key.");
            entity.Property(e => e.DataSourceId).HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The default label of the object category, which is to be overriden by localization.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The name of the object category.");
            entity.Property(e => e.ObjectCategoryType)
                .IsRequired()
                .HasMaxLength(100)
                .HasDefaultValue("Generic")
                .HasComment("The type of the object category.");
            entity.Property(e => e.ParentObjectCategoryGlobalId).HasComment("The parent object category, if there is one.");

            entity.HasOne(d => d.ParentObjectCategoryGlobal).WithMany(p => p.InverseParentObjectCategoryGlobal)
                .HasForeignKey(d => d.ParentObjectCategoryGlobalId)
                .HasConstraintName("FK_ObjectCategory_01");

            entity.HasMany(d => d.Compound).WithMany(p => p.ObjectCategoryGlobal)
                .UsingEntity<Dictionary<string, object>>(
                    "CompoundObjectCategory",
                    r => r.HasOne<Compound>().WithMany()
                        .HasForeignKey("CompoundId")
                        .HasConstraintName("FK_CompoundObjectCategory_01"),
                    l => l.HasOne<ObjectCategory>().WithMany()
                        .HasForeignKey("ObjectCategoryGlobalId")
                        .HasConstraintName("FK_CompoundObjectCategory_02"),
                    j =>
                    {
                        j.HasKey("ObjectCategoryGlobalId", "CompoundId");
                        j.ToTable("CompoundObjectCategory", "AcqMetaSystem", tb => tb.HasComment("Cache of association between Compounds and Object Categories."));
                        j.HasIndex(new[] { "CompoundId" }, "IDX_CompoundObjectCategory_01");
                        j.IndexerProperty<Guid>("ObjectCategoryGlobalId").HasComment("The primary key of the Object Category.");
                        j.IndexerProperty<int>("CompoundId").HasComment("The primary key of the Compound.");
                    });
        });

        modelBuilder.Entity<POINTGEOBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.SAMPLEID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("POINTGEOBIGCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("PointGeoBigComment Table stores long geology comments (up to 4000 characters) for a point sample. It is associated with the Sample table and other details tables to make up the PointSample and SampleGeoAssay compound definitions. ");
                    tb.HasTrigger("T_PGBCM_VAL");
                });

            entity.HasIndex(e => e.SAMPLEID, "IDX_POINTGEOBIGCOMMENT_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_POINTGEOBIGCOMMENT_02").HasFillFactor(80);

            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.POINTGEOBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_POINTGEOBIGCOMMENT_GBCC");
        });

        modelBuilder.Entity<POINTGEOCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.SAMPLEID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("POINTGEOCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Store comments associated with point data in a PointSample compound definition. ");
                    tb.HasTrigger("T_PGCM_VAL");
                });

            entity.HasIndex(e => e.SAMPLEID, "IDX_POINTGEOCOMMENT_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_POINTGEOCOMMENT_02").HasFillFactor(80);

            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.POINTGEOCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_POINTGEOCOMMENT_GCC");
        });

        modelBuilder.Entity<POINTGEOLOGY>(entity =>
        {
            entity.HasKey(e => new { e.SAMPLEID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("POINTGEOLOGY", "dbo", tb =>
                {
                    tb.HasComment("PointGeology was designed to store geological information associated with point samples (geochemical and geotechnical samples for example) or for drilling where both the geological and assay sampling intervals are both the same (for example, production RC drilling).  This table is part of the compound definitions PointSample (for HoleIDs with a HoleType=GEOCHEM) and SampleGeoAssay (for HoleIDs with a HoleType=DRILLHOLE). Where the geological and assay sampling intervals differ, the drillhole geology is stored in GeoInterval. The primary keys are SampleID and Name. Value is a required field. ");
                    tb.HasTrigger("LastModifiedUTPointGeology");
                    tb.HasTrigger("T_PG_VAL");
                });

            entity.HasIndex(e => e.SAMPLEID, "IDX_POINTGEOLOGY_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_POINTGEOLOGY_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_POINTGEOLOGY_03").HasFillFactor(80);

            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.POINTGEOLOGY)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_POINTGEOLOGY_GCS");
        });

        modelBuilder.Entity<PREPARATION>(entity =>
        {
            entity.HasKey(e => e.PREPARATION1)
                .IsClustered(false)
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("PREPARATION", "dbo", tb => tb.HasComment("The reference table for AssayDetection. The Preparation type is defined in this table. "));

            entity.Property(e => e.PREPARATION1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PREPARATION");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PROJECT>(entity =>
        {
            entity.HasKey(e => e.PROJECTCODE)
                .HasName("PRIMARYKEYPROJECT")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("PROJECT", "dbo", tb =>
                {
                    tb.HasComment("Project stores company generated ProjectCode(s) that are used to identify particular activities - it could represent a geological or tenement boundary, for example. A project often consists of a number of different prospects. ");
                    tb.HasTrigger("T_PROJECT_VS_UD");
                    tb.HasTrigger("T_P_CAS");
                    tb.HasTrigger("T_P_CON");
                });

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifying code of the project.");
            entity.Property(e => e.ACTIVE)
                .HasDefaultValue((byte)1)
                .HasComment("Whether or not the project is active.");
            entity.Property(e => e.AREACODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifying code of the location of the project.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the project.");
            entity.Property(e => e.PROJECTNAME)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the project.");

            entity.HasOne(d => d.AREACODENavigation).WithMany(p => p.PROJECT)
                .HasForeignKey(d => d.AREACODE)
                .HasConstraintName("PROJECT0AREA");
        });

        modelBuilder.Entity<PROJECTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("PROJECTCODE", "dbo", tb =>
                {
                    tb.HasComment("ProjectCode stores the names of the virtual fields for the Projects compound definition. ");
                    tb.HasTrigger("T_PROJECTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_PROJECTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.PROJECTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROJECTCODE_DATATYPE");
        });

        modelBuilder.Entity<PROJECTDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("PROJECTDETAILS", "dbo", tb =>
                {
                    tb.HasComment("ProjectDetails stores data for the Project virtual fields. It is associated with the Project table to make up the Projects compound definition. ");
                    tb.HasTrigger("T_PROJECTDETAILS_VAL");
                });

            entity.HasIndex(e => e.PROJECTCODE, "IDX_PROJECTDETAILS_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_PROJECTDETAILS_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_PROJECTDETAILS_03").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.PROJECTDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROJECTDETAILS_NAME");
        });

        modelBuilder.Entity<PROSPECT>(entity =>
        {
            entity.HasKey(e => new { e.PROSPECT1, e.PROJECTCODE })
                .HasName("PRIMARYKEYPROSPECT")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("PROSPECT", "dbo", tb =>
                {
                    tb.HasComment("Table listing prospects that belong to a project.");
                    tb.HasTrigger("T_PT_CAS");
                    tb.HasTrigger("T_PT_CON_I");
                    tb.HasTrigger("T_PT_CON_U");
                });

            entity.Property(e => e.PROSPECT1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifying code of the prospect.")
                .HasColumnName("PROSPECT");
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifying code of the project to which the prospect belongs.");
            entity.Property(e => e.ACTIVE)
                .HasDefaultValue((byte)1)
                .HasComment("Whether or not the prospect is active.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the prospect.");
            entity.Property(e => e.PROSPECTNAME)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The name of the prospect.");
        });

        modelBuilder.Entity<PROSPECTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("PROSPECTCODE", "dbo", tb =>
                {
                    tb.HasComment("ProspectCode stores the names of the virtual fields for the Prospects compound definition. ");
                    tb.HasTrigger("T_PROSPECTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_PROSPECTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.PROSPECTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROSPECTCODE_DATATYPE");
        });

        modelBuilder.Entity<PROSPECTDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.PROSPECT, e.PROJECTCODE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("PROSPECTDETAILS", "dbo", tb =>
                {
                    tb.HasComment("ProspectDetails stores data for the Prospect virtual fields. It is associated with the Prospect table to make up the Prospects compound definition. ");
                    tb.HasTrigger("T_PROSPECTDETAILS_VAL");
                });

            entity.HasIndex(e => new { e.PROSPECT, e.PROJECTCODE }, "IDX_PROSPECTDETAILS_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_PROSPECTDETAILS_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_PROSPECTDETAILS_03").HasFillFactor(80);

            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.PROSPECTDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROSPECTDETAILS_NAME");
        });

        modelBuilder.Entity<ProcessingEventType>(entity =>
        {
            entity.HasKey(e => e.ProcessingEventTypeId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ProcessingEventType", "AcqManagement", tb => tb.HasComment("Details all the types of events which can trigger one or more processes."));

            entity.HasIndex(e => e.Name, "UQ_AcqManagement_ProcessingEventType_01").IsUnique();

            entity.Property(e => e.ProcessingEventTypeId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Description)
                .HasMaxLength(4000)
                .HasComment("A description of the processing event type.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("The name of the processing event type.");
        });

        modelBuilder.Entity<ProcessingRequest>(entity =>
        {
            entity.HasKey(e => e.ProcessingRequestId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ProcessingRequest", "AcqManagement", tb => tb.HasComment("Details the pending processing requests."));

            entity.Property(e => e.ProcessingRequestId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.ProcessingEventTypeId).HasComment("The Processing Event Type which triggered this process request.");
            entity.Property(e => e.ProcessingTypeId).HasComment("The Processing Type which will be processed.");
            entity.Property(e => e.RequestDatetime)
                .HasDefaultValueSql("(getdate())")
                .HasComment("The Date and time the request was made.")
                .HasColumnType("datetime");
            entity.Property(e => e.RequestDetails)
                .HasComment("The XML details regarding the request.")
                .HasColumnType("xml");

            entity.HasOne(d => d.ProcessingTypeEventType).WithMany(p => p.ProcessingRequest)
                .HasForeignKey(d => new { d.ProcessingTypeId, d.ProcessingEventTypeId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcessingRequest_01");
        });

        modelBuilder.Entity<ProcessingType>(entity =>
        {
            entity.HasKey(e => e.ProcessingTypeId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ProcessingType", "AcqManagement", tb => tb.HasComment("Details all the types of processes which can be run."));

            entity.HasIndex(e => e.Name, "UQ_AcqManagement_ProcessingType_01").IsUnique();

            entity.Property(e => e.ProcessingTypeId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Description)
                .HasMaxLength(4000)
                .HasComment("A description of the process type.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("The name of the process type.");
        });

        modelBuilder.Entity<ProcessingTypeEventType>(entity =>
        {
            entity.HasKey(e => new { e.ProcessingTypeId, e.ProcessingEventTypeId }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ProcessingTypeEventType", "AcqManagement", tb => tb.HasComment("Associates all processing event types which can trigger a process with those processes."));

            entity.Property(e => e.ProcessingTypeId).HasComment("The primary key of the process type which will be triggered when the given processing event type is raised.");
            entity.Property(e => e.ProcessingEventTypeId).HasComment("The primary key of the processing event type which triggers the given process type.");
            entity.Property(e => e.ProcessingEventTypePriority).HasComment("The priority of the given processing event type as it applies to the given processing type.");

            entity.HasOne(d => d.ProcessingEventType).WithMany(p => p.ProcessingTypeEventType)
                .HasForeignKey(d => d.ProcessingEventTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcessingTypeEventType_02");

            entity.HasOne(d => d.ProcessingType).WithMany(p => p.ProcessingTypeEventType)
                .HasForeignKey(d => d.ProcessingTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProcessingTypeEventType_01");
        });

        modelBuilder.Entity<Profile>(entity =>
        {
            entity.HasKey(e => e.ProfileId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Profile", "AcqPresentation", tb =>
                {
                    tb.HasComment("Details the security profiles.");
                    tb.HasTrigger("T_Profile_OD");
                });

            entity.HasIndex(e => e.Name, "UQ_Profile_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.ProfileId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Description).HasComment("The Description of the Profile.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(254)
                .HasComment("The Name of the Profile.");
            entity.Property(e => e.OwnerId).HasComment("The Profile Owner.");
            entity.Property(e => e.Shared).HasComment("Is the Profile Shared.");

            entity.HasOne(d => d.Owner).WithMany(p => p.Profile)
                .HasForeignKey(d => d.OwnerId)
                .HasConstraintName("FK_Profile_01");
        });

        modelBuilder.Entity<ProfileRole>(entity =>
        {
            entity.HasKey(e => new { e.ProfileId, e.RoleId }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ProfileRole", "AcqPresentation", tb => tb.HasComment("Details the Roles a profile is related to."));

            entity.HasIndex(e => new { e.ProfileId, e.IsAvailable }, "IDX_ProfileRole_01").HasFillFactor(80);

            entity.HasIndex(e => new { e.ProfileId, e.IsActive }, "IDX_ProfileRole_02").HasFillFactor(80);

            entity.Property(e => e.ProfileId).HasComment("The Profile.");
            entity.Property(e => e.RoleId).HasComment("The Role the profile has access to.");
            entity.Property(e => e.IsActive).HasComment("Is the Profile Role Combination Active.");
            entity.Property(e => e.IsAvailable).HasComment("Is the Profile Role Combination available to be made active.");

            entity.HasOne(d => d.Profile).WithMany(p => p.ProfileRole)
                .HasForeignKey(d => d.ProfileId)
                .HasConstraintName("FK_ProfileRole_01");

            entity.HasOne(d => d.Role).WithMany(p => p.ProfileRole)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_ProfileRole_02");
        });

        modelBuilder.Entity<Projection>(entity =>
        {
            entity.ToTable("Projection", "AcqCoordinates", tb => tb.HasComment("The projection employed for coordinates."));

            entity.HasIndex(e => e.Name, "UQ_Projection_01").IsUnique();

            entity.Property(e => e.ProjectionId).HasComment("The auto incrementing primary key.");
            entity.Property(e => e.Definition)
                .IsRequired()
                .HasComment("The XML definition of the projection.")
                .HasColumnType("xml");
            entity.Property(e => e.Description).HasComment("A description of the projection.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The unique name given to the projection.");
        });

        modelBuilder.Entity<PropertyObject>(entity =>
        {
            entity.HasKey(e => e.PropertyObjectGlobalId).HasName("PK_AcqManagement_PropertyObject");

            entity.ToTable("PropertyObject", "AcqManagement", tb =>
                {
                    tb.HasComment("Details information about property objects in the system.");
                    tb.HasTrigger("T_PropertyObject_OD");
                });

            entity.Property(e => e.PropertyObjectGlobalId)
                .ValueGeneratedNever()
                .HasComment("The unique identifier primary key.");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("A description of the property object.");
            entity.Property(e => e.Factory)
                .HasMaxLength(50)
                .HasComment("The name of the factory used to create objects.");
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(250)
                .HasComment("The label for the property object.");
            entity.Property(e => e.OriginalPropertyObjectGlobalId).HasComment("If this is a type of property object which can have multiple versions, the link to the first version of this property object.");
            entity.Property(e => e.PropertyObjectData)
                .IsRequired()
                .HasComment("Serialized data detailing information about the property object.");
            entity.Property(e => e.PropertyObjectType)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("The type of the property object.");
            entity.Property(e => e.Tags)
                .HasMaxLength(1000)
                .HasComment("Tags used to categorise the object.");
            entity.Property(e => e.UpdateDateTime)
                .HasComment("Date and time of the last modification.")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdateUserGlobalId).HasComment("Id of the user that last modified this object.");
            entity.Property(e => e.VersionNumber).HasComment("If this is a type of property object which can have multiple versions, the version number of the property object.");

            entity.HasMany(d => d.DependentPropertyObjectGlobal).WithMany(p => p.PropertyObjectGlobal)
                .UsingEntity<Dictionary<string, object>>(
                    "PropertyObjectDependency",
                    r => r.HasOne<PropertyObject>().WithMany()
                        .HasForeignKey("DependentPropertyObjectGlobalId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AcqManagement_PropertyObjectDependency_02"),
                    l => l.HasOne<PropertyObject>().WithMany()
                        .HasForeignKey("PropertyObjectGlobalId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AcqManagement_PropertyObjectDependency_01"),
                    j =>
                    {
                        j.HasKey("PropertyObjectGlobalId", "DependentPropertyObjectGlobalId").HasName("PK_AcqManagement_PropertyObjectDependency");
                        j.ToTable("PropertyObjectDependency", "AcqManagement", tb => tb.HasComment("Details information about property object dependencies."));
                        j.HasIndex(new[] { "DependentPropertyObjectGlobalId" }, "IDX_PropertyObjectDependency_01");
                        j.IndexerProperty<Guid>("PropertyObjectGlobalId").HasComment("The property object being depended on.");
                        j.IndexerProperty<Guid>("DependentPropertyObjectGlobalId").HasComment("The property object depending on the other property object.");
                    });

            entity.HasMany(d => d.PropertyObjectGlobal).WithMany(p => p.DependentPropertyObjectGlobal)
                .UsingEntity<Dictionary<string, object>>(
                    "PropertyObjectDependency",
                    r => r.HasOne<PropertyObject>().WithMany()
                        .HasForeignKey("PropertyObjectGlobalId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AcqManagement_PropertyObjectDependency_01"),
                    l => l.HasOne<PropertyObject>().WithMany()
                        .HasForeignKey("DependentPropertyObjectGlobalId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AcqManagement_PropertyObjectDependency_02"),
                    j =>
                    {
                        j.HasKey("PropertyObjectGlobalId", "DependentPropertyObjectGlobalId").HasName("PK_AcqManagement_PropertyObjectDependency");
                        j.ToTable("PropertyObjectDependency", "AcqManagement", tb => tb.HasComment("Details information about property object dependencies."));
                        j.HasIndex(new[] { "DependentPropertyObjectGlobalId" }, "IDX_PropertyObjectDependency_01");
                        j.IndexerProperty<Guid>("PropertyObjectGlobalId").HasComment("The property object being depended on.");
                        j.IndexerProperty<Guid>("DependentPropertyObjectGlobalId").HasComment("The property object depending on the other property object.");
                    });

            entity.HasMany(d => d.Schedule).WithMany(p => p.PropertyObjectGlobal)
                .UsingEntity<Dictionary<string, object>>(
                    "PropertyObjectSchedule",
                    r => r.HasOne<Schedule>().WithMany()
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK_AcqManagement_PropertyObjectSchedule_02"),
                    l => l.HasOne<PropertyObject>().WithMany()
                        .HasForeignKey("PropertyObjectGlobalId")
                        .HasConstraintName("FK_AcqManagement_PropertyObjectSchedule_01"),
                    j =>
                    {
                        j.HasKey("PropertyObjectGlobalId", "ScheduleId").HasName("PK_AcqManagement_PropertyObjectSchedule");
                        j.ToTable("PropertyObjectSchedule", "AcqManagement", tb => tb.HasComment("Details schedules a property object is associated with."));
                        j.IndexerProperty<Guid>("PropertyObjectGlobalId").HasComment("The primary key of the property object.");
                        j.IndexerProperty<int>("ScheduleId").HasComment("The primary key of the schedule the property object is associated with.");
                    });
        });

        modelBuilder.Entity<PropertyObjectEntity>(entity =>
        {
            entity.HasKey(e => e.PropertyObjectEntityId).HasName("PK_AcqManagement_PropertyObjectEntity");

            entity.ToTable("PropertyObjectEntity", "AcqManagement", tb => tb.HasComment("Details entities referring to property objects in the system."));

            entity.HasIndex(e => new { e.PropertyObjectGlobalId, e.EntityType, e.EntityId, e.EntityProperty }, "UQ_AcqManagement_PropertyObjectEntity_01").IsUnique();

            entity.Property(e => e.PropertyObjectEntityId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.EntityId)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The associated entity.");
            entity.Property(e => e.EntityProperty)
                .HasMaxLength(100)
                .HasComment("Optional property on the entity, otherwise the value.");
            entity.Property(e => e.EntityType)
                .IsRequired()
                .HasMaxLength(20)
                .HasComment("The type of the associated entity.");
            entity.Property(e => e.PropertyObjectGlobalId).HasComment("The ID of the property object.");

            entity.HasOne(d => d.PropertyObjectGlobal).WithMany(p => p.PropertyObjectEntity)
                .HasForeignKey(d => d.PropertyObjectGlobalId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AcqManagement_PropertyObjectEntity_01");
        });

        modelBuilder.Entity<QLR_LOGDELETEMSG>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("QLR_LOGDELETEMSG", "dbo", tb => tb.HasComment("The message table for deleted transaction log records."));

            entity.Property(e => e.DELETEDATE).HasColumnType("datetime");
            entity.Property(e => e.LOGTABLE)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LOG_AGE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QT_CHECKSAMPLE_CHECKSTAGE_PATH>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO, e.CHECKSTAGE }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("QT_CHECKSAMPLE_CHECKSTAGE_PATH", "dbo", tb => tb.HasComment("Internal table maintained by acQuire containing full checkstage paths. This is not a user updateable table."));

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QT_CHECKSAMPLE_FRACTIONID_PATH>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO, e.FRACTIONID }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("QT_CHECKSAMPLE_FRACTIONID_PATH", "dbo", tb => tb.HasComment("Internal table maintained by acQuire containing full FractionId paths. This is not a user updateable table."));

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QT_CHECKSAMPLE_ROOT_PARENT>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("QT_CHECKSAMPLE_ROOT_PARENT", "dbo", tb => tb.HasComment("Internal table maintained by acQuire containing full path for CHECKSAMPLE child rows back to their respective parent row. This is not a user updateable table."));

            entity.HasIndex(e => new { e.CHECKID_ROOT_PARENT, e.DUPLICATENO_ROOT_PARENT }, "IDX_QT_CHECKSAMPLE_ROOT_PARENT_01").HasFillFactor(80);

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID_ROOT_PARENT)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_ROOT_PARENT)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QT_COMPOSITELEVEL>(entity =>
        {
            entity.HasKey(e => e.COMPOSITEID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("QT_COMPOSITELEVEL", "dbo", tb =>
                {
                    tb.HasComment("A computed table. Records the interval ranges hierarchical levels of the composites. ");
                    tb.HasTrigger("T_QT_COMPOSITELEVEL_IU");
                });

            entity.Property(e => e.COMPOSITEID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A unique identifier and primary key of a composite.");
            entity.Property(e => e.COMPFROM).HasComment("The minimum SampFrom of all contributing original samples.");
            entity.Property(e => e.COMPOSITELEVEL).HasComment("The overall level of the composite hierarchy spanning intervening checksample layers.");
            entity.Property(e => e.COMPTO).HasComment("The maximum SampTo of all contributing original samples.");
            entity.Property(e => e.TOTALLEVEL).HasComment("The overall level of checksample - composite genealogy, max 3 permitted.");
        });

        modelBuilder.Entity<QT_FME_COORDSYS>(entity =>
        {
            entity.HasKey(e => e.FMECOORDSYS).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("QT_FME_COORDSYS", "dbo");

            entity.HasIndex(e => new { e.PROJECTION, e.DATUM }, "UQ_QT_FME_COORDSYS")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.FMECOORDSYS)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DATUM)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FMEDATUM)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTION)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.DATUMNavigation).WithMany(p => p.QT_FME_COORDSYS)
                .HasForeignKey(d => d.DATUM)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FME_COORDSYS_DATUM");

            entity.HasOne(d => d.PROJECTIONNavigation).WithMany(p => p.QT_FME_COORDSYS)
                .HasForeignKey(d => d.PROJECTION)
                .HasConstraintName("FK_FME_COORDSYS_PROJECTION");
        });

        modelBuilder.Entity<QT_FRACTIONASSAY>(entity =>
        {
            entity.HasKey(e => new { e.CHECKID, e.DUPLICATENO, e.ASSAYNAME, e.PRIORITY }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("QT_FRACTIONASSAY", "dbo", tb => tb.HasComment("Internal table maintained by acQuire containing all Fraction Assays. This is not a user updateable table."));

            entity.HasIndex(e => new { e.PRIORITY, e.NAME }, "IDX_QT_FRACTIONASSAY_01").HasFillFactor(80);

            entity.Property(e => e.CHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOADDATE).HasColumnType("datetime");
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QT_GEODETAILS_STRUCTURE_ERROR>(entity =>
        {
            entity.HasKey(e => e.ERRORID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("QT_GEODETAILS_STRUCTURE_ERROR", "dbo");

            entity.Property(e => e.DTSTAMP).HasColumnType("datetime");
            entity.Property(e => e.ERRORMSG)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QT_PIVOT>(entity =>
        {
            entity.HasKey(e => e.NUM).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("QT_PIVOT", "dbo");

            entity.Property(e => e.NUM).ValueGeneratedNever();
        });

        modelBuilder.Entity<QV_AC_ACTIVITYANDCONTRACTDETAILS_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_ACTIVITYANDCONTRACTDETAILS_RO", "dbo");

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier, within the contractor company, to identify the activity report.");
            entity.Property(e => e.ACTIVITYREPORTDATE)
                .HasComment("The date of the activity report.")
                .HasColumnType("datetime");
            entity.Property(e => e.ACTIVITYREPORTENDVALUE).HasComment("The end of a range value associated with the report item when the contract item type is defined for range data.");
            entity.Property(e => e.ACTIVITYREPORTEQUIPMENTCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for piece of equipment associated with the activity report.");
            entity.Property(e => e.ACTIVITYREPORTITEMACTIVITYHOURS)
                .HasComment("The duration of an activity. This is a separate field from ACTIVITYREPORTITEMSTARTDATETIME and ACTIVITYREPORTITEMENDDATETIME which is not calculated from their vaules.")
                .HasColumnType("decimal(9, 2)");
            entity.Property(e => e.ACTIVITYREPORTITEMENDDATETIME)
                .HasComment("The date and time that an activity ended.")
                .HasColumnType("datetime");
            entity.Property(e => e.ACTIVITYREPORTITEMHOLEID)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("With PROJECTCODE, the unique identifier for a hole related to the activity report item.");
            entity.Property(e => e.ACTIVITYREPORTITEMPROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("With HOLEID, the unique identifier for a hole related to the activity report item.");
            entity.Property(e => e.ACTIVITYREPORTITEMSTARTDATETIME)
                .HasComment("The date and time that an activity started or a cost was incurred.")
                .HasColumnType("datetime");
            entity.Property(e => e.ACTIVITYREPORTSINGLEVALUE).HasComment("The value associated with the report item when the contract item type is defined for point data rather than range data.");
            entity.Property(e => e.ACTIVITYREPORTSTARTVALUE).HasComment("The start of a range value associated with the report item when the contract item type is defined for range data.");
            entity.Property(e => e.CANPRORATA).HasComment("Bit flag to identify contract item types that can be charged pro rata.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the company that is the contractor associated with this contract.");
            entity.Property(e => e.CONTRACTCATEGORYCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The unique identifier for the contract category into which the report's contract must fall. This ties all this report's items to this category of contract.");
            entity.Property(e => e.CONTRACTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for this instance of the contract.");
            entity.Property(e => e.CONTRACTENDDATE)
                .HasComment("The date up to which this instance of the contract is effective.")
                .HasColumnType("datetime");
            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the actual contract item type.");
            entity.Property(e => e.CONTRACTITEMTYPEDESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the predefined contract item type.");
            entity.Property(e => e.CONTRACTITEMTYPEENDVALUE).HasComment("The end of a range used for contract item types that are defined for range data.");
            entity.Property(e => e.CONTRACTITEMTYPEGROUPNAME)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifying name for the group in which the contract item type is grouped.");
            entity.Property(e => e.CONTRACTITEMTYPELEVEL).HasComment("The level of the contract item type within the hierarchy.");
            entity.Property(e => e.CONTRACTITEMTYPESINGLEVALUE).HasComment("The value used for contract item types that are defined for point data rather than range data.");
            entity.Property(e => e.CONTRACTITEMTYPESTARTVALUE).HasComment("The start of a range used for contract item types that are defined for range data.");
            entity.Property(e => e.CONTRACTITEMTYPETEXTVALUE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value used for contract item types that expect text data.");
            entity.Property(e => e.CONTRACTITEMTYPEUNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The units used by the contract item type.");
            entity.Property(e => e.CONTRACTRATE).HasComment("A rate associated with the contract item.");
            entity.Property(e => e.CONTRACTSTARTDATE)
                .HasComment("The date from which this instance of the contract is effective.")
                .HasColumnType("datetime");
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A cost code associated with the activity report item.");
            entity.Property(e => e.EFFECTIVEENDDATE)
                .HasComment("A calculated end date taking account of the contract end date, the inactive date and the start date of any following contract instance. If there is no contract end date or inactive date, it is the day before the start of the next contiguous Contract, by COMPANYCODE and CONTRACTPURPOSECODE.")
                .HasColumnType("datetime");
            entity.Property(e => e.INACTIVEFROMDATE)
                .HasComment("The date up to which this instance of the contract is active.")
                .HasColumnType("datetime");
            entity.Property(e => e.ISRANGEDATA).HasComment("Whether or not the contract item type is defined for range data.");
            entity.Property(e => e.ITEMNUMBER).HasComment("Uniquely identifies the specific item within the activity report identified by COMPANYCODE and REPORTCODE.");
            entity.Property(e => e.JOBCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the job to which the contract has been assigned.");
            entity.Property(e => e.JOBDESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the Job.");
            entity.Property(e => e.PARAMENDVALUE).HasComment("The end of a range of values for the contract item.  Used for contract item types that are defined for range data.");
            entity.Property(e => e.PARAMSINGLEVALUE).HasComment("The value of the contract item. Used for contract item types that are defined for point data rather than range data.");
            entity.Property(e => e.PARAMSTARTVALUE).HasComment("The start of a range of values for the contract item.  Used for contract item types that are defined for range data.");
            entity.Property(e => e.PARAMTEXTVALUE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value of the contract item. Used for contract item types that expect text data.");
            entity.Property(e => e.SHIFT)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The uniquely identifying name of a shift associated with the activity report.");
            entity.Property(e => e.TOPLEVELCONTRACTITEMTYPECODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the top level of the contract item type that effectively identifies the whole contract item type hierarchy.");
        });

        modelBuilder.Entity<QV_AC_ACTIVITYREPORTCONTRACTMATCHES_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_ACTIVITYREPORTCONTRACTMATCHES_RO", "dbo");

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier, within the contractor company, to identify the activity report. With COMPANYCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.ACTIVITYREPORTDATE)
                .HasComment("The date of the activity report.")
                .HasColumnType("datetime");
            entity.Property(e => e.COMPANYCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the company that is the contractor associated with this contract. With ACTIVITYREPORTCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.CONTRACTCATEGORYCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The unique identifier for the contract category into which the report's contract must fall. This ties all this report's items to this category of contract.");
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for this instance of the contract.");
            entity.Property(e => e.CONTRACTSTARTDATE)
                .HasComment("The date from which this instance of the contract is effective.")
                .HasColumnType("datetime");
            entity.Property(e => e.EFFECTIVEENDDATE)
                .HasComment("A calculated end date taking account of the contract end date, the inactive date and the start date of any following contract instance. If there is no contract end date or inactive date, it is the day before the start of the next contiguous Contract, by COMPANYCODE and CONTRACTPURPOSECODE.")
                .HasColumnType("datetime");
            entity.Property(e => e.JOBCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the job to which the contract has been assigned.");
        });

        modelBuilder.Entity<QV_AC_ACTIVITYREPORTCOSTDETAILSNOTFULLYCOVERED_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_ACTIVITYREPORTCOSTDETAILSNOTFULLYCOVERED_RO", "dbo");

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier, within the contractor company, to identify the activity report. With COMPANYCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.ACTIVITYREPORTITEMENDVALUE).HasComment("The end of a range value associated with the report item when the contract item type is defined for range data.");
            entity.Property(e => e.ACTIVITYREPORTITEMSTARTVALUE).HasComment("The start of a range value associated with the report item when the contract item type is defined for range data.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the company that is the contractor associated with this contract. With ACTIVITYREPORTCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.CONTRACTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for this instance of the contract.");
            entity.Property(e => e.HIERARCHYLEVELENDVALUE).HasComment("The end of the cost range of the contract item.");
            entity.Property(e => e.HIERARCHYLEVELSTARTVALUE).HasComment("The start of the cost range of the contract item.");
            entity.Property(e => e.ITEMNUMBER).HasComment("Uniquely identifies the specific item within the activity report identified by COMPANYCODE and REPORTCODE.");
            entity.Property(e => e.QUANTITY).HasComment("The amount of the activity report value falling within the range for the contract item. This is the quantity used to form the cost for this report item within this contract item.");
            entity.Property(e => e.TOTALCONTRACTEDQUANTITY).HasComment("The amount of the quantity from the report item that is covered by the agreed contract. This should agree with TOTALREPORTEDQUANTITY");
            entity.Property(e => e.TOTALCOSTOFITEM).HasComment("The total cost of the report item across all relevant contract items.");
            entity.Property(e => e.TOTALREPORTEDQUANTITY).HasComment("The total amount of the quantity from the report item. This should agree with TOTALCONTRACTEDQUANTITY.");
            entity.Property(e => e.UNCONTRACTEDQUANTITY).HasComment("The shortfall of report item quantity against the agreed contract. A value other than 0 here indicates that the activity report reported uncontracted work.");
        });

        modelBuilder.Entity<QV_AC_ACTIVITYREPORTCOSTDETAILS_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_ACTIVITYREPORTCOSTDETAILS_RO", "dbo");

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier, within the contractor company, to identify the activity report. With COMPANYCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.ACTIVITYREPORTDATE)
                .HasComment("The date of the activity report.")
                .HasColumnType("datetime");
            entity.Property(e => e.ACTIVITYREPORTITEMENDVALUE).HasComment("The end of a range value associated with the report item when the contract item type is defined for range data.");
            entity.Property(e => e.ACTIVITYREPORTITEMSINGLEVALUE).HasComment("The value associated with the report item when the contract item type is defined for point data rather than range data.");
            entity.Property(e => e.ACTIVITYREPORTITEMSTARTVALUE).HasComment("The start of a range value associated with the report item when the contract item type is defined for range data.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the company that is the contractor associated with this contract. With ACTIVITYREPORTCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.CONTRACTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for this instance of the contract.");
            entity.Property(e => e.CONTRACTEDPRICE).HasComment("The agreed contracted rate for the contract item.");
            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the actual contract item type.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the contract item type.");
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasComment("The administrative code to track a batch of samples despatched to a laboratory.");
            entity.Property(e => e.DESPATCHPRORATAPERCENT)
                .HasComment("The proportion of an items quantity applied to a single despatch. Only used for Single Value items")
                .HasColumnType("decimal(7, 4)");
            entity.Property(e => e.EQUIPMENTCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("A uniquely identifying code for an individual item of equipment.");
            entity.Property(e => e.HIERARCHYLEVELENDVALUE).HasComment("The end of the cost range of the contract item type.");
            entity.Property(e => e.HIERARCHYLEVELSTARTVALUE).HasComment("The start of the cost range of the contract item type.");
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("With PROJECTCODE, the unique identifier for a hole related to the activity report item.");
            entity.Property(e => e.HOLEPRORATAPERCENT)
                .HasComment("The proportion of an items quantity applied to a single hole. Only used for Single Value items.")
                .HasColumnType("decimal(7, 4)");
            entity.Property(e => e.ITEMACTIVITYHOURS)
                .HasComment("The duration of an activity. Mutually exclusive with ITEMSTARTDATETIME and ITEMENDDATETIME.")
                .HasColumnType("decimal(9, 2)");
            entity.Property(e => e.ITEMCOST).HasComment("The final cost of this report item from this contract item.");
            entity.Property(e => e.ITEMENDDATETIME)
                .HasComment("The date and time that an activity ended. Mutually exclusive with ITEMACTIVITYHOURS.")
                .HasColumnType("datetime");
            entity.Property(e => e.ITEMNUMBER).HasComment("Uniquely identifies the specific item within the activity report identified by COMPANYCODE and REPORTCODE.");
            entity.Property(e => e.ITEMSTARTDATETIME)
                .HasComment("The date and time that an activity started or a cost was incurred. Mutually exclusive with ITEMACTIVITYHOURS.")
                .HasColumnType("datetime");
            entity.Property(e => e.JOBCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("A unique code for the Job.");
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("With HOLEID, the unique identifier for a hole related to the activity report item.");
            entity.Property(e => e.QUANTITY).HasComment("The amount of the activity report value falling within the range for the contract item type. This is the quantity used to form the cost for this report item within this contract item.");
            entity.Property(e => e.SHIFT)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The uniquely identifying name of a shift.");
            entity.Property(e => e.TOPLEVELCODE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the top level of the contract item type that effectively identifies the whole contract item type hierarchy.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The units associated with the contract item type.");
        });

        modelBuilder.Entity<QV_AC_ACTIVITYREPORTCOST_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_ACTIVITYREPORTCOST_RO", "dbo");

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier, within the contractor company, to identify the activity report. With COMPANYCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the company that is the contractor associated with this contract. With ACTIVITYREPORTCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.CONTRACTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for this instance of the contract. With REPORTCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.ITEMNUMBER).HasComment("Uniquely identifies the specific item within the activity report identified by COMPANYCODE and REPORTCODE.");
            entity.Property(e => e.TOTALCONTRACTEDQUANTITY).HasComment("The amount of the quantity from the report item that is covered by the agreed contract. This should agree with TOTALREPORTEDQUANTITY");
            entity.Property(e => e.TOTALCOSTOFITEM).HasComment("The total cost of the report item across all relevant contract items.");
            entity.Property(e => e.TOTALREPORTEDQUANTITY).HasComment("The total amount of the quantity from the report item. This should agree with TOTALCONTRACTEDQUANTITY.");
            entity.Property(e => e.UNCONTRACTEDQUANTITY).HasComment("The shortfall of report item quantity against the agreed contract. A value other than 0 here indicates that the activity report reported uncontracted work.");
        });

        modelBuilder.Entity<QV_AC_ACTIVITYREPORTITEM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_ACTIVITYREPORTITEM", "dbo");

            entity.Property(e => e.ACTIVITYHOURS)
                .HasComment("The duration of an activity. Mutually exclusive with STARTDATETIME and ENDDATETIME.")
                .HasColumnType("decimal(9, 2)");
            entity.Property(e => e.ACTIVITYREPORTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier, within the contractor company, to identify the activity report. With COMPANYCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.COMMENT)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("Any comments related to the activity report item.");
            entity.Property(e => e.COMPANYCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the company that is the contractor associated with this contract. With ACTIVITYREPORTCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the contract item type.");
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A cost code associated with the activity report item.");
            entity.Property(e => e.ENDACTIVITYREPORTVALUE).HasComment("The end of a range value associated with the report item when the contract item type is defined for range data.");
            entity.Property(e => e.ENDDATETIME)
                .HasComment("The date and time that an activity ended. Mutually exclusive with ACTIVITYHOURS.")
                .HasColumnType("datetime");
            entity.Property(e => e.ITEMNUMBER).HasComment("The unique identifier of the specific item within the activity report that is identified by COMPANYCODE and ACTIVITYREPORTCODE.");
            entity.Property(e => e.SINGLEACTIVITYREPORTVALUE).HasComment("The value associated with the report item when the contract item type is defined for point data rather than range data.");
            entity.Property(e => e.STARTACTIVITYREPORTVALUE).HasComment("The start of a range value associated with the report item when the contract item type is defined for range data.");
            entity.Property(e => e.STARTDATETIME)
                .HasComment("The date and time that an activity started or a cost was incurred. Mutually exclusive with ACTIVITYHOURS.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<QV_AC_ACTIVITYREPORTITEM5LEVELS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_ACTIVITYREPORTITEM5LEVELS", "dbo");

            entity.Property(e => e.ACTIVITYHOURS).HasColumnType("decimal(9, 2)");
            entity.Property(e => e.ACTIVITYREPORTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COMMENT)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.COMPANYCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATETIME).HasColumnType("datetime");
            entity.Property(e => e.STARTDATETIME).HasColumnType("datetime");
            entity.Property(e => e.TEXTPARAMLEVEL2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TEXTPARAMLEVEL3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TEXTPARAMLEVEL4)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_AC_ACTIVITYREPORTITEMEXTENDED_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_ACTIVITYREPORTITEMEXTENDED_RO", "dbo");

            entity.Property(e => e.ACTIVITYHOURS)
                .HasComment("The duration of an activity. Mutually exclusive with STARTDATETIME and ENDDATETIME.")
                .HasColumnType("decimal(9, 2)");
            entity.Property(e => e.ACTIVITYREPORTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier, within the contractor company, to identify the activity report. With COMPANYCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.COMPANYCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the company that is the contractor associated with this contract. With ACTIVITYREPORTCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.CONTRACTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier of the contract.");
            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the contract item type.");
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A cost code associated with the activity report item.");
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasComment("The administrative code to track a batch of samples despatched to a laboratory.");
            entity.Property(e => e.ENDDATETIME)
                .HasComment("The date and time that an activity ended. Mutually exclusive with ACTIVITYHOURS.")
                .HasColumnType("datetime");
            entity.Property(e => e.ENDVALUE).HasComment("The end of a range value associated with the report item when the contract item type is defined for range data.");
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("With PROJECTCODE, the unique identifier for a hole related to the activity report item.");
            entity.Property(e => e.ITEMNUMBER).HasComment("Uniquely identifies the specific item within the activity report identified by COMPANYCODE and REPORTCODE.");
            entity.Property(e => e.JOBCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the job to which the contract has been assigned.");
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("With HOLEID, the unique identifier for a hole related to the activity report item.");
            entity.Property(e => e.SINGLEVALUE).HasComment("The value associated with the report item when the contract item type is defined for point data rather than range data.");
            entity.Property(e => e.STARTDATETIME)
                .HasComment("The date and time that an activity started or a cost was incurred. Mutually exclusive with ACTIVITYHOURS.")
                .HasColumnType("datetime");
            entity.Property(e => e.STARTVALUE).HasComment("The start of a range value associated with the report item when the contract item type is defined for range data.");
        });

        modelBuilder.Entity<QV_AC_CONTRACT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_CONTRACT", "dbo");

            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The primary key of the COMPANY table of the Company that is the Contractor associated with this Contract.");
            entity.Property(e => e.CONTRACTCATEGORYCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The Contract Category into which the Report's Contract must fall. This ties all this Report's Items to this Category of Contract.");
            entity.Property(e => e.CONTRACTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("A unique code identifying this instance of the Contract.");
            entity.Property(e => e.CONTRACTENDDATE)
                .HasComment("The date up to which this instance of the Contract is effective.")
                .HasColumnType("datetime");
            entity.Property(e => e.CONTRACTSTARTDATE)
                .HasComment("The date from which this instance of the Contract is effective.")
                .HasColumnType("datetime");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of this Contract.");
            entity.Property(e => e.INACTIVEFROMDATE)
                .HasComment("The date up to which this instance of the Contract is active.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<QV_AC_CONTRACTCODESBYTOPLEVELCODE_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_CONTRACTCODESBYTOPLEVELCODE_RO", "dbo");

            entity.Property(e => e.CONTRACTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for an instance of a contract.");
            entity.Property(e => e.TOPLEVELCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the top level of a contract item type that effectively identifies the whole contract item type hierarchy.");
        });

        modelBuilder.Entity<QV_AC_CONTRACTDATES_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_CONTRACTDATES_RO", "dbo");

            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the company that is the contractor associated with this contract.");
            entity.Property(e => e.CONTRACTCATEGORYCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The contract category into which the report's contract must fall. This ties all this report's items to this category of contract.");
            entity.Property(e => e.CONTRACTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for this instance of the contract.");
            entity.Property(e => e.CONTRACTSTARTDATE)
                .HasComment("The date from which this instance of the contract is effective.")
                .HasColumnType("datetime");
            entity.Property(e => e.EFFECTIVEENDDATE)
                .HasComment("A calculated end date taking account of the contract end date, the inactive date and the start date of any following contract instance. If there is no contract end date or inactive date, it is the day before the start of the next contiguous Contract, by COMPANYCODE and CONTRACTPURPOSECODE.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<QV_AC_CONTRACTDETAILS_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_CONTRACTDETAILS_RO", "dbo");

            entity.Property(e => e.CANPRORATA).HasComment("Bit flag to identify contract item types that can be charged pro rata.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the company that is the contractor associated with this contract.");
            entity.Property(e => e.CONTRACTCATEGORYCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The unique identifier for the contract category into which the report's contract must fall. This ties all this report's items to this category of contract.");
            entity.Property(e => e.CONTRACTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for this instance of the contract.");
            entity.Property(e => e.CONTRACTENDDATE)
                .HasComment("The date up to which this instance of the contract is effective.")
                .HasColumnType("datetime");
            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("A unique identifier for the actual contract item type.");
            entity.Property(e => e.CONTRACTITEMTYPEDESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the contract item type.");
            entity.Property(e => e.CONTRACTITEMTYPELEVEL).HasComment("The level of the contract item type within the hierarchy.");
            entity.Property(e => e.CONTRACTRATE).HasComment("A rate associated with the contract item.");
            entity.Property(e => e.CONTRACTSTARTDATE)
                .HasComment("The date from which this instance of the contract is effective.")
                .HasColumnType("datetime");
            entity.Property(e => e.EFFECTIVEENDDATE)
                .HasComment("A calculated end date taking account of the contract end date and inactive date and the start date of any following contract instance.")
                .HasColumnType("datetime");
            entity.Property(e => e.ENDVALUE).HasComment("The end of a range used for contract item types that are defined for range data.");
            entity.Property(e => e.GROUPNAME)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifying name for the contract item type group of the contract item type.");
            entity.Property(e => e.INACTIVEFROMDATE)
                .HasComment("The date up to which this instance of the contract is active.")
                .HasColumnType("datetime");
            entity.Property(e => e.ISRANGEDATA).HasComment("Whether or not the contract item type is defined for range data.");
            entity.Property(e => e.SINGLEVALUE).HasComment("The value used for contract item types that are defined for point data rather than range data.");
            entity.Property(e => e.STARTVALUE).HasComment("The start of a range used for contract item types that are defined for range data.");
            entity.Property(e => e.TEXTVALUE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value used for contract item types that expect text data.");
            entity.Property(e => e.TOPLEVELCONTRACTITEMTYPECODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("A unique identifier for the top level of the contract item type that effectively identifies the whole contract item type hierarchy.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The units used by the contract item type.");
        });

        modelBuilder.Entity<QV_AC_CONTRACTITEM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_CONTRACTITEM", "dbo");

            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTRATEENDDATE).HasColumnType("datetime");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.GROUPNAME)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PARENTCONTRACTITEMTYPECODE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TEXTVALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_AC_CONTRACTITEMTYPEHIERARCHY_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_CONTRACTITEMTYPEHIERARCHY_RO", "dbo");

            entity.Property(e => e.CANPRORATA).HasComment("Bit flag to identify contract item types that can be charged pro rata.");
            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the actual contract item type.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("A description of this contract item type.");
            entity.Property(e => e.ENDVALUE).HasComment("The end of a range used for contract item types that are defined for range data.");
            entity.Property(e => e.GROUPNAME)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifying name for the contract item type group of the contract item type.");
            entity.Property(e => e.ISRANGEDATA).HasComment("Whether or not the contract item type is defined for range data.");
            entity.Property(e => e.LEVEL).HasComment("The level of the contract item type within hierarchy.");
            entity.Property(e => e.PARENTCONTRACTITEMTYPECODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the parent of this contract item type.");
            entity.Property(e => e.SINGLEVALUE).HasComment("The value used for contract item types that are defined for point data rather than range data.");
            entity.Property(e => e.STARTVALUE).HasComment("The start of a range used for contract item types that are defined for range data.");
            entity.Property(e => e.TEXTVALUE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value used for contract item types that expect text data.");
            entity.Property(e => e.TOPLEVELCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("A unique identifier for the top level of the contract item type that effectively identifies the whole contract item type hierarchy.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The units used by the contract item type.");
        });

        modelBuilder.Entity<QV_AC_CONTRACTITEMTYPE_LEVEL_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_CONTRACTITEMTYPE_LEVEL_RO", "dbo");

            entity.Property(e => e.CANPRORATA).HasComment("Bit flag to identify contract item types that can be charged pro rata.");
            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the actual contract item type.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the contract item type.");
            entity.Property(e => e.ENDVALUE).HasComment("The end of a range used for contract item types that are defined for range data.");
            entity.Property(e => e.GROUPNAME)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifying name for the group in which the contract item type is grouped.");
            entity.Property(e => e.ISRANGEDATA).HasComment("Whether or not the report values applied against a contract item of this type should be a range. The alternative is a just a single point.");
            entity.Property(e => e.LEVEL).HasComment("The level of the contract item type within its hierarchy.");
            entity.Property(e => e.PARENTCONTRACTITEMTYPECODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the contract item type that is the parent of this contract item type.");
            entity.Property(e => e.SINGLEVALUE).HasComment("The value used for contract item types that are defined for point data rather than range data.");
            entity.Property(e => e.STARTVALUE).HasComment("The start of a range used for contract item types that are defined for range data.");
            entity.Property(e => e.TEXTVALUE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value used for contract item types that expect text data.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The units associated with the contract item type.");
        });

        modelBuilder.Entity<QV_AC_CONTRACTRATEDATES_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_CONTRACTRATEDATES_RO", "dbo");

            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The company which was awarded the contract.");
            entity.Property(e => e.CONTRACTCATEGORYCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The contract category into which the report's contract must fall. This ties all this report's items to this category of contract.");
            entity.Property(e => e.CONTRACTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The identifier of a predefined contract, part of the primary key.");
            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The identifier for the predefined contract item type associated with the item, part of the primary key.");
            entity.Property(e => e.CONTRACTRATEENDDATE)
                .HasComment("The end date of date range for variable rates of a contract item, part of the primary key.")
                .HasColumnType("datetime");
            entity.Property(e => e.CONTRACTRATESTARTDATE)
                .HasComment("The start date of date range for variable rates of a contract item, part of the primary key.")
                .HasColumnType("datetime");
            entity.Property(e => e.CONTRACTVALUE).HasComment("The contract rate for a particular contract item at a given time interval.");
        });

        modelBuilder.Entity<QV_AC_CURRENTCONTRACTDETAILS_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_CURRENTCONTRACTDETAILS_RO", "dbo");

            entity.Property(e => e.CANPRORATA).HasComment("Bit flag to identify contract item types that can be charged pro rata.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the company that is the contractor associated with this contract.");
            entity.Property(e => e.CONTRACTCATEGORYCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The unique identifier for the contract category into which the report's contract must fall. This ties all this report's items to this category of contract.");
            entity.Property(e => e.CONTRACTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for this instance of the contract.");
            entity.Property(e => e.CONTRACTENDDATE)
                .HasComment("The date up to which this instance of the contract is effective.")
                .HasColumnType("datetime");
            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("A unique identifier for the actual contract item type.");
            entity.Property(e => e.CONTRACTITEMTYPEDESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the contract item type.");
            entity.Property(e => e.CONTRACTITEMTYPELEVEL).HasComment("The level of the contract item type within the hierarchy.");
            entity.Property(e => e.CONTRACTRATE).HasComment("A rate associated with the contract item.");
            entity.Property(e => e.CONTRACTSTARTDATE)
                .HasComment("The date from which this instance of the contract is effective.")
                .HasColumnType("datetime");
            entity.Property(e => e.EFFECTIVEENDDATE)
                .HasComment("A calculated end date taking account of the contract end date and inactive date and the start date of any following contract instance.")
                .HasColumnType("datetime");
            entity.Property(e => e.ENDVALUE).HasComment("The end of a range used for contract item types that are defined for range data.");
            entity.Property(e => e.GROUPNAME)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifying name for the contract item type group of the contract item type.");
            entity.Property(e => e.INACTIVEFROMDATE)
                .HasComment("The date up to which this instance of the contract is active.")
                .HasColumnType("datetime");
            entity.Property(e => e.ISRANGEDATA).HasComment("Whether or not the contract item type is defined for range data.");
            entity.Property(e => e.SINGLEVALUE).HasComment("The value used for contract item types that are defined for point data rather than range data.");
            entity.Property(e => e.STARTVALUE).HasComment("The start of a range used for contract item types that are defined for range data.");
            entity.Property(e => e.TEXTVALUE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value used for contract item types that expect text data.");
            entity.Property(e => e.TOPLEVELCONTRACTITEMTYPECODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("A unique identifier for the top level of the contract item type that effectively identifies the whole contract item type hierarchy.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The units used by the contract item type.");
        });

        modelBuilder.Entity<QV_AC_DESPATCHSENDBYACTIVITYREPORTITEM_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_DESPATCHSENDBYACTIVITYREPORTITEM_RO", "dbo");

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The identifier, within the contractor company, to identify the activity report.");
            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The suite of analytical tests to be conducted.");
            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A comment describing the despatch.");
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The identifier code of the contract.");
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A cost code for the item reported.");
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The name of the receiving laboratory.");
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasComment("The original despatch number of a child despatch.");
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The date the despatch is sent to the laboratory.");
        });

        modelBuilder.Entity<QV_AC_HOLELOCATIONBYACTIVITYREPORTITEM_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_HOLELOCATIONBYACTIVITYREPORTITEM_RO", "dbo");

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_AC_INVOICEACTIVITYREPORTCOSTDETAILS_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_INVOICEACTIVITYREPORTCOSTDETAILS_RO", "dbo");

            entity.Property(e => e.ACTIVITYREPORTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier, within the contractor company, to identify the activity report. With COMPANYCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.ACTIVITYREPORTDATE)
                .HasComment("The date of the activity report.")
                .HasColumnType("datetime");
            entity.Property(e => e.ACTIVITYREPORTITEMENDVALUE).HasComment("The end of a range value associated with the report item when the contract item type is defined for range data.");
            entity.Property(e => e.ACTIVITYREPORTITEMSINGLEVALUE).HasComment("The value associated with the report item when the contract item type is defined for point data rather than range data.");
            entity.Property(e => e.ACTIVITYREPORTITEMSTARTVALUE).HasComment("The start of a range value associated with the report item when the contract item type is defined for range data.");
            entity.Property(e => e.COMPANYCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier of the company that is the contractor associated with this contract. With ACTIVITYREPORTCODE, uniquely identifies the activity report to which the item belongs.");
            entity.Property(e => e.CONTRACTCODE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique identifier for this instance of the contract.");
            entity.Property(e => e.CONTRACTEDPRICE).HasComment("The agreed contracted rate for the contract item.");
            entity.Property(e => e.CONTRACTITEMTYPECODE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the actual contract item type.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the contract item type.");
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasComment("The administrative code to track a batch of samples despatched to a laboratory.");
            entity.Property(e => e.DESPATCHPRORATAPERCENT)
                .HasComment("The proportion of an items quantity applied to a single despatch. Only used for Single Value items")
                .HasColumnType("decimal(7, 4)");
            entity.Property(e => e.EQUIPMENTCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("A uniquely identifying code for an individual item of equipment.");
            entity.Property(e => e.HIERARCHYLEVELENDVALUE).HasComment("The end of the cost range of the contract item type.");
            entity.Property(e => e.HIERARCHYLEVELSTARTVALUE).HasComment("The start of the cost range of the contract item type.");
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("With PROJECTCODE, the unique identifier for a hole related to the activity report item.");
            entity.Property(e => e.HOLEPRORATAPERCENT)
                .HasComment("The proportion of an items quantity applied to a single hole. Only used for Single Value items.")
                .HasColumnType("decimal(7, 4)");
            entity.Property(e => e.INVOICEAMOUNT)
                .HasComment("The payment amount requested for an invoice.")
                .HasColumnType("decimal(19, 2)");
            entity.Property(e => e.INVOICENUMBER)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The invoice number of the invoice associated with an activity report.");
            entity.Property(e => e.INVOICEPERIODENDDATE)
                .HasComment("The end date of an invoicing period.")
                .HasColumnType("datetime");
            entity.Property(e => e.INVOICEPERIODSTARTDATE)
                .HasComment("The start date of an invoicing period.")
                .HasColumnType("datetime");
            entity.Property(e => e.ITEMACTIVITYHOURS)
                .HasComment("The duration of an activity. Mutually exclusive with ITEMSTARTDATETIME and ITEMENDDATETIME.")
                .HasColumnType("decimal(9, 2)");
            entity.Property(e => e.ITEMCOST).HasComment("The final cost of this report item from this contract item.");
            entity.Property(e => e.ITEMENDDATETIME)
                .HasComment("The date and time that an activity ended. Mutually exclusive with ITEMACTIVITYHOURS.")
                .HasColumnType("datetime");
            entity.Property(e => e.ITEMNUMBER).HasComment("Uniquely identifies the specific item within the activity report identified by COMPANYCODE and REPORTCODE.");
            entity.Property(e => e.ITEMSTARTDATETIME)
                .HasComment("The date and time that an activity started or a cost was incurred. Mutually exclusive with ITEMACTIVITYHOURS.")
                .HasColumnType("datetime");
            entity.Property(e => e.JOBCODE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("A unique code for the Job.");
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("With HOLEID, the unique identifier for a hole related to the activity report item.");
            entity.Property(e => e.QUANTITY).HasComment("The amount of the activity report value falling within the range for the contract item type. This is the quantity used to form the cost for this report item within this contract item.");
            entity.Property(e => e.SHIFT)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The uniquely identifying name of a shift.");
            entity.Property(e => e.TOPLEVELCODE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The unique identifier for the top level of the contract item type that effectively identifies the whole contract item type hierarchy.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The units associated with the contract item type.");
        });

        modelBuilder.Entity<QV_AC_INVOICEMATCHEDPREDICTEDCOST_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AC_INVOICEMATCHEDPREDICTEDCOST_RO", "dbo");

            entity.Property(e => e.COMPANYCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.INVOICEAMOUNT).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.INVOICEISSUEDATE).HasColumnType("datetime");
            entity.Property(e => e.INVOICENUMBER)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.INVOICEPAIDAMOUNT).HasColumnType("decimal(19, 2)");
            entity.Property(e => e.INVOICEPAIDDATE).HasColumnType("datetime");
            entity.Property(e => e.INVOICEPERIODENDDATE).HasColumnType("datetime");
            entity.Property(e => e.INVOICEPERIODSTARTDATE).HasColumnType("datetime");
            entity.Property(e => e.INVOICERECEIVEDATE).HasColumnType("datetime");
        });

        modelBuilder.Entity<QV_ASSAYTYPE_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_ASSAYTYPE_TEXT", "dbo");

            entity.Property(e => e.ANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_AUDIT_ACQ_DB_OBJ_INVALID_MISS_OR_DISABLED>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AUDIT_ACQ_DB_OBJ_INVALID_MISS_OR_DISABLED", "dbo");

            entity.Property(e => e.OBJECT_NAME)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.OBJECT_TYPE)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_AUDIT_ACQ_DB_OBJ_VALID_AND_ENABLED>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AUDIT_ACQ_DB_OBJ_VALID_AND_ENABLED", "dbo");

            entity.Property(e => e.OBJECT_NAME).HasMaxLength(128);
            entity.Property(e => e.OBJECT_TYPE)
                .HasMaxLength(16)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_AUDIT_DB_OBJ_FOREIGN_TO_ACQ>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_AUDIT_DB_OBJ_FOREIGN_TO_ACQ", "dbo");

            entity.Property(e => e.OBJECT_NAME).HasMaxLength(128);
            entity.Property(e => e.OBJECT_TYPE)
                .HasMaxLength(16)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_BESTASSAYTYPE>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_BESTASSAYTYPE", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(66)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(26)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_BESTASSAYTYPE_NAME>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_BESTASSAYTYPE_NAME", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(104)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(31)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_BESTASSAYTYPE_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_BESTASSAYTYPE_TEXT", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(69)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(26)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_BESTASSAYTYPE_TEXT_NAME>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_BESTASSAYTYPE_TEXT_NAME", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(104)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(31)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_BESTASSAY_NAME>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_BESTASSAY_NAME", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_BESTASSAY_TEXT_NAME>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_BESTASSAY_TEXT_NAME", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_BESTCHECKASSAY_NAME>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_BESTCHECKASSAY_NAME", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_BESTCHECKASSAY_TEXT_NAME>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_BESTCHECKASSAY_TEXT_NAME", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_ASS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_ASS", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_ASS_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_ASS_N", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_AT_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_AT_N", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(104)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(31)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_CHASS_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_CHASS_N", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_DG_ASS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_DG_ASS", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_DG_ASS_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_DG_ASS_N", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_DG_AT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_DG_AT", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(49)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_DG_AT_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_DG_AT_N", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(135)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(54)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_DG_CHASS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_DG_CHASS", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_DG_CHASS_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_DG_CHASS_N", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_ELDD_ASS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_ELDD_ASS", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_ELDD_ASS_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_ELDD_ASS_N", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_ELDD_AT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_ELDD_AT", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(118)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(41)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_ELDD_AT_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_ELDD_AT_N", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(153)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(46)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_ELDD_CHASS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_ELDD_CHASS", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_ELDD_CHASS_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_ELDD_CHASS_N", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_EL_ASS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_EL_ASS", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_EL_ASS_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_EL_ASS_N", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_EL_AT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_EL_AT", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(87)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(28)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_EL_AT_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_EL_AT_N", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(122)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(33)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_EL_AT_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_EL_AT_TEXT", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(94)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(28)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_EL_AT_TEXT_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_EL_AT_TEXT_N", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(99)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(33)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_EL_CHASS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_EL_CHASS", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_EL_CHASS_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_EL_CHASS_N", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_GN_ASS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_GN_ASS", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_GN_ASS_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_GN_ASS_N", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_GN_AT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_GN_AT", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(101)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(49)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_GN_AT_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_GN_AT_N", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(136)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(54)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_GN_AT_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_GN_AT_TEXT", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(108)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(49)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_GN_CHASS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_GN_CHASS", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_B_GN_CHASS_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_B_GN_CHASS_N", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_COMPOSITE>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_COMPOSITE", "dbo");

            entity.Property(e => e.COMPOSITEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COMPOSITEMETHOD)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.COMPOSITETYPE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PDUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PSAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_COMPOSITESAMPLETREE_BC>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_COMPOSITESAMPLETREE_BC", "dbo");

            entity.Property(e => e.COMPOSITEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PDUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PSAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_COMPOSITESAMPLE_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_COMPOSITESAMPLE_RO", "dbo");

            entity.Property(e => e.COMPOSITEMETHOD)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.COMPOSITETYPE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_COMPOSITE_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_COMPOSITE_RO", "dbo");

            entity.Property(e => e.COMPOSITEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COMPOSITEMETHOD)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.COMPOSITETYPE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_FRACTIONASSAYTYPE_CMB_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_FRACTIONASSAYTYPE_CMB_RO", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_FRACTIONASSAYTYPE_LJN_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_FRACTIONASSAYTYPE_LJN_RO", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.NAMELJN)
                .IsRequired()
                .HasMaxLength(59)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_FRACTIONASSAYTYPE_ODR_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_FRACTIONASSAYTYPE_ODR_RO", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.NAMEODR)
                .IsRequired()
                .HasMaxLength(56)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_FRACTIONASSAYTYPE_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_FRACTIONASSAYTYPE_RO", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_FRACTIONASSAYTYPE_T_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_FRACTIONASSAYTYPE_T_RO", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.NAMET)
                .IsRequired()
                .HasMaxLength(54)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_FRACTIONASSAY_CMB_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_FRACTIONASSAY_CMB_RO", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_FRACTIONASSAY_LJN_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_FRACTIONASSAY_LJN_RO", "dbo");

            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAMELJN)
                .IsRequired()
                .HasMaxLength(59)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_FRACTIONASSAY_N_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_FRACTIONASSAY_N_RO", "dbo");

            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_FRACTIONASSAY_ODR_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_FRACTIONASSAY_ODR_RO", "dbo");

            entity.Property(e => e.NAMEODR)
                .IsRequired()
                .HasMaxLength(56)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_FRACTIONASSAY_T_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_FRACTIONASSAY_T_RO", "dbo");

            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAMET)
                .IsRequired()
                .HasMaxLength(54)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_FRACTIONCATEGORY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_FRACTIONCATEGORY", "dbo");

            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DOMAINCODE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONCATEGORY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PFRACTIONCATEGORY)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_FRACTIONUNIT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_FRACTIONUNIT", "dbo");

            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONLIMIT).HasColumnType("decimal(10, 5)");
            entity.Property(e => e.UNITS)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_FRACTION_REF>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_FRACTION_REF", "dbo");

            entity.Property(e => e.FRACTIONDESCRIPTION)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONMETHOD)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONNAME)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LOWERDESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.LOWERLIMIT).HasColumnType("decimal(10, 5)");
            entity.Property(e => e.LOWERUNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UPPERDESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UPPERLIMIT).HasColumnType("decimal(10, 5)");
            entity.Property(e => e.UPPERUNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_MULTIHOLECOMPOSITE>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_MULTIHOLECOMPOSITE", "dbo");

            entity.Property(e => e.COMPOSITEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CF_SAMPLEFRACTION_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CF_SAMPLEFRACTION_RO", "dbo");

            entity.Property(e => e.COMPOSITEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGSAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CHECKSAMPLE_LEVEL_Q>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CHECKSAMPLE_LEVEL_Q", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PCHECKID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CHECKSAMPLE_ROOT_PARENT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CHECKSAMPLE_ROOT_PARENT", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CHECKSAMPLE_ROOT_PARENT_KEYS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CHECKSAMPLE_ROOT_PARENT_KEYS", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID_ROOT_PARENT)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_ROOT_PARENT)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTASSAY", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTASSAY_NM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTASSAY_NM", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTASSAY_NM_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTASSAY_NM_PR", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTASSAY_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTASSAY_PR", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTASSAY_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTASSAY_TEXT", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTASSAY_TEXT_NM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTASSAY_TEXT_NM", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTASSAY_TEXT_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTASSAY_TEXT_PR", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTCHECKASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTCHECKASSAY", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(26)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTCHECKASSAY_NM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTCHECKASSAY_NM", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTCHECKASSAY_NM_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTCHECKASSAY_NM_PR", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTCHECKASSAY_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTCHECKASSAY_PR", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(26)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTCHECKASSAY_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTCHECKASSAY_TEXT", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTCHECKASSAY_TEXT_NM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTCHECKASSAY_TEXT_NM", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTCHECKASSAY_TEXT_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTCHECKASSAY_TEXT_PR", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTDGASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTDGASSAY", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(49)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTDGASSAY_NM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTDGASSAY_NM", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(54)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTDGASSAY_NM_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTDGASSAY_NM_PR", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(54)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTDGASSAY_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTDGASSAY_PR", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(49)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTDGCHECKASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTDGCHECKASSAY", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(49)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTDGCHECKASSAY_NM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTDGCHECKASSAY_NM", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(54)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTDGCHECKASSAY_NM_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTDGCHECKASSAY_NM_PR", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(54)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTDGCHECKASSAY_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTDGCHECKASSAY_PR", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(49)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTELASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTELASSAY", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(28)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTELASSAY_NM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTELASSAY_NM", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(33)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTELASSAY_NM_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTELASSAY_NM_PR", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(33)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTELASSAY_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTELASSAY_PR", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(28)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTELCHECKASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTELCHECKASSAY", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(28)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTELCHECKASSAY_NM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTELCHECKASSAY_NM", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(33)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTELCHECKASSAY_NM_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTELCHECKASSAY_NM_PR", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(33)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTELCHECKASSAY_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTELCHECKASSAY_PR", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(28)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTELDDASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTELDDASSAY", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(41)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTELDDASSAY_NM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTELDDASSAY_NM", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(46)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTELDDCHECKASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTELDDCHECKASSAY", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(41)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTELDDCHECKASSAY_NM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTELDDCHECKASSAY_NM", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(46)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTGNASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTGNASSAY", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(49)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTGNASSAY_NM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTGNASSAY_NM", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(54)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTGNASSAY_NM_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTGNASSAY_NM_PR", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(54)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTGNASSAY_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTGNASSAY_PR", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(49)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTGNCHECKASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTGNCHECKASSAY", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(49)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTGNCHECKASSAY_NM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTGNCHECKASSAY_NM", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(54)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTGNCHECKASSAY_NM_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTGNCHECKASSAY_NM_PR", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(54)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPBESTGNCHECKASSAY_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPBESTGNCHECKASSAY_PR", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(49)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPCHECKASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPCHECKASSAY", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPCHECKASSAY_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPCHECKASSAY_PR", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPCHECKASSAY_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPCHECKASSAY_TEXT", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPCHECKASSAY_TEXT_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPCHECKASSAY_TEXT_PR", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPSAMPLEASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPSAMPLEASSAY", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPSAMPLEASSAY_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPSAMPLEASSAY_PR", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPSAMPLEASSAY_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPSAMPLEASSAY_TEXT", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORPSAMPLEASSAY_TEXT_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORPSAMPLEASSAY_TEXT_PR", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_AT_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_AT_PR", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false);
            entity.Property(e => e.NAMEP)
                .IsRequired()
                .HasMaxLength(29)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_CA_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_CA_PR", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAMEP)
                .IsRequired()
                .HasMaxLength(29)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_LABORATORYANALYSES_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_LABORATORYANALYSES_RO", "dbo");

            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The stage within the sampling process and the laboratory''s analytical process that gave this result.");
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasComment("The despatch code with the instructions for the laboratory.");
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("For check samples, an incremental number unqiely identifying each duplicate of a check or PRIMARY for non check samples.");
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique job number assigned by the laboratory.");
            entity.Property(e => e.PCHECKID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("For check samples, the CHECKID of the parent check sample.");
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("For check samples, the DUPLICATENO of the parent check sample.");
            entity.Property(e => e.PRIORITY).HasComment("A value of 1 is the latest - older values are incremented with higher values.");
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The unique identifier of the sample or check sample.");
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("If the sample is a standard, the unique identifier of the standard.");
        });

        modelBuilder.Entity<QV_CORP_LABORATORYANALYSES_RW>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_LABORATORYANALYSES_RW", "dbo");

            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The stage within the sampling process and the laboratory''s analytical process that gave this result.");
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasComment("The despatch code with the instructions for the laboratory.");
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("For check samples, an incremental number unqiely identifying each duplicate of a check or PRIMARY for non check samples.");
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique job number assigned by the laboratory.");
            entity.Property(e => e.PCHECKID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("For check samples, the CHECKID of the parent check sample.");
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("For check samples, the DUPLICATENO of the parent check sample.");
            entity.Property(e => e.PRIORITY).HasComment("A value of 1 is the latest - older values are incremented with higher values.");
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The unique identifier of the sample or check sample.");
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("If the sample is a standard, the unique identifier of the standard.");
        });

        modelBuilder.Entity<QV_CORP_SAMPLECHECKASSAYCOMBINEDDETAILS_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SAMPLECHECKASSAYCOMBINEDDETAILS_RO", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("For check samples, an incremental number unqiely identifying each duplicate of a check or PRIMARY for non check samples.");
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Unique identifier created by the laboratory to identify the batch.");
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual details field.");
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The unique identifier of the sample or check sample.");
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value stored in the virtual details field.");
        });

        modelBuilder.Entity<QV_CORP_SAMPLECHECKASSAYCOMBINEDDETAILS_RW>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SAMPLECHECKASSAYCOMBINEDDETAILS_RW", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("For check samples, an incremental number unqiely identifying each duplicate of a check or PRIMARY for non check samples.");
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Unique identifier created by the laboratory to identify the batch.");
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual details field.");
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The unique identifier of the sample or check sample.");
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The value stored in the virtual details field.");
        });

        modelBuilder.Entity<QV_CORP_SAMPLE_CHECK_ASSAY_CMB>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SAMPLE_CHECK_ASSAY_CMB", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_SAMPLE_CHECK_LJN>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SAMPLE_CHECK_LJN", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAMELJN)
                .IsRequired()
                .HasMaxLength(29)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_SAMPLE_CHECK_ODR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SAMPLE_CHECK_ODR", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAMEODR)
                .IsRequired()
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_SAMPLE_CHECK_PEND_LJN>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SAMPLE_CHECK_PEND_LJN", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAMELJN)
                .IsRequired()
                .HasMaxLength(29)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_SAMPLE_CHECK_PEND_ODR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SAMPLE_CHECK_PEND_ODR", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAMEODR)
                .IsRequired()
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_SAMPLE_CHECK_P_ASSAY_C>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SAMPLE_CHECK_P_ASSAY_C", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_SA_PR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SA_PR", "dbo");

            entity.Property(e => e.NAMEP)
                .IsRequired()
                .HasMaxLength(29)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_SMPCHK_ASSAY_DESPATCH_PIVOT_REJ_PEN_AC>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SMPCHK_ASSAY_DESPATCH_PIVOT_REJ_PEN_AC", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_SMPCHK_ASSAY_DESPATCH_REJ_PEN_AC>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SMPCHK_ASSAY_DESPATCH_REJ_PEN_AC", "dbo");

            entity.Property(e => e.ANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_SMPCHK_ASSAY_DESPATCH_REJ_PEN_AC_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SMPCHK_ASSAY_DESPATCH_REJ_PEN_AC_TEXT", "dbo");

            entity.Property(e => e.ANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_SMPCHK_BESTASSAY_DESPATCH_PIVOT_REJ_PEN_AC>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SMPCHK_BESTASSAY_DESPATCH_PIVOT_REJ_PEN_AC", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_SMPCHK_BESTASSAY_DESPATCH_REJ_PEN_AC>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SMPCHK_BESTASSAY_DESPATCH_REJ_PEN_AC", "dbo");

            entity.Property(e => e.ANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_CORP_SMPCHK_BESTASSAY_DESPATCH_REJ_PEN_AC_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_CORP_SMPCHK_BESTASSAY_DESPATCH_REJ_PEN_AC_TEXT", "dbo");

            entity.Property(e => e.ANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_DERIVED_FIELD_DEPENDS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_DERIVED_FIELD_DEPENDS", "dbo");

            entity.Property(e => e.DFIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TABLENAME)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_DESPATCHSEND_ORIGDESP>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_DESPATCHSEND_ORIGDESP", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_DE_GEOBIGCOMMENT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_DE_GEOBIGCOMMENT", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PRIMARYCODE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_DE_GEOCOMMENT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_DE_GEOCOMMENT", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PRIMARYCODE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_DE_GEODETAILS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_DE_GEODETAILS", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PRIMARYCODE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_DE_GEOINTERVAL>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_DE_GEOINTERVAL", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PRIMARYCODE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GDDATUM_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GDDATUM_RO", "dbo");

            entity.Property(e => e.DATUM)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DEFINITIONSTRING)
                .IsRequired()
                .HasMaxLength(205)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ECCENTRICITY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MAJORAXIS)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PRIMEMERIDIAN)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GDLOCALDATUMTRANSFORM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GDLOCALDATUMTRANSFORM", "dbo");

            entity.Property(e => e.DATUM)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DATUMDEFINITIONSTRING)
                .HasMaxLength(205)
                .IsUnicode(false);
            entity.Property(e => e.DEFINITIONSTRING)
                .IsRequired()
                .HasMaxLength(459)
                .IsUnicode(false);
            entity.Property(e => e.DX)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DZ)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LOCALDATUMAREA)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.LOCALDATUMCODE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LOCALDATUMTRANSFORM)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RX)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RZ)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SCALE)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOBIGCOMMENT_V1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOBIGCOMMENT_V1", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOCOMMENT_V1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOCOMMENT_V1", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEODETAILS_V1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEODETAILS_V1", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSDETAILS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSDETAILS", "dbo");

            entity.Property(e => e.DEPTH).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSDETAILS_EMA>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSDETAILS_EMA", "dbo");

            entity.Property(e => e.DEPTH).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSDETAILS_EMU>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSDETAILS_EMU", "dbo");

            entity.Property(e => e.DEPTH).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSDETAILS_EMV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSDETAILS_EMV", "dbo");

            entity.Property(e => e.DEPTH).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSDETAILS_INTV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSDETAILS_INTV", "dbo");

            entity.Property(e => e.DEPTHFROM).HasColumnType("decimal(12, 6)");
            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.DEPTHTO).HasColumnType("decimal(12, 6)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSDETAILS_INTV_EMA>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSDETAILS_INTV_EMA", "dbo");

            entity.Property(e => e.DEPTHFROM).HasColumnType("decimal(12, 6)");
            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.DEPTHTO).HasColumnType("decimal(12, 6)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSDETAILS_INTV_EMU>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSDETAILS_INTV_EMU", "dbo");

            entity.Property(e => e.DEPTHFROM).HasColumnType("decimal(12, 6)");
            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSDETAILS_INTV_EMV>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSDETAILS_INTV_EMV", "dbo");

            entity.Property(e => e.DEPTHFROM).HasColumnType("decimal(12, 6)");
            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.DEPTHTO).HasColumnType("decimal(12, 6)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSHEADER>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSHEADER", "dbo");

            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSHEADERBIGCOMMENT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSHEADERBIGCOMMENT", "dbo");

            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSHEADERBIGCOMMENT_EM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSHEADERBIGCOMMENT_EM", "dbo");

            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSHEADERCOMMENT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSHEADERCOMMENT", "dbo");

            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSHEADERCOMMENT_EM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSHEADERCOMMENT_EM", "dbo");

            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSHEADERDETAILS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSHEADERDETAILS", "dbo");

            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSHEADERDETAILS_EM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSHEADERDETAILS_EM", "dbo");

            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYSHEADER_EM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYSHEADER_EM", "dbo");

            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOOP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GEOPHYS_BEST_BASE>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GEOPHYS_BEST_BASE", "dbo");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GRID>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GRID", "dbo");

            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.COORDSYSTEM)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.GRIDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOCALDATUMTRANSFORM)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PARENTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTION)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTIONDEFINITIONSTRING)
                .HasMaxLength(426)
                .IsUnicode(false);
            entity.Property(e => e.TRANSFORMATIONTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TRANSFORMDEFINITIONSTRING)
                .HasMaxLength(459)
                .IsUnicode(false);
            entity.Property(e => e.VERTICALUNITS)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_GRID_GENERATION>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_GRID_GENERATION", "dbo");

            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.COORDSYSTEM)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.GRIDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOCALDATUMTRANSFORM)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PARENTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTION)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TRANSFORMATIONTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_HOLEBIGCOMMENT_SAMPLEID>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_HOLEBIGCOMMENT_SAMPLEID", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_HOLECOMMENT_SAMPLEID>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_HOLECOMMENT_SAMPLEID", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_HOLECOORD_SAMPLEID>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_HOLECOORD_SAMPLEID", "dbo");

            entity.Property(e => e.COORDINATESET)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_HOLEDETAILS_SAMPLEID>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_HOLEDETAILS_SAMPLEID", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_HOLELOCATION_SAMPLE>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_HOLELOCATION_SAMPLE", "dbo");

            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_IMPORTALIASES>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_IMPORTALIASES", "dbo");

            entity.Property(e => e.ALIASVALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CATEGORY)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.SOURCEVALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.SUBCATEGORY)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_METAFIELD_INFORMATION>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_METAFIELD_INFORMATION", "dbo");

            entity.Property(e => e.COLUMN_NAME).HasMaxLength(128);
            entity.Property(e => e.DATA_TYPE).HasMaxLength(128);
            entity.Property(e => e.FIELDSTDTYPE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RELATEDTABLEFIELDNAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.RELATEDTABLENAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.TABLE_NAME)
                .IsRequired()
                .HasMaxLength(128);
        });

        modelBuilder.Entity<QV_METASQLEXP_INFORMATION>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_METASQLEXP_INFORMATION", "dbo");

            entity.Property(e => e.DERIVED_FIELD_NAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SQL_EXPRESSION)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_METASQL_INFORMATION>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_METASQL_INFORMATION", "dbo");

            entity.Property(e => e.SQL_TEXT)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.TEMPLATEID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_METATABLE_INFORMATION>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_METATABLE_INFORMATION", "dbo");

            entity.Property(e => e.ABBREVIATIONS)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.REFTABLENAME)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.REFTABLENAMEFIELD)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.TABLE_NAME)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.TABLE_TYPE)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_METAVIEWTYPE_INFORMATION>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_METAVIEWTYPE_INFORMATION", "dbo");

            entity.Property(e => e.BASETABLE)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CATEGORY)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.COMPOUND_DEFINITION_NAME)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MAINJOINTABLE)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.TEMPLATEID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WORKSPACE_FILTER)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_METAVIEWTYPE_VIRTUALNAMETABLE_INFORMATION>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_METAVIEWTYPE_VIRTUALNAMETABLE_INFORMATION", "dbo");

            entity.Property(e => e.COMPOUND_DEFINITION_NAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.VIRTUAL_REFERENCE_TABLE)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.VIRTUAL_REFERENCE_TABLE_FIELD)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.VIRTUAL_TABLE)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.VIRTUAL_TABLE_FIELD).HasMaxLength(128);
        });

        modelBuilder.Entity<QV_METAVIEWTYPE_VIRTUALVALUETABLE_INFORMATION>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_METAVIEWTYPE_VIRTUALVALUETABLE_INFORMATION", "dbo");

            entity.Property(e => e.COMPOUND_DEFINITION_NAME)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.VIRTUAL_VALUE_FIELD).HasMaxLength(128);
            entity.Property(e => e.VIRTUAL_VALUE_TABLE)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_POINTGEOCOMMENT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_POINTGEOCOMMENT", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_POINTGEODETAILS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_POINTGEODETAILS", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ALL_BASE_BLANK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ALL_BASE_BLANK", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ALL_BASE_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ALL_BASE_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ALL_BASE_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ALL_BASE_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ALL_BASE_ST_BLANK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ALL_BASE_ST_BLANK", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ALL_BASE_ST_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ALL_BASE_ST_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ALL_BASE_ST_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ALL_BASE_ST_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAYTYPE_BEST_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAYTYPE_BEST_STD", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(66)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAYTYPE_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAYTYPE_CK", "dbo");

            entity.Property(e => e.ANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(319)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAYTYPE_GN_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAYTYPE_GN_STD", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(103)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(54)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAYTYPE_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAYTYPE_OR", "dbo");

            entity.Property(e => e.ANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(320)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAYTYPE_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAYTYPE_STD", "dbo");

            entity.Property(e => e.ANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(322)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAY_BEST_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAY_BEST_STD", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAY_BEST_STD_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAY_BEST_STD_T", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAY_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAY_CK", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAY_CK_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAY_CK_T", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAY_GN_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAY_GN_STD", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAY_GN_STD_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAY_GN_STD_T", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAY_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAY_OR", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAY_OR_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAY_OR_T", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAY_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAY_STD", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ASSAY_STD_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ASSAY_STD_T", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_AS_BS_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_AS_BS_CK", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_AS_BS_CK_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_AS_BS_CK_T", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_AS_BS_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_AS_BS_OR", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_AS_BS_OR_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_AS_BS_OR_T", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_AS_GN_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_AS_GN_CK", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_AS_GN_CK_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_AS_GN_CK_T", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_AS_GN_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_AS_GN_OR", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_AS_GN_OR_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_AS_GN_OR_T", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ATYPE_BEST_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ATYPE_BEST_CK", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ATYPE_BEST_CK_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ATYPE_BEST_CK_T", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ATYPE_BEST_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ATYPE_BEST_OR", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(65)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ATYPE_BEST_OR_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ATYPE_BEST_OR_T", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(65)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ATYPE_GN_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ATYPE_GN_CK", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(101)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(55)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ATYPE_GN_CK_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ATYPE_GN_CK_T", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(101)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(55)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ATYPE_GN_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ATYPE_GN_OR", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(102)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(55)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_ATYPE_GN_OR_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_ATYPE_GN_OR_T", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(102)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(55)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CHECKDETAILS_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CHECKDETAILS_CK", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CHECKDETAILS_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CHECKDETAILS_OR", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CHECKDETAILS_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CHECKDETAILS_STD", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_2_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_2_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_2_OR_CK_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_2_OR_CK_TEXT", "dbo");

            entity.Property(e => e.ANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE_CK)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE_OR)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_2_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_2_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_2_STD_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_2_STD_TEXT", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_BEST_2_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_BEST_2_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_BEST_2_OR_CK_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_BEST_2_OR_CK_TEXT", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE_CK)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE_OR)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_BEST_2_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_BEST_2_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_BEST_2_STD_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_BEST_2_STD_TEXT", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYVALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_BLANK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_BLANK", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_GN_2_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_GN_2_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(49)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_GN_2_OR_CK_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_GN_2_OR_CK_TEXT", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE_CK)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE_OR)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(49)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_GN_2_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_GN_2_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(49)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_GN_2_STD_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_GN_2_STD_TEXT", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYVALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(49)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_PIVOT_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_PIVOT_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_PIVOT_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_PIVOT_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_ALL_BASE_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_ALL_BASE_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_2_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_2_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_2_OR_CK_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_2_OR_CK_TEXT", "dbo");

            entity.Property(e => e.ANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE_CK)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE_OR)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_2_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_2_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_2_STD_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_2_STD_TEXT", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_APVR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_APVR", "dbo");

            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_APVRG>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_APVRG", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(42)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_AVP>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_AVP", "dbo");

            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_AVPG>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_AVPG", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(42)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_BEST_2_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_BEST_2_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_BEST_2_OR_CK_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_BEST_2_OR_CK_TEXT", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE_CK)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE_OR)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_BEST_2_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_BEST_2_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_BEST_2_STD_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_BEST_2_STD_TEXT", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYVALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_BLANK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_BLANK", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_GMVGM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_GMVGM", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME_CK)
                .HasMaxLength(42)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME_OR)
                .HasMaxLength(42)
                .IsUnicode(false);
            entity.Property(e => e.GROUPNAME)
                .HasMaxLength(86)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_GMVGM_PUNITS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_GMVGM_PUNITS", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME_CK)
                .HasMaxLength(42)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME_OR)
                .HasMaxLength(42)
                .IsUnicode(false);
            entity.Property(e => e.GROUPNAME)
                .HasMaxLength(86)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_GN_2_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_GN_2_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(49)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_GN_2_OR_CK_PUNITS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_GN_2_OR_CK_PUNITS", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(49)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITSPREF)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UNITS_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UNITS_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_GN_2_OR_CK_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_GN_2_OR_CK_TEXT", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE_CK)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYVALUE_OR)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(49)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_GN_2_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_GN_2_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(49)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_GN_2_STD_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_GN_2_STD_TEXT", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYVALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(49)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_G_O_C>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_G_O_C", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(42)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_G_O_C_PUNITS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_G_O_C_PUNITS", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(42)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_G_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_G_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_MVM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_MVM", "dbo");

            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GROUPNAME)
                .IsRequired()
                .HasMaxLength(42)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_PIVOT_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_PIVOT_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_PIVOT_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_PIVOT_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DESPATCH_BASE_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DESPATCH_BASE_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DRILLHOLE_BASE_BL>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DRILLHOLE_BASE_BL", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DRILLHOLE_BASE_OR_C>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DRILLHOLE_BASE_OR_C", "dbo");

            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_DRILLHOLE_BASE_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_DRILLHOLE_BASE_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_POINTSAMPLE_BASE_BL>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_POINTSAMPLE_BASE_BL", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_POINTSAMPLE_BASE_ST>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_POINTSAMPLE_BASE_ST", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_CORP_POINTSAMPLE_BAS_O_C>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_CORP_POINTSAMPLE_BAS_O_C", "dbo");

            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYLOADDATE_CK).HasColumnType("datetime");
            entity.Property(e => e.ASSAYLOADDATE_OR).HasColumnType("datetime");
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHBIGCOMMENTCODE_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHBIGCOMMENTCODE_CK", "dbo");

            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHBIGCOMMENTCODE_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHBIGCOMMENTCODE_OR", "dbo");

            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHBIGCOMMENT_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHBIGCOMMENT_CK", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHBIGCOMMENT_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHBIGCOMMENT_OR", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHBIGCOMMENT_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHBIGCOMMENT_STD", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHCODE_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHCODE_CK", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHCODE_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHCODE_OR", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHDETAILS_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHDETAILS_CK", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHDETAILS_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHDETAILS_OR", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHDETAILS_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHDETAILS_STD", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETBIGCOMCODE_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETBIGCOMCODE_CK", "dbo");

            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETBIGCOMCODE_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETBIGCOMCODE_OR", "dbo");

            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETBIGCOMMENT_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETBIGCOMMENT_CK", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETBIGCOMMENT_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETBIGCOMMENT_OR", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETBIGCOMMENT_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETBIGCOMMENT_STD", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETCODE_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETCODE_CK", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETCODE_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETCODE_OR", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETCOMCODE_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETCOMCODE_CK", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETCOMCODE_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETCOMCODE_OR", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETCOMMENT_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETCOMMENT_CK", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETCOMMENT_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETCOMMENT_OR", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETCOMMENT_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETCOMMENT_STD", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETDETAILS_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETDETAILS_CK", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETDETAILS_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETDETAILS_OR", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCHRETDETAILS_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCHRETDETAILS_STD", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCH_BASE_BLANK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCH_BASE_BLANK", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCH_BASE_G_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCH_BASE_G_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(42)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCH_BASE_G_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCH_BASE_G_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCH_BASE_G_ST_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCH_BASE_G_ST_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISMETHOD_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISMETHOD_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME_OR)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYTYPECOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTDEGREE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIGESTTYPE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ELEMENT)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(42)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCH_BASE_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCH_BASE_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCH_BASE_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCH_BASE_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCH_BASE_ST_BLANK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCH_BASE_ST_BLANK", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCH_BASE_ST_G_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCH_BASE_ST_G_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GENERICNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCH_BASE_ST_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCH_BASE_ST_OR_CK", "dbo");

            entity.Property(e => e.ANALYSISSUITE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ANALYSISSUITE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_CK)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_CK)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO_OR)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_CK)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS_OR)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE_OR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_CK)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO_OR)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_CK)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE_OR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DESPATCH_BASE_ST_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DESPATCH_BASE_ST_STD", "dbo");

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CONTRACTCODE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COSTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHRETCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHSENDCOMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINALDESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DRILLHOLE_BASE_BLANK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DRILLHOLE_BASE_BLANK", "dbo");

            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DRILLHOLE_BASE_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DRILLHOLE_BASE_OR_CK", "dbo");

            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_DRILLHOLE_BASE_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_DRILLHOLE_BASE_STD", "dbo");

            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_HOLEBIGCOMMENT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_HOLEBIGCOMMENT", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_HOLEBIGCOMMENT_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_HOLEBIGCOMMENT_STD", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_HOLECOMMENT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_HOLECOMMENT", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_HOLECOMMENT_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_HOLECOMMENT_STD", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_HOLECOORD_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_HOLECOORD_OR", "dbo");

            entity.Property(e => e.COORDINATESET)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_HOLECOORD_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_HOLECOORD_STD", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COORDINATESET)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_HOLEDETAILS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_HOLEDETAILS", "dbo");

            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_HOLEDETAILS_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_HOLEDETAILS_STD", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_POINTSAMPLE_BASE_BLANK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_POINTSAMPLE_BASE_BLANK", "dbo");

            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_POINTSAMPLE_BASE_OR_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_POINTSAMPLE_BASE_OR_CK", "dbo");

            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_CK)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CHECKSTAGE_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_OR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_OR)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_POINTSAMPLE_BASE_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_POINTSAMPLE_BASE_STD", "dbo");

            entity.Property(e => e.ASSAYNAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_SAMPLECODE>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_SAMPLECODE", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_SAMPLECODE_CK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_SAMPLECODE_CK", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_SAMPLECODE_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_SAMPLECODE_OR", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(23)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_SAMPLECOORD_OR>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_SAMPLECOORD_OR", "dbo");

            entity.Property(e => e.COORDINATESET)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ID_CK)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QC_SAMPLECOORD_STD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QC_SAMPLECOORD_STD", "dbo");

            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COORDINATESET)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QLOH_ALLTRANSACTION>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QLOH_ALLTRANSACTION", "dbo");

            entity.Property(e => e.ACCESS_QLR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ACTIONDATE_QLR).HasColumnType("datetime");
            entity.Property(e => e.ACTION_QLR)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MODSTATUS_QLOH)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OLDHOLEID_QLOH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OLDPROJECTCODE_QLOH)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OSUSERID_QLR)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PROGRAM_QLR)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.STATUS_QLOH)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TABLENAME_QLR)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TERMINAL_QLR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.USERID_QLR)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QLOH_HOLETRANSACTION>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QLOH_HOLETRANSACTION", "dbo");

            entity.Property(e => e.ACCESS_QLR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ACTIONDATE_QLR).HasColumnType("datetime");
            entity.Property(e => e.ACTION_QLR)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OSUSERID_QLR)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PROGRAM_QLR)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TABLENAME_QLR)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TERMINAL_QLR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.USERID_QLR)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QLOH_STATUS_UPDATE>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QLOH_STATUS_UPDATE", "dbo");

            entity.Property(e => e.ACCESS_QLR)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ACTIONDATE_QLR).HasColumnType("datetime");
            entity.Property(e => e.ACTION_QLR)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OSUSERID_QLR)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PROGRAM_QLR)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.STATUS_QLOH)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TABLENAME_QLR)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TERMINAL_QLR)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.USERID_QLR)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_QOM_GEOPHYSDETAILS_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_QOM_GEOPHYSDETAILS_RO", "dbo");

            entity.Property(e => e.DEPTH)
                .HasComment("The depth from where the measurement was taken.")
                .HasColumnType("decimal(9, 4)");
            entity.Property(e => e.GEOPHYSGID).HasComment("The auto incrementing primary key.");
            entity.Property(e => e.PROPERTYID).HasComment("A foreign key to the geophysical property being recorded.");
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK", "dbo");

            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_ASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_ASSAY", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_ASSAY_TEXT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_ASSAY_TEXT", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_BIGCOMMENT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_BIGCOMMENT", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_COMMENT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_COMMENT", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_DESPATCH>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_DESPATCH", "dbo");

            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_DESPATCHDETAILS_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_DESPATCHDETAILS_RO", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_DESPATCHRETCOMMENT_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_DESPATCHRETCOMMENT_RO", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_DESPATCHRETDETAILS_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_DESPATCHRETDETAILS_RO", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_DESPATCH_COM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_DESPATCH_COM", "dbo");

            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_DESPATCH_DET>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_DESPATCH_DET", "dbo");

            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_DETAILS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_DETAILS", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_POINTGEOBIGCOM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_POINTGEOBIGCOM", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_POINTGEOCOM>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_POINTGEOCOM", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_POINTGEOLOGY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_POINTGEOLOGY", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_RO", "dbo");

            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_RO_2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_RO_2", "dbo");

            entity.Property(e => e.CHECKSTAGE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FRACTIONID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PDUPLICATENO)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PSAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID_PRIMARY)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_CHECK_SAMPLECOORD>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_CHECK_SAMPLECOORD", "dbo");

            entity.Property(e => e.COORDINATESET)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SAMPLE_HOLELOCATION>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SAMPLE_HOLELOCATION", "dbo");

            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SMPCHK_BESTASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SMPCHK_BESTASSAY", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SMPCHK_BESTASSAY_NAME>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SMPCHK_BESTASSAY_NAME", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SMPCHK_BESTASS_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SMPCHK_BESTASS_T", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SMPCHK_BESTASS_T_NAME>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SMPCHK_BESTASS_T_NAME", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SMPCHK_BESTELASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SMPCHK_BESTELASSAY", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SMPCHK_BESTELASSAY_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SMPCHK_BESTELASSAY_N", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SMPCHK_BESTELASSAY_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SMPCHK_BESTELASSAY_T", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SMPCHK_BESTELASSAY_T_N>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SMPCHK_BESTELASSAY_T_N", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SMPCHK_BESTGNASSAY>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SMPCHK_BESTGNASSAY", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SMPCHK_BESTGNASSAY_T>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SMPCHK_BESTGNASSAY_T", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SMPCHK_GEOBIGCOMMENT_V1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SMPCHK_GEOBIGCOMMENT_V1", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SMPCHK_GEOCOMMENT_V1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SMPCHK_GEOCOMMENT_V1", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_SMPCHK_GEODETAILS_V1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_SMPCHK_GEODETAILS_V1", "dbo");

            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_DSRANGE_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_DSRANGE_RO", "dbo");

            entity.Property(e => e.DMAX)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.DMIN)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FONT)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.PATTERN)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_DSRANGE_RW>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_DSRANGE_RW", "dbo");

            entity.Property(e => e.DMAX)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.DMIN)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FONT)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.PATTERN)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_DVRANGE_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_DVRANGE_RO", "dbo");

            entity.Property(e => e.DMAX)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.DMIN)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_DVRANGE_RW>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_DVRANGE_RW", "dbo");

            entity.Property(e => e.DMAX)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.DMIN)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_EXTREF_RW>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_EXTREF_RW", "dbo");

            entity.Property(e => e.EXTERNALFIELD)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EXTERNALTABLE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_FIELD_RW>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_FIELD_RW", "dbo");

            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTYPEDESC)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.PFIELDNAME)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PFIELDTABLE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VTREF)
                .HasMaxLength(37)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_GEODETAILS_DESC>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_GEODETAILS_DESC", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_GEODETAILS_NUMEQ>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_GEODETAILS_NUMEQ", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_GEOLOGYCODESEC_DESC>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_GEOLOGYCODESEC_DESC", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.PRIMARYCODE)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_GEOLOGYCODESEC_NUMEQ>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_GEOLOGYCODESEC_NUMEQ", "dbo");

            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.PRIMARYCODE)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_INTREF_RW>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_INTREF_RW", "dbo");

            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PFIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PFIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_LOOKUP_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_LOOKUP_RO", "dbo");

            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FONT)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.LOOKUP)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.PATTERN)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.REPORTDESC)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.SUBGROUP)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_LOOKUP_RW>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_LOOKUP_RW", "dbo");

            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FONT)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.LOOKUP)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.PATTERN)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.REPORTDESC)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.SUBGROUP)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_NSRANGE_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_NSRANGE_RO", "dbo");

            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FONT)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.PATTERN)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_NSRANGE_RW>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_NSRANGE_RW", "dbo");

            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FONT)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.PATTERN)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_NVRANGE_RO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_NVRANGE_RO", "dbo");

            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_NVRANGE_RW>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_NVRANGE_RW", "dbo");

            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_POINTGEO_DESC>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_POINTGEO_DESC", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_POINTGEO_NUMEQ>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_POINTGEO_NUMEQ", "dbo");

            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(26)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QV_VS_PROJECT_RW>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("QV_VS_PROJECT_RW", "dbo");

            entity.Property(e => e.FIELDNAME)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FIELDTABLE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LOOKUP)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Q_GHeader>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Q_GHeader", "dbo");

            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Bit_Size)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Chargeable)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Delta_T_Matrix)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Density_Matrix)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Driller_Depth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Elev_GL)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_File_Type_Iden)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Logging_Unit)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_M_Chrg)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Mag_Dec)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Neutron_Matrix)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Recorded_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Serial_Num)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Start_Depth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Stop_Depth)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Survey_Company)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Sys_Version)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Tool_SN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LAS_H_Truck_Cal_Num)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Q_OREDEF_TRACKING>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Q_OREDEF_TRACKING", "dbo");

            entity.Property(e => e.ADJ_YEAR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CAL_MONTH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CAL_YEAR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_COLLAR).IsUnicode(false);
            entity.Property(e => e.COMMENTS_TECH).IsUnicode(false);
            entity.Property(e => e.DATE_CLEARED).HasColumnType("datetime");
            entity.Property(e => e.DATE_PEGGED).HasColumnType("datetime");
            entity.Property(e => e.DND)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DRILLED_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DSTAT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE).HasColumnType("datetime");
            entity.Property(e => e.GDP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GEOPHYS_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPH_SURVEY_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLE_STATUS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.INTERP_BY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LEASE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOGGED_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOGGEO_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MACHINE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MD_2013_LOM).HasColumnType("datetime");
            entity.Property(e => e.MD_201508_LOMP).HasColumnType("datetime");
            entity.Property(e => e.MD_2015_ACCEL).HasColumnType("datetime");
            entity.Property(e => e.MD_30MONTH).HasColumnType("datetime");
            entity.Property(e => e.MD_TAILS_2015).HasColumnType("datetime");
            entity.Property(e => e.MINE_PLAN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MSTAT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MTH_PERIOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MWD_SURVEY_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PATTERN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PD_201508_LOMP).HasColumnType("datetime");
            entity.Property(e => e.PHOTOS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PHOTO_PATH).IsUnicode(false);
            entity.Property(e => e.PHOTO_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PLANNED_AREA)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROGRAM_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QTR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QTR_PERIOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RIGID_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RTK_SURVEY_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SHORTID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE).HasColumnType("datetime");
            entity.Property(e => e.SUB_REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SUMP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SURVEY_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TWIN_IDS)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.TYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALIDATED_DATE).HasColumnType("datetime");
            entity.Property(e => e.VALID_BY)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Q_VUL_COLLARS>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Q_VUL_COLLARS", "dbo");

            entity.Property(e => e.ADJ_YEAR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CAL_MONTH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CAL_YEAR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_COLLAR).IsUnicode(false);
            entity.Property(e => e.COMMENTS_TECH).IsUnicode(false);
            entity.Property(e => e.DATE_CLEARED).HasColumnType("datetime");
            entity.Property(e => e.DATE_PEGGED).HasColumnType("datetime");
            entity.Property(e => e.DND)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DRILLED_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DSTAT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE).HasColumnType("datetime");
            entity.Property(e => e.GDP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GEOPHYS_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPH_SURVEY_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLE_STATUS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.INTERP_BY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LEASE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOGGED_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOGGEO_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MACHINE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MD_2013_LOM).HasColumnType("datetime");
            entity.Property(e => e.MD_201508_LOMP).HasColumnType("datetime");
            entity.Property(e => e.MD_2015_ACCEL).HasColumnType("datetime");
            entity.Property(e => e.MD_30MONTH).HasColumnType("datetime");
            entity.Property(e => e.MD_TAILS_2015).HasColumnType("datetime");
            entity.Property(e => e.MINE_PLAN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MSTAT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MTH_PERIOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MWD_SURVEY_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PATTERN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PD_201508_LOMP).HasColumnType("datetime");
            entity.Property(e => e.PHOTOS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PHOTO_PATH).IsUnicode(false);
            entity.Property(e => e.PHOTO_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PLANNED_AREA)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROGRAM_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QTR)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QTR_PERIOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RIGID_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RTK_SURVEY_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SHORTID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STARTDATE).HasColumnType("datetime");
            entity.Property(e => e.SUB_REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SUMP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SURVEY_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TWIN_IDS)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("NA");
            entity.Property(e => e.TYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALIDATED_DATE).HasColumnType("datetime");
            entity.Property(e => e.VALID_BY)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Q_VUL_COLLARS_PLANNED>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Q_VUL_COLLARS_PLANNED", "dbo");

            entity.Property(e => e.BUFFER).HasMaxLength(20);
            entity.Property(e => e.CALENDAR_DRILL_DATE).HasColumnType("datetime");
            entity.Property(e => e.CALENDAR_DRILL_YYYYMM)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CALENDAR_DRILL_YYYYQQ)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATE_CLEARED).HasMaxLength(20);
            entity.Property(e => e.DATE_PEGGED).HasMaxLength(20);
            entity.Property(e => e.FINANCIAL_DRILL_YYYYMM)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FINANCIAL_DRILL_YYYYQQ)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GDP).HasMaxLength(20);
            entity.Property(e => e.HOLEID).HasMaxLength(20);
            entity.Property(e => e.LEASE).HasMaxLength(20);
            entity.Property(e => e.MACHINE).HasMaxLength(20);
            entity.Property(e => e.MineDate_201508_LOMP).HasColumnType("datetime");
            entity.Property(e => e.PATTERN).HasMaxLength(20);
            entity.Property(e => e.REGION).HasMaxLength(20);
            entity.Property(e => e.STATUS).HasMaxLength(20);
            entity.Property(e => e.SUBDRILL).HasMaxLength(20);
            entity.Property(e => e.SUBREGION).HasMaxLength(20);
            entity.Property(e => e.TYPE).HasMaxLength(20);
        });

        modelBuilder.Entity<RH_CollarGeologyDrillingSampleFromTo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RH_CollarGeologyDrillingSampleFromTo", "dbo");

            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RH_PlannedHoles>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RH_PlannedHoles", "dbo");

            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LEASE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.P_DEPTH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.P_DRY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.P_DUPDEPTH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.P_REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.P_STDDPTH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.P_SUBREGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.P_WET)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.REGIONPIT)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SUBREGIONPIT)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RH_QAQC_TOTALASSAYS>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RH_QAQC_TOTALASSAYS", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLE)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Strand)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TYPE)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UID)
                .HasMaxLength(82)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Range>(entity =>
        {
            entity.HasKey(e => e.RangeId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Range", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details from/to ranges (e.g. from/to depths) in the system.");
                    tb.HasTrigger("T_Range_OD");
                });

            entity.HasIndex(e => e.FromFieldId, "IDX_Range_01").HasFillFactor(80);

            entity.HasIndex(e => e.ToFieldId, "IDX_Range_02").HasFillFactor(80);

            entity.HasIndex(e => e.Name, "UQ_Range_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.RangeId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.CompoundId).HasComment("The main compound which this range attribute is based on.");
            entity.Property(e => e.DataSourceId)
                .HasDefaultValueSql("([AcqMetaSystem].[GetManualDataSourceId]())")
                .HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.FromFieldId).HasComment("The compound field representing the from field for this range.");
            entity.Property(e => e.HasDuplicatedIntervals).HasComment("Whether this range allows repeated values for the from and to fields for the given range grouping elements.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The distinct name for this range.");
            entity.Property(e => e.ToFieldId).HasComment("The compound field representing the to field for this range.");

            entity.HasOne(d => d.Compound).WithMany(p => p.Range)
                .HasForeignKey(d => d.CompoundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Range_01");

            entity.HasOne(d => d.DataSource).WithMany(p => p.Range)
                .HasForeignKey(d => d.DataSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Range_04");

            entity.HasOne(d => d.FromField).WithMany(p => p.RangeFromField)
                .HasForeignKey(d => d.FromFieldId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Range_02");

            entity.HasOne(d => d.ToField).WithMany(p => p.RangeToField)
                .HasForeignKey(d => d.ToFieldId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Range_03");
        });

        modelBuilder.Entity<RangeGroupingElement>(entity =>
        {
            entity.HasKey(e => new { e.RangeId, e.OrderNumber }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("RangeGroupingElement", "AcqMetaSystem", tb => tb.HasComment("Lists the elements (either relationship or field) for which from/to depths in the given range are distinct and non overlapping."));

            entity.Property(e => e.RangeId).HasComment("The primary key of the range which this grouping element belongs to.");
            entity.Property(e => e.OrderNumber).HasComment("The order number of the element within the range.");
            entity.Property(e => e.CompoundFieldId).HasComment("If the element is a field, this is the compound field representing the element.");
            entity.Property(e => e.RelationshipId).HasComment("If the element is a relationship, this is the relationship representing the element.");

            entity.HasOne(d => d.CompoundField).WithMany(p => p.RangeGroupingElement)
                .HasForeignKey(d => d.CompoundFieldId)
                .HasConstraintName("FK_RangeGroupingElement_01");

            entity.HasOne(d => d.Range).WithMany(p => p.RangeGroupingElement)
                .HasForeignKey(d => d.RangeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RangeGroupingElement_02");

            entity.HasOne(d => d.Relationship).WithMany(p => p.RangeGroupingElement)
                .HasForeignKey(d => d.RelationshipId)
                .HasConstraintName("FK_RangeGroupingElement_03");
        });

        modelBuilder.Entity<Relationship>(entity =>
        {
            entity.HasKey(e => e.RelationshipId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Relationship", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the relationships between compounds.");
                    tb.HasTrigger("T_Relationship_OD");
                });

            entity.HasIndex(e => e.Compound2Id, "IDX_Relationship_01").HasFillFactor(80);

            entity.HasIndex(e => e.ReverseRelationshipId, "IDX_Relationship_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.Compound1Id, e.Compound2Id, e.RelationshipDirection, e.JoinCondition }, "UQ_Relationship_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.HasIndex(e => e.Name, "UQ_Relationship_02")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.RelationshipId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Compound1Id).HasComment("The First Compound in the relationship.");
            entity.Property(e => e.Compound2Id).HasComment("The Second Compound in the relationship.");
            entity.Property(e => e.DataSourceId)
                .HasDefaultValueSql("([AcqMetaSystem].[GetManualDataSourceId]())")
                .HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.DefaultFilterCondition).HasColumnType("xml");
            entity.Property(e => e.DefaultOrderingCondition).HasColumnType("xml");
            entity.Property(e => e.IsParent).HasComment("Outlines if the source compound is a parent compound of the target.");
            entity.Property(e => e.IsRequired).HasComment("Flag indicating that the relationship must be set on the source compound.");
            entity.Property(e => e.IsVisible)
                .HasDefaultValue(true)
                .HasComment("Should the relationship be visible to users.");
            entity.Property(e => e.JoinCondition)
                .IsRequired()
                .HasMaxLength(440)
                .HasComment("The join condition string for this relationship.");
            entity.Property(e => e.JoinType)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The Type of join between the two tables, either Equality or Derived.");
            entity.Property(e => e.Label)
                .HasMaxLength(200)
                .HasComment("The Label of the relationship.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasComment("The Name of the relationship.")
                .UseCollation("Latin1_General_CS_AS");
            entity.Property(e => e.RelationshipDirection)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Outlines the type of relationship between the two compounds, Either \"OneToMany\", \"ManyToOne\", \"ManyToMany\", or \"OneToOne\".");
            entity.Property(e => e.ReverseRelationshipId).HasComment("The link to the same relationship in the opposite direction.");
            entity.Property(e => e.RuleBehavior)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Specifies kind of relationship with respect to rule propagation.");

            entity.HasOne(d => d.Compound1).WithMany(p => p.RelationshipCompound1)
                .HasForeignKey(d => d.Compound1Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Relationship_01");

            entity.HasOne(d => d.Compound2).WithMany(p => p.RelationshipCompound2)
                .HasForeignKey(d => d.Compound2Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Relationship_02");

            entity.HasOne(d => d.DataSource).WithMany(p => p.Relationship)
                .HasForeignKey(d => d.DataSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Relationship_04");

            entity.HasOne(d => d.ReverseRelationship).WithMany(p => p.InverseReverseRelationship)
                .HasForeignKey(d => d.ReverseRelationshipId)
                .HasConstraintName("FK_Relationship_03");
        });

        modelBuilder.Entity<RelationshipConditionalJoin>(entity =>
        {
            entity.HasKey(e => e.RelationshipConditionalJoinId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("RelationshipConditionalJoin", "AcqMetaSystem");

            entity.Property(e => e.JoinExpression)
                .IsRequired()
                .HasColumnType("xml");

            entity.HasOne(d => d.Relationship).WithMany(p => p.RelationshipConditionalJoin)
                .HasForeignKey(d => d.RelationshipId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RelationshipConditionalJoin_01");
        });

        modelBuilder.Entity<RelationshipJoin>(entity =>
        {
            entity.HasKey(e => new { e.RelationshipId, e.OrderNumber }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("RelationshipJoin", "AcqMetaSystem", tb => tb.HasComment("Details the fields in each compound to be used when joining the two compounds."));

            entity.Property(e => e.RelationshipId).HasComment("The Relationship.");
            entity.Property(e => e.OrderNumber).HasComment("The order of the field pairs within a given relationship.");
            entity.Property(e => e.CompoundField1Id).HasComment("The Compound Field from the first compound.");
            entity.Property(e => e.CompoundField2Id).HasComment("The Compound Field from the second compound.");

            entity.HasOne(d => d.CompoundField1).WithMany(p => p.RelationshipJoinCompoundField1)
                .HasForeignKey(d => d.CompoundField1Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RelationshipJoin_01");

            entity.HasOne(d => d.CompoundField2).WithMany(p => p.RelationshipJoinCompoundField2)
                .HasForeignKey(d => d.CompoundField2Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RelationshipJoin_02");

            entity.HasOne(d => d.Relationship).WithMany(p => p.RelationshipJoin)
                .HasForeignKey(d => d.RelationshipId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RelationshipJoin_03");
        });

        modelBuilder.Entity<RelationshipOrdering>(entity =>
        {
            entity.HasKey(e => new { e.RelationshipId, e.CompoundFieldId }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("RelationshipOrdering", "AcqMetaSystem", tb => tb.HasComment("Details the order in which Compound Fields should be used for ordering this relationship."));

            entity.Property(e => e.RelationshipId).HasComment("The Relationship.");
            entity.Property(e => e.CompoundFieldId).HasComment("The field which is involved with ordering within the relationship. There could be multiple fields.");
            entity.Property(e => e.Ascending).HasComment("The ascending or decending order in which this field should be used in ordering.");
            entity.Property(e => e.OrderNumber).HasComment("The order number of this field in the set of fields used for ordering this relationship.");

            entity.HasOne(d => d.CompoundField).WithMany(p => p.RelationshipOrdering)
                .HasForeignKey(d => d.CompoundFieldId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RelationshipOrdering_01");

            entity.HasOne(d => d.Relationship).WithMany(p => p.RelationshipOrdering)
                .HasForeignKey(d => d.RelationshipId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RelationshipOrdering_02");
        });

        modelBuilder.Entity<RelationshipPathing>(entity =>
        {
            entity.HasKey(e => e.RelationshipId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("RelationshipPathing", "AcqPresentation");

            entity.Property(e => e.RelationshipId).ValueGeneratedNever();
            entity.Property(e => e.UseInPathing).HasDefaultValue(true);

            entity.HasOne(d => d.Relationship).WithOne(p => p.RelationshipPathing)
                .HasForeignKey<RelationshipPathing>(d => d.RelationshipId)
                .HasConstraintName("FK_RelationshipPathing_01");
        });

        modelBuilder.Entity<RelationshipPathingCheapestEdges>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RelationshipPathingCheapestEdges", "AcqPresentation");

            entity.Property(e => e.RelationshipName)
                .IsRequired()
                .HasMaxLength(450)
                .UseCollation("Latin1_General_CS_AS");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Role", "AcqPresentation", tb =>
                {
                    tb.HasComment("List of the roles in the system.");
                    tb.HasTrigger("T_Role_IU");
                });

            entity.HasIndex(e => e.Name, "UQ_Role_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.RoleId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Ancestor).HasComment("The Ancestor Role, is this role based on another role.");
            entity.Property(e => e.Description).HasComment("The Description of the Role.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(254)
                .HasComment("The Name of the Role.");
            entity.Property(e => e.WindowsGroup)
                .HasMaxLength(254)
                .HasComment("The Windows Group associated with this role.");

            entity.HasOne(d => d.AncestorNavigation).WithMany(p => p.InverseAncestorNavigation)
                .HasForeignKey(d => d.Ancestor)
                .HasConstraintName("FK_Role_01");
        });

        modelBuilder.Entity<SAMPLE>(entity =>
        {
            entity.HasKey(e => e.SAMPLEID)
                .HasName("PRIMARYKEYSAMPLE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLE", "dbo", tb =>
                {
                    tb.HasComment("Sample is a list of named samples (SampleID) with associated locations (for point sampling). The Sample table is central to Assay, PointSample and SampleGeoAssay compound definitions. It is in these compound definitions that your analytical results are stored. ");
                    tb.HasTrigger("LastModifiedUTSample");
                    tb.HasTrigger("T_SAMPLE_CF_D");
                    tb.HasTrigger("T_SAMPLE_CF_I");
                    tb.HasTrigger("T_SAMPLE_CF_U");
                    tb.HasTrigger("T_SAMPLE_PROJVAL_CF_U");
                    tb.HasTrigger("T_SAMPLE_PROJVAL_U");
                    tb.HasTrigger("T_S_CAS");
                    tb.HasTrigger("T_S_VAL_I");
                    tb.HasTrigger("T_S_VAL_U");
                });

            entity.HasIndex(e => e.HOLEID, "IDX_SAMPLE_01").HasFillFactor(80);

            entity.HasIndex(e => new { e.HOLEID, e.PROJECTCODE }, "IDX_SAMPLE_03").HasFillFactor(80);

            entity.HasIndex(e => e.GLOBALID, "UQ_SAMPLE_01").IsUnique();

            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The unique identifying name of a sample, the primary key.");
            entity.Property(e => e.GLOBALID)
                .HasDefaultValueSql("(newsequentialid())")
                .HasComment("The global identifier for this row.");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a hole a sample belongs to.");
            entity.Property(e => e.POINTEAST).HasComment("The X coordinate of a GEOCHEM sample.");
            entity.Property(e => e.POINTGRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the grid a GEOCHEM sample belongs to.");
            entity.Property(e => e.POINTNORTH).HasComment("The Y coordinate of a GEOCHEM sample.");
            entity.Property(e => e.POINTPROSPECT)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The prospect a GEOCHEM sample belongs to.");
            entity.Property(e => e.POINTRL).HasComment("The Z coordinate or Reduce Level of a GEOCHEM sample.");
            entity.Property(e => e.POINTTENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The name of the tenement a GEOCHEM sample belongs to.");
            entity.Property(e => e.PRIORITY).HasComment("The ranking of a sample in respect to some sampling property .");
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The name of the project a sample belongs to.");
            entity.Property(e => e.SAMPFROM).HasComment("The start position of a sample interval, for example start depth.");
            entity.Property(e => e.SAMPLETYPE)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("The type of sample collected, for example soil, lag, core etc.");
            entity.Property(e => e.SAMPTO).HasComment("The end position of a sample interval, for example end depth.");

            entity.HasOne(d => d.POINTGRIDNAMENavigation).WithMany(p => p.SAMPLE)
                .HasForeignKey(d => d.POINTGRIDNAME)
                .HasConstraintName("FK_SAMPLE_GRID");

            entity.HasOne(d => d.POINTTENEMENT).WithMany(p => p.SAMPLE)
                .HasForeignKey(d => d.POINTTENEMENTID)
                .HasConstraintName("FK_SAMPLE_TENEMENT");

            entity.HasOne(d => d.SAMPLETYPENavigation).WithMany(p => p.SAMPLE)
                .HasForeignKey(d => d.SAMPLETYPE)
                .HasConstraintName("SAMPLE42SAMPLETYPE");
        });

        modelBuilder.Entity<SAMPLEASSAY>(entity =>
        {
            entity.HasKey(e => new { e.SAMPLEID, e.NAME })
                .HasName("PRIMARYKEYSAMPLEASSAY")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLEASSAY", "dbo", tb =>
                {
                    tb.HasComment("SampleAssay works in conjunction with Sample to produce the Assay compound definition. SampleAssay stores the actual analytical results for the sample numbers. ");
                    tb.HasTrigger("T_SA_VAL");
                });

            entity.HasIndex(e => e.SAMPLEID, "IDX_SAMPLEASSAY_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_SAMPLEASSAY_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_SAMPLEASSAY_03").HasFillFactor(80);

            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SAMPLEBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.SAMPLEID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLEBIGCOMMENT", "dbo", tb => tb.HasComment("Stores the values for virtual fields related to samples when long strings are required."));

            entity.HasIndex(e => e.SAMPLEID, "IDX_SAMPLEBIGCOMMENT_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_SAMPLEBIGCOMMENT_02").HasFillFactor(80);

            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The foreign key to the SAMPLE table.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual field and the foreign key to the virtual field lookup table.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The value of the virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.SAMPLEBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAMPLEBIGCOMMENT_01");

            entity.HasOne(d => d.SAMPLE).WithMany(p => p.SAMPLEBIGCOMMENT)
                .HasForeignKey(d => d.SAMPLEID)
                .HasConstraintName("FK_SAMPLEBIGCOMMENT_02");
        });

        modelBuilder.Entity<SAMPLEBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLEBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("A lookup table for the virtual fields related to both SAMPLE and CHECKSAMPLE. For use when very long strings are required.");
                    tb.HasTrigger("T_SAMPLEBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_SAMPLEBIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual field and the primary key for the lookup table.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A verbose description of this virtual field.");
        });

        modelBuilder.Entity<SAMPLECODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLECODE", "dbo", tb =>
                {
                    tb.HasComment("SampleCode stores the virtual fields that can be either text, numeric or date. These virtual fields are available in Assay, PointSample, SampleGeoAssay, Chemistry, CheckAssay and CheckChemistry compound definitions. ");
                    tb.HasTrigger("T_SAMPLECODE_CF_D");
                    tb.HasTrigger("T_SAMPLECODE_CF_IU");
                    tb.HasTrigger("T_SAMPLECODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_SAMPLECODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.SCUNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.SAMPLECODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAMPLECODE");
        });

        modelBuilder.Entity<SAMPLECOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.SAMPLEID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLECOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Comment table associated with SAMPLE.");
                    tb.HasTrigger("T_SCM_VAL");
                });

            entity.HasIndex(e => e.SAMPLEID, "IDX_SAMPLECOMMENT_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_SAMPLECOMMENT_02").HasFillFactor(80);

            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.SAMPLECOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAMPLECOMMENT_NAME");
        });

        modelBuilder.Entity<SAMPLECOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLECOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with SAMPLECOMMENT.");
                    tb.HasTrigger("T_SAMPLECOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_SAMPLECOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.SAMPLECOMMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAMPLECOMMENTCODE_DATATYPE");
        });

        modelBuilder.Entity<SAMPLECOORD>(entity =>
        {
            entity.HasKey(e => new { e.SAMPLEID, e.COORDINATESET }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLECOORD", "dbo", tb =>
                {
                    tb.HasComment("Stores coordinates for a particular grid for point sample data. Coordinate data can be transformed and saved into this table. ");
                    tb.HasTrigger("T_SCRD_VAL");
                });

            entity.HasIndex(e => e.SAMPLEID, "IDX_SAMPLECOORD_01").HasFillFactor(80);

            entity.HasIndex(e => e.COORDINATESET, "IDX_SAMPLECOORD_02").HasFillFactor(80);

            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.COORDINATESET)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.COORDINATESETNavigation).WithMany(p => p.SAMPLECOORD)
                .HasForeignKey(d => d.COORDINATESET)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAMPLECOORD_GDCOORDINATESET");
        });

        modelBuilder.Entity<SAMPLEDESPATCH>(entity =>
        {
            entity.HasKey(e => new { e.SAMPLEID, e.DESPATCHNO }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLEDESPATCH", "dbo", tb =>
                {
                    tb.HasComment("This table associates SampleIDs with a DespatchNo. ");
                    tb.HasTrigger("T_SAMPLEDESPATCH_CORP_D");
                    tb.HasTrigger("T_SAMPLEDESPATCH_CORP_IU");
                    tb.HasTrigger("T_SAMPLEDESPATCH_D");
                    tb.HasTrigger("T_SED_CON");
                });

            entity.HasIndex(e => e.SAMPLEID, "IDX_SAMPLEDESPATCH_01").HasFillFactor(80);

            entity.HasIndex(e => e.DESPATCHNO, "IDX_SAMPLEDESPATCH_02").HasFillFactor(80);

            entity.HasIndex(e => e.LABJOBNO, "IDX_SAMPLEDESPATCH_03").HasFillFactor(80);

            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SAMPLEDESPATCHCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLEDESPATCHCODE", "dbo", tb =>
                {
                    tb.HasComment("SampleDespatchCode is a reference table defining the virtual fields in the SampleDespatchDetails table. ");
                    tb.HasTrigger("T_SAMPLEDESPATCHCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_SAMPLEDESPATCHCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.SAMPLEDESPATCHCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAMPLEDESPATCHCODE_DATATYPE");
        });

        modelBuilder.Entity<SAMPLEDESPATCHCOMCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLEDESPATCHCOMCODE", "dbo", tb =>
                {
                    tb.HasComment("SampleDespatchComCode is a reference table defining the virtual fields in the SampleDespatchComment table. ");
                    tb.HasTrigger("T_SAMPLEDESPATCHCOMCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_SAMPLEDESPATCHCOMCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.SAMPLEDESPATCHCOMCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAMPLEDESPATCHCOMCODE_DATATYPE");
        });

        modelBuilder.Entity<SAMPLEDESPATCHCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.SAMPLEID, e.DESPATCHNO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLEDESPATCHCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("SampleDespatchComment stores comments about individual samples in a dispatch. The field names are defined in SampleDespatchComCode.Name. ");
                    tb.HasTrigger("T_SAMPLEDESPATCHCOMMENT_UI");
                });

            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.SAMPLEDESPATCHCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAMPLEDESPATCHCOMMENT_NAME");
        });

        modelBuilder.Entity<SAMPLEDESPATCHDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.SAMPLEID, e.DESPATCHNO, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLEDESPATCHDETAILS", "dbo", tb =>
                {
                    tb.HasComment("SampleDespatchDetails stores particulars of individual samples in a despatch. The field names are defined in SampleDespatchCode.Name. ");
                    tb.HasTrigger("T_SAMPLEDESPATCHDETAILS_UI");
                });

            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.SAMPLEDESPATCHDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAMPLEDESPATCHDETAILS_NAME");
        });

        modelBuilder.Entity<SAMPLEDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.SAMPLEID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLEDETAILS", "dbo", tb =>
                {
                    tb.HasComment("You can create virtual fields for Assay, CheckAssay, PointSample, Chemistry and CheckChemistry that do not have to be numeric. (Those defined in AssayType MUST be numeric). The Name and associated Value for the particular SampleIDs are stored in this table. ");
                    tb.HasTrigger("LastModifiedUTSampleDetails");
                    tb.HasTrigger("T_SDT_VAL");
                });

            entity.HasIndex(e => e.SAMPLEID, "IDX_SAMPLEDETAILS_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_SAMPLEDETAILS_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_SAMPLEDETAILS_03").HasFillFactor(80);

            entity.Property(e => e.SAMPLEID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.SAMPLEDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAMPLEDETAILS");
        });

        modelBuilder.Entity<SAMPLETYPE>(entity =>
        {
            entity.HasKey(e => e.SAMPLETYPE1)
                .HasName("PRIMARYKEYSAMPLETYPE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SAMPLETYPE", "dbo", tb =>
                {
                    tb.HasComment("SampleType stores information about the sample (for that particular interval, or at that point).  Drillhole samples: the first-pass sampling interval can be rather broad. If the returned assay results are interesting, the interval is usually subdivided again and resampled, i.e. the first selected interval might be 4 m, making a 4 m composite (SampleType = 4 m). The follow-up sample might be 1 m (SampleType = 1 m). Geochemical samples: the first-pass sampling may be a large volume sample or to a coarser mesh. Second pass sampling could be smaller or a finer mesh (SampleType = -30 micron or -60 micron). ");
                    tb.HasTrigger("T_SAMPLETYPE_CON_IU");
                });

            entity.Property(e => e.SAMPLETYPE1)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SAMPLETYPE");
            entity.Property(e => e.ACTIVE).HasDefaultValue((byte)1);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SHIFT>(entity =>
        {
            entity.HasKey(e => e.SHIFT1)
                .HasName("PRIMARYKEYSHIFT")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SHIFT", "dbo", tb =>
                {
                    tb.HasComment("Stores details of the available shift formats.");
                    tb.HasTrigger("T_SHIFT_IU");
                });

            entity.Property(e => e.SHIFT1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The unique identifier for the shift.")
                .HasColumnName("SHIFT");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("A description of the shift.");
            entity.Property(e => e.ENDTIME)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("The time of day at which the shift ends.");
            entity.Property(e => e.ENDTIMEAMPM)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Whether the shift end time is AM or PM.");
            entity.Property(e => e.STARTTIME)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("The time of day at which the shift starts.");
            entity.Property(e => e.STARTTIMEAMPM)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Whether the shift start time is AM or PM.");
            entity.Property(e => e.USETWELVEHOURTIME).HasComment("Indicates whether or not the shift start and end times are in twelve hour time format.");
        });

        modelBuilder.Entity<STANDARDSASSAY>(entity =>
        {
            entity.HasKey(e => new { e.STANDARDID, e.NAME })
                .HasName("PRIMARYKEYSTANDARDSASSAY")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("STANDARDSASSAY", "dbo", tb =>
                {
                    tb.HasComment("StandardsAssay stores the actual analytical result associated with the standard. The primary key fields are StandardID and AssayType. ");
                    tb.HasTrigger("T_SD_VAL");
                    tb.HasTrigger("T_STA_CON");
                });

            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A unique identifier and part of the primary key of a standard.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The assay name of the standard, part of the primary key.");
            entity.Property(e => e.ACCEPTABLEMAX).HasComment("The expected upper limit of an analytical result of the standard.");
            entity.Property(e => e.ACCEPTABLEMIN).HasComment("The expected lower limit of an analytical result of the standard.");
            entity.Property(e => e.STANDARDDEVIATION).HasComment("The statistical deviation from the assay mean.");
            entity.Property(e => e.STANDARDRANGE).HasComment("The percentage of how many analytical results of this standard might fall within the expected range.");
            entity.Property(e => e.STANDARDVALUE).HasComment("The expected value of the standard assay result.");
        });

        modelBuilder.Entity<STANDARDSDEFBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.STANDARDID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("STANDARDSDEFBIGCOMMENT", "dbo", tb => tb.HasComment("Big comment table associated with table STANDARDSDEFINITION."));

            entity.HasIndex(e => e.STANDARDID, "IDX_STANDARDSDEFBIGCOMMENT_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_STANDARDSDEFBIGCOMMENT_02").HasFillFactor(80);

            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The identifying name of a standard.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a virtual big comment field.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The long comment of a virtual big comment field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.STANDARDSDEFBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STANDARDSDEFBIGCOMMENT_01");

            entity.HasOne(d => d.STANDARD).WithMany(p => p.STANDARDSDEFBIGCOMMENT)
                .HasForeignKey(d => d.STANDARDID)
                .HasConstraintName("FK_STANDARDSDEFBIGCOMMENT_02");
        });

        modelBuilder.Entity<STANDARDSDEFBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("STANDARDSDEFBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with table STANDARDSDEFBIGCOMMENT.");
                    tb.HasTrigger("T_STANDARDSDEFBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a virtual big comment field of a construction.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The description of a virtual big comment field of a construction.");
        });

        modelBuilder.Entity<STANDARDSDEFCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("STANDARDSDEFCODE", "dbo", tb =>
                {
                    tb.HasComment("Code table associated with table STANDARDSDEFDETAILS.");
                    tb.HasTrigger("T_STANDARDSDEFCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_STANDARDSDEFCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual details field.");
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the data type of a virtual details field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The description of a virtual details field.");
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Defines the units used when a numeric data type is used.");

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.STANDARDSDEFCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STANDARDSDEFCODE_DATATYPE");
        });

        modelBuilder.Entity<STANDARDSDEFDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.STANDARDID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("STANDARDSDEFDETAILS", "dbo", tb =>
                {
                    tb.HasComment("Details table associate with table STANDARDSDEFINITION.");
                    tb.HasTrigger("T_STANDARDSDEFDETAILS_VAL");
                });

            entity.HasIndex(e => e.STANDARDID, "IDX_STANDARDSDEFDETAILS_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_STANDARDSDEFDETAILS_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.NAME, e.VALUE }, "IDX_STANDARDSDEFDETAILS_03").HasFillFactor(80);

            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("The identifying name of a standard.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a virtual details field.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("The content of a virtual details field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.STANDARDSDEFDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STANDARDSDEFDETAILS_NAME");
        });

        modelBuilder.Entity<STANDARDSDEFINITION>(entity =>
        {
            entity.HasKey(e => e.STANDARDID)
                .HasName("PRIMARYKEYSTANDARDSDEFINITION")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("STANDARDSDEFINITION", "dbo", tb =>
                {
                    tb.HasComment("StandardsDefinition stores unique numbers that identify samples that were sent to a laboratory for analysis as standards. A standard sample is often purchased with a tested and recorded result and margin of error. ");
                    tb.HasTrigger("T_SDF_CAS");
                    tb.HasTrigger("T_SDF_CON_I");
                    tb.HasTrigger("T_SDF_CON_U");
                });

            entity.Property(e => e.STANDARDID)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDACTIVE).HasDefaultValue((byte)1);
            entity.Property(e => e.STANDARDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.STANDARDTYPENavigation).WithMany(p => p.STANDARDSDEFINITION)
                .HasForeignKey(d => d.STANDARDTYPE)
                .HasConstraintName("FK_STANDARDSDEFINITION_STDTYPE");
        });

        modelBuilder.Entity<STANDARDSTYPE>(entity =>
        {
            entity.HasKey(e => e.STANDARDTYPE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("STANDARDSTYPE", "dbo", tb => tb.HasComment("This table is a reference table for the foreign key field StandardType in the StandardsDefinition table. "));

            entity.Property(e => e.STANDARDTYPE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SUITEDEFINITION>(entity =>
        {
            entity.HasKey(e => new { e.ANALYSISSUITE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SUITEDEFINITION", "dbo", tb =>
                {
                    tb.HasComment("This table associates an AnalysisSuite name with the elements (AssayType.Name) that make up the suite or group. ");
                    tb.HasTrigger("T_SDEF_VAL");
                });

            entity.Property(e => e.ANALYSISSUITE)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.ANALYSISSUITENavigation).WithMany(p => p.SUITEDEFINITION)
                .HasForeignKey(d => d.ANALYSISSUITE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ANALYSISDETAILS_ASUITE");
        });

        modelBuilder.Entity<SURVEYAZIMUTH>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.DEPTH, e.SURVTYPE, e.GRIDNAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SURVEYAZIMUTH", "dbo", tb =>
                {
                    tb.HasComment("Storage of downhole azimuths. ");
                    tb.HasTrigger("T_SRAZ_VAL");
                });

            entity.HasIndex(e => e.HOLEID, "IDX_SURVEYAZIMUTH_01").HasFillFactor(80);

            entity.HasIndex(e => e.GRIDNAME, "IDX_SURVEYAZIMUTH_02").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SURVTYPE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.GRIDNAMENavigation).WithMany(p => p.SURVEYAZIMUTH)
                .HasForeignKey(d => d.GRIDNAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SURVEYAZIMUTH_GRID");
        });

        modelBuilder.Entity<SURVEYBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.DEPTH, e.SURVTYPE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SURVEYBIGCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Large comments and observations about specific downhole surveys are stored in this table. ");
                    tb.HasTrigger("T_SURVEYBIGCOMMENT_IU");
                });

            entity.HasIndex(e => e.HOLEID, "IDX_SURVEYBIGCOMMENT_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_SURVEYBIGCOMMENT_02").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The name of the project the hole belongs to.");
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the hole where the survey is taken.");
            entity.Property(e => e.DEPTH).HasComment("The depth where the survey is taken.");
            entity.Property(e => e.SURVTYPE)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The type of survey used to determine the hole plunge and direction.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual field.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The mandatory value of a virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.SURVEYBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SURVEYBIGCOMMENT_01");
        });

        modelBuilder.Entity<SURVEYBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SURVEYBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("SURVEYBIGCOMMENTCODE lists the large comment virtual field definitions for table HOLESURVEY. ");
                    tb.HasTrigger("T_SURVEYBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_SURVEYBIGCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual field and the primary key of the lookup table.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The verbose descriptions of a virtual field.");
        });

        modelBuilder.Entity<SURVEYCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SURVEYCODE", "dbo", tb =>
                {
                    tb.HasComment("Virtual fields for the Survey compound definition are stored in this table. ");
                    tb.HasTrigger("T_SURVEYCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_SURVEYCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.SURVEYCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SURVEYCODE_DATATYPE");
        });

        modelBuilder.Entity<SURVEYCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.DEPTH, e.SURVTYPE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SURVEYCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Comments and observations about specific downhole surveys are stored in this table. ");
                    tb.HasTrigger("T_SRCM_VAL");
                });

            entity.HasIndex(e => e.HOLEID, "IDX_SURVEYCOMMENT_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_SURVEYCOMMENT_02").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SURVTYPE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.SURVEYCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SURVEYCOMMENT_NAME");
        });

        modelBuilder.Entity<SURVEYCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SURVEYCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Comments and observations about specific downhole surveys are stored in this table. ");
                    tb.HasTrigger("T_SURVEYCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_SURVEYCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.SURVEYCOMMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SURVEYCOMMENTCODE_DATATYPE");
        });

        modelBuilder.Entity<SURVEYDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.DEPTH, e.SURVTYPE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SURVEYDETAILS", "dbo", tb =>
                {
                    tb.HasComment("The data for the virtual fields for the Survey compound definition is stored in this table. ");
                    tb.HasTrigger("LastModifiedUTSurveyDetails");
                    tb.HasTrigger("T_SR_VAL");
                });

            entity.HasIndex(e => e.HOLEID, "IDX_SURVEYDETAILS_01").HasFillFactor(80);

            entity.HasIndex(e => e.NAME, "IDX_SURVEYDETAILS_02").HasFillFactor(80);

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SURVTYPE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.SURVEYDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SURVEYDETAILS_SURVEYCODE");
        });

        modelBuilder.Entity<SURVEYTYPE>(entity =>
        {
            entity.HasKey(e => e.SURVTYPE)
                .HasName("PRIMARYKEYSURVEYTYPE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SURVEYTYPE", "dbo", tb =>
                {
                    tb.HasComment("SurveyType stores particulars about the method or the instrument used for the survey - Eastman, Maxibore, Gyro and so on. The RANK of a survey type can be used to preferentially select data. For explanation of rank in a similar context refer to the page on AssayType Rank. ");
                    tb.HasTrigger("T_SURVEYTYPE_CON_IU");
                });

            entity.Property(e => e.SURVTYPE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ACTIVE).HasDefaultValue((byte)1);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Schedule>(entity =>
        {
            entity.HasKey(e => e.ScheduleId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Schedule", "AcqManagement", tb => tb.HasComment("Defines a schedule that can be used to define when external tasks should be run."));

            entity.Property(e => e.ScheduleId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.ActiveEndDate).HasComment("The last date that a task or event can occur.");
            entity.Property(e => e.ActiveEndTime).HasComment("The time of day that a task using this schedule should be terminated, if it is still running.\r\n					Time is formatted HHMMSS, using a 24-hour clock.\r\n				");
            entity.Property(e => e.ActiveStartDate).HasComment("The first date that a task or event occurs.");
            entity.Property(e => e.ActiveStartTime).HasComment("The time of day that a task using this schedule should be run.\r\n					Time is formatted HHMMSS, using a 24-hour clock.\r\n				");
            entity.Property(e => e.FrequencyInterval).HasComment("Further defines when a task should be run for this schedule. See the relevant\r\n					freq_interval documentation at https://msdn.microsoft.com/en-us/library/ms178644.aspx.\r\n				");
            entity.Property(e => e.FrequencyRelativeInterval).HasComment("Further defines when a task should be run for this schedule. This is only used when\r\n					FrequencyType is 32 (monthly relative). It's been modified slightly from SQL's implementation to\r\n					cater for the 5th day of the month. This field is a bit flag.\r\n					0  = Unused\r\n					1  = First (e.g. First Wednesday every month)\r\n					2  = Second\r\n					4  = Third\r\n					8  = Fourth\r\n					16 = Fifth\r\n					32 = Last\r\n				");
            entity.Property(e => e.FrequencyType).HasComment("How frequently a task should be run for this schedule. This field is a bit flag.\r\n					1  = Once only\r\n					4  = Every day\r\n					8  = Weekly (days of week can be specified by FrequencyInterval)\r\n					16 = Monthly (the numbered day of the month will be specified by FrequencyInterval)\r\n					32 = Monthly relative (FrequencyInterval and FrequencyRelativeInterval determine the days in the month)\r\n				");
            entity.Property(e => e.IsEnabled).HasComment("Whether the schedule is enabled (1) or disabled (0).");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .HasComment("The name of the schedule. This is not required.");
        });

        modelBuilder.Entity<SecureEntity>(entity =>
        {
            entity.HasKey(e => e.SecureEntityId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("SecureEntity", "AcqPresentation", tb => tb.HasComment("Details the Securable Entities in the system."));

            entity.Property(e => e.SecureEntityId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.SecurableKey)
                .IsRequired()
                .HasComment("The Key for access to the securable table. Including fields and expected values.")
                .HasColumnType("xml");
            entity.Property(e => e.SecurableTable)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The Table which details the given securable item.");
        });

        modelBuilder.Entity<Setting>(entity =>
        {
            entity.HasKey(e => new { e.Context, e.Name }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Setting", "AcqManagement", tb =>
                {
                    tb.HasComment("Details general system wide settings.");
                    tb.HasTrigger("T_Setting_IU");
                    tb.HasTrigger("T_Setting_IUD");
                });

            entity.Property(e => e.Context)
                .HasMaxLength(50)
                .HasComment("The context within which the setting is applicable.");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasComment("The name of the setting within the given context.");
            entity.Property(e => e.ComplexValue)
                .HasComment("If the setting is a complex value, this is the current setting value as an XML document. This field or SingleValue must be provided, but not both.")
                .HasColumnType("xml");
            entity.Property(e => e.Datatype)
                .IsRequired()
                .HasMaxLength(128)
                .HasComment("The SQL Server data type of the setting. If ComplexValue is set, this field must have the value of \"xml\".");
            entity.Property(e => e.SingleValue)
                .HasComment("If the setting is a single value, this is the current setting value. This field or ComplexValue must be provided, but not both.")
                .HasColumnType("sql_variant");
        });

        modelBuilder.Entity<SettingProcessingEventType>(entity =>
        {
            entity.HasKey(e => new { e.Context, e.Name });

            entity.ToTable("SettingProcessingEventType", "AcqManagement", tb => tb.HasComment("Connects a system wide setting with the type of Event that should be raised when changed."));

            entity.Property(e => e.Context)
                .HasMaxLength(50)
                .HasComment("The context within which the setting is applicable.");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasComment("The name of the setting within the given context.");
            entity.Property(e => e.ProcessingEventTypeName)
                .HasMaxLength(500)
                .HasComment("Name of Procesing Event to raise on modification of value.");

            entity.HasOne(d => d.Setting).WithOne(p => p.SettingProcessingEventType)
                .HasForeignKey<SettingProcessingEventType>(d => new { d.Context, d.Name })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SettingProcessingEventType_01");
        });

        modelBuilder.Entity<SiteLabBackLogStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SiteLabBackLogStatus", "dbo");

            entity.Property(e => e.DESPATCHNO)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.ENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Styling>(entity =>
        {
            entity.HasKey(e => e.StylingId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Styling", "AcqPresentation", tb => tb.HasComment("Lists the styling options available in the system."));

            entity.HasIndex(e => new { e.StylingCategoryId, e.Name }, "UQ_Styling_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.StylingId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasComment("A description of the styling.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the styling.");
            entity.Property(e => e.StylingCategoryId).HasComment("A link to the parent styling category.");

            entity.HasOne(d => d.StylingCategory).WithMany(p => p.Styling)
                .HasForeignKey(d => d.StylingCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Styling_01");
        });

        modelBuilder.Entity<StylingCategory>(entity =>
        {
            entity.HasKey(e => e.StylingCategoryId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("StylingCategory", "AcqPresentation", tb => tb.HasComment("Lists the styling categories (e.g. Text, Background, Line) in the system."));

            entity.HasIndex(e => e.Name, "UQ_StylingCategory_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.StylingCategoryId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the styling category.");
        });

        modelBuilder.Entity<StylingCondition>(entity =>
        {
            entity.HasKey(e => e.StylingConditionId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("StylingCondition", "AcqPresentation", tb => tb.HasComment("Details, for a given styling field group/styling category combination, the logical conditions which can be applied to the data, and the resultant styling which should be applied if the condition is true."));

            entity.Property(e => e.StylingConditionId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.StylingCondition1)
                .IsRequired()
                .HasComment("An XML reAcqPresentation of the condition (e.g. value between 10 and 20) which, if true, will mean that the given styling is shown.")
                .HasColumnType("xml")
                .HasColumnName("StylingCondition");
            entity.Property(e => e.StylingDetail)
                .IsRequired()
                .HasComment("An XML reAcqPresentation of the styling (e.g. a solid blue background) to be used if the condition is true.")
                .HasColumnType("xml");
            entity.Property(e => e.StylingFieldGroupId).HasComment("A link to the styling field group.");
            entity.Property(e => e.StylingId).HasComment("A link to the styling.");

            entity.HasOne(d => d.StylingFieldGroupStyling).WithMany(p => p.StylingCondition)
                .HasForeignKey(d => new { d.StylingFieldGroupId, d.StylingId })
                .HasConstraintName("FK_StylingCondition_01");
        });

        modelBuilder.Entity<StylingFieldGroup>(entity =>
        {
            entity.HasKey(e => e.StylingFieldGroupId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("StylingFieldGroup", "AcqPresentation", tb => tb.HasComment("Details the styling field groups defined in the system. This allows a group of compound fields to be styled in the same way."));

            entity.HasIndex(e => e.Name, "UQ_StylingFieldGroup_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.StylingFieldGroupId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasComment("A description of the styling field group.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the styling field group.");

            entity.HasMany(d => d.CompoundField).WithMany(p => p.StylingFieldGroup)
                .UsingEntity<Dictionary<string, object>>(
                    "StylingFieldGroupField",
                    r => r.HasOne<CompoundField>().WithMany()
                        .HasForeignKey("CompoundFieldId")
                        .HasConstraintName("FK_StylingFieldGroupField_01"),
                    l => l.HasOne<StylingFieldGroup>().WithMany()
                        .HasForeignKey("StylingFieldGroupId")
                        .HasConstraintName("FK_StylingFieldGroupField_02"),
                    j =>
                    {
                        j.HasKey("StylingFieldGroupId", "CompoundFieldId").HasAnnotation("SqlServer:FillFactor", 80);
                        j.ToTable("StylingFieldGroupField", "AcqPresentation", tb => tb.HasComment("Details the compound fields which belong to the given styling field group."));
                        j.IndexerProperty<int>("StylingFieldGroupId").HasComment("A link to the related styling field group.");
                        j.IndexerProperty<int>("CompoundFieldId").HasComment("A link to the compound field which belongs to the given styling field group.");
                    });
        });

        modelBuilder.Entity<StylingFieldGroupStyling>(entity =>
        {
            entity.HasKey(e => new { e.StylingFieldGroupId, e.StylingId }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("StylingFieldGroupStyling", "AcqPresentation", tb => tb.HasComment("Defines, for a given styling field group, which stylings the data can be displayed in."));

            entity.Property(e => e.StylingFieldGroupId).HasComment("A link to the styling field group.");
            entity.Property(e => e.StylingId).HasComment("A link to the styling.");

            entity.HasOne(d => d.StylingFieldGroup).WithMany(p => p.StylingFieldGroupStyling)
                .HasForeignKey(d => d.StylingFieldGroupId)
                .HasConstraintName("FK_StylingFieldGroupStyling_01");

            entity.HasOne(d => d.Styling).WithMany(p => p.StylingFieldGroupStyling)
                .HasForeignKey(d => d.StylingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StylingFieldGroupStyling_02");
        });

        modelBuilder.Entity<StylingStylingType>(entity =>
        {
            entity.HasKey(e => new { e.StylingId, e.StylingType }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("StylingStylingType", "AcqPresentation", tb => tb.HasComment("Details what styling types (e.g. Fill, Curve, Bar) apply to each styling."));

            entity.Property(e => e.StylingId).HasComment("A link to the related styling.");
            entity.Property(e => e.StylingType)
                .HasMaxLength(50)
                .HasComment("The styling type related to the styling (e.g. Fill, Curve).");

            entity.HasOne(d => d.Styling).WithMany(p => p.StylingStylingType)
                .HasForeignKey(d => d.StylingId)
                .HasConstraintName("FK_StylingStylingType_01");
        });

        modelBuilder.Entity<TEMP_DESPATCH_FE>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_DESPATCH_FE", "dbo");

            entity.Property(e => e.FE_DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.FE_LABANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FE_LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FE_LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FE_RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FE_SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TEMP_DESPATCH_SE>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_DESPATCH_SE", "dbo");

            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SE_DESPATCHNO)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.SE_LABANALYSISMETHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SE_LABCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SE_LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SE_RETURNDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SE_SENDDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TEMP_GEOPHYS>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEMP_GEOPHYS", "dbo");

            entity.Property(e => e.DEPTH).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.DEPTHSTEP).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TENEMENT>(entity =>
        {
            entity.HasKey(e => e.TENEMENTID)
                .HasName("PRIMARYKEYTENEMENT")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("TENEMENT", "dbo", tb =>
                {
                    tb.HasComment("Tenement refers to the actual ground / tenement / lease that has been granted to the company, by the government, for exploration and / or mining. Particulars about each tenement (the anniversary date, the expiry date and so on) can be stored in TenementCode and TenementDetails. ");
                    tb.HasTrigger("T_T_CAS");
                    tb.HasTrigger("T_T_UCAS");
                });

            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A unique identifying name and primary key of a tenement.");
            entity.Property(e => e.ACTIVE)
                .HasDefaultValue((byte)1)
                .HasComment("Whether or not the tenement is active.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The verbose description of the tenement.");
            entity.Property(e => e.LICENCENUMBER)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The official code the tenement is registered under.");
            entity.Property(e => e.LICENCETYPE)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The type of licence, for example Exploration or Mining.");
        });

        modelBuilder.Entity<TENEMENTBIGCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.TENEMENTID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("TENEMENTBIGCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("BigComment table associated with Tenement table in the Tenements compound definition. ");
                    tb.HasTrigger("T_TENEMENTBIGCOMMENT_IU");
                });

            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A unique identifying name and part of the primary key of a tenement.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of the virtual big comment field, part of primary key.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The value of the big comment virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.TENEMENTBIGCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TENEMENTBIGCOMMENT_01");
        });

        modelBuilder.Entity<TENEMENTBIGCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("TENEMENTBIGCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Virtual fields defined for the Tenements compound definitions. ");
                    tb.HasTrigger("T_TENEMENTBIGCOMMENTCODE_IU");
                    tb.HasTrigger("T_TENEMENTBIGCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The unique name of a virtual field.");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The description of a virtual field.");
        });

        modelBuilder.Entity<TENEMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME)
                .HasName("PRIMARYKEYTENCODE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("TENEMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("TenementCode lists the possible information topics that can be associated with a tenement / ground holding - for example, the joint venture partners, the anniversary date, the date of expiry and so on. The list or the records become field names (virtual fields) in some compound forms. Data is stored in these fields in TenementDetails. ");
                    tb.HasTrigger("T_TENEMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_TENEMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.TENEMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TENCODE54DATATYPE");
        });

        modelBuilder.Entity<TENEMENTCOMMENT>(entity =>
        {
            entity.HasKey(e => new { e.TENEMENTID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("TENEMENTCOMMENT", "dbo", tb =>
                {
                    tb.HasComment("Store a comment associated with a tenement in the Tenements compound definition. ");
                    tb.HasTrigger("T_TC_VAL");
                });

            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A unique identifying name and part of the primary key of a tenement.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a virtual field, also part of primary key.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false)
                .HasComment("The mandatory value of a virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.TENEMENTCOMMENT)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TENEMENTCOMMENT_NAME");
        });

        modelBuilder.Entity<TENEMENTCOMMENTCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("TENEMENTCOMMENTCODE", "dbo", tb =>
                {
                    tb.HasComment("Virtual fields defined for the Tenements compound definitions. ");
                    tb.HasTrigger("T_TENEMENTCOMMENTCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_TENEMENTCOMMENTCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.TENEMENTCOMMENTCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TENEMENTCOMCODE_DATATYPE");
        });

        modelBuilder.Entity<TENEMENTDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.TENEMENTID, e.NAME })
                .HasName("PK_TENEMENTDETAILS_1__10")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("TENEMENTDETAILS", "dbo", tb =>
                {
                    tb.HasComment("TenementDetails stores the actual information for the records/items listed in TenementCode. For example: TenementID Name ValueE16/123 ExpDate 21-Apr-1998E16/123 Partners Weston Mining NLE18/ 66 ExpDate 01-Jan-2000E18/66 Partners Boyle Mining NL\\r\\nThis information is assigned to a tenement via TenementID.");
                    tb.HasTrigger("T_TD_VAL");
                });

            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("A unique identifying name and part of the primary key of a tenement.");
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("The name of a virtual field, also part of primary key.");
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("The mandatory value of a virtual field.");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.TENEMENTDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("TENEMENTDETAILS01TENCODENAME");
        });

        modelBuilder.Entity<TEST_MERGE>(entity =>
        {
            entity.HasKey(e => new { e.HOLEID, e.PROJECTCODE }).HasName("PK_ALL");

            entity.ToTable("TEST_MERGE", "dbo");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ACTUAL_RIGID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ARCHIVED_SURVEY_BY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ARCHIVED_SURVEY_DATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ARCHIVE_SURVEY_METHD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ARCHIVE_SURVEY_VALID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ASSAYS_VALID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CLEARED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CLEARING_STATUS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_COLLAR)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_DRILLEQUIPREC)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_DUPSELECTED)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_HOLECOLLARED)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_HOLEPLUGGED)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_MEASURERECORD)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_PEGLABELLED)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_PLANDEPTHREACH)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_PLANNEDCOLLAR)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_PLUGLABELLED)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_REHAB)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_SAMPSIZEINSPEC)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_STANDARDINSERT)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_STANDARDSPIKED)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_SURVEYPICKUP)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_TECHNICIAN)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_WATER)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_WATER_READING)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.CMNTS_WATER_TABLE)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.COLLAR_CUT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COLLAR_VALID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COMPUTER_NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATA_SRCE_COLL)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DATA_SRCE_DHSURV)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DATA_SRCE_METADATA)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DATA_SRCE_REHAB)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DATA_SRCE_WATER)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DATA_SRCE_WTR_COND)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DATA_SRCE_WTR_READNG)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.DATE_SCARIFIED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATE_WATER_MEAS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESTROYED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DH_GEOPHYS_COMPANY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DIPPING_STATUS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DND)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DRILLED_PEG_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DRILLEQUIPRECOVERED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DRILLHOLETYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DRILLPATTERN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DRUM_DESTROYED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DRUM_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATESELECTED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EXEMPTREHAB)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GDA)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GDP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GEOL_INTERP_VALID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPSCUT_BY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPS_HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GRIDNAME)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HISTORIC_HOLE_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLECOLLARED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEPLUGGED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HOLE_CLEARED_BY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLE_EXPORTED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLE_PEGGED_BY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLE_PURPOSE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLE_STATUS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLE_VALIDATED_BY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LANDFILL_ANALYSIS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LITH_VALID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOGGING_COMPLETE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOGGING_GEO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MACHINE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MEASUREDRILLRECORDED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.METALS_ANALYSIS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MINE_PLAN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MODEL_STATUS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MOISTURETEST)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OIL_SPILLS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ORIGINAL_TENEMENTID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PAD_REHAB)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PARENT_HOLE_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PEGGED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PEGLABELLED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PEG_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PEG_MARKED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PHOTOGRAPHED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PLANDEPTHREACHED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PLANNED_AREA)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PLN_YEAR_201508_LOMP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PLN_YRMN_201508_LOMP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PLN_YRQT_201508_LOMP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PLUGLABELLED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.POW)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PRECOLLARTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROGRAM_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROPOSED_BY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROSPECT)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.REHABBED_BY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.REJ_DEF_REASON)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RELIABILITY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RESPONSIBLE_PERSON)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RISK_NOTES)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.RUBBISH)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLE_STORED_BY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPSIZEINSPECTED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SELENIUM)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDINSERTED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STANDARDSPIKED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SUBREGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SUMP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SURVEYVALIDATED_DATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SURVEY_BY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SURVEY_DATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SURVEY_METHOD)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SURVEY_VALIDBY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TAILTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TENEMENTID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TESTING_REQUIRED)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TWIN1_HOLE_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TWIN2_HOLE_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.WATER_AREA)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.WATER_LEVELS)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.WATER_MEASURED_BY)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.WATER_TABLE_RELIABLE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.WATER_TABLE_VALID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.WATER_VALID_NOTES)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.WHO_MODIFIED)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TableCategory>(entity =>
        {
            entity.HasKey(e => e.TableCategoryId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("TableCategory", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the category of the table.");
                    tb.HasTrigger("T_TableCategory_OD");
                });

            entity.HasIndex(e => e.Name, "UQ_TableCategory_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.TableCategoryId)
                .ValueGeneratedNever()
                .HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The Name of the category, (all tables).");
            entity.Property(e => e.ParentTableCategoryId).HasComment("The Parent category if this category is the child of another category.");

            entity.HasOne(d => d.ParentTableCategory).WithMany(p => p.InverseParentTableCategory)
                .HasForeignKey(d => d.ParentTableCategoryId)
                .HasConstraintName("FK_TableCategory_01");
        });

        modelBuilder.Entity<Template>(entity =>
        {
            entity.HasKey(e => e.TemplateId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Template", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the templates available including their code behind. This is for 4.x backward compatibility only.");
                    tb.HasTrigger("T_Template_OD");
                });

            entity.HasIndex(e => e.Name, "UQ_Template_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.TemplateId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .HasComment("The Name of the Template.");
            entity.Property(e => e.TemplateCode).HasComment("The code to be used for this template.");
        });

        modelBuilder.Entity<TextResource>(entity =>
        {
            entity.HasKey(e => e.TextResourceId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("TextResource", "AcqManagement", tb => tb.HasComment("Localization resources for entities."));

            entity.HasIndex(e => new { e.Language, e.Country }, "IDX_TextResource_01").HasFillFactor(80);

            entity.HasIndex(e => new { e.EntityType, e.EntityId, e.EntityField }, "IDX_TextResource_02").HasFillFactor(80);

            entity.HasIndex(e => new { e.EntityType, e.EntityId, e.EntityField, e.Language, e.Country }, "UQ_TextResource_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.TextResourceId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Country)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO 3166 two letter country code.");
            entity.Property(e => e.EntityField)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The Field within the entity that the value represents.");
            entity.Property(e => e.EntityId).HasComment("The surrogate key id of the entity owning the value.");
            entity.Property(e => e.EntityType)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The Type of Entity owning the value.");
            entity.Property(e => e.Language)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("ISO 639-1 two letter language code.");
            entity.Property(e => e.Value)
                .IsRequired()
                .HasMaxLength(400)
                .HasComment("The localized text.");
        });

        modelBuilder.Entity<Transform>(entity =>
        {
            entity.ToTable("Transform", "AcqCoordinates", tb => tb.HasComment("A transform employed for coordinates."));

            entity.HasIndex(e => e.Name, "UQ_Transform_01").IsUnique();

            entity.Property(e => e.TransformId).HasComment("The auto incrementing primary key.");
            entity.Property(e => e.Definition)
                .IsRequired()
                .HasComment("The XML definition of the transform.")
                .HasColumnType("xml");
            entity.Property(e => e.Description).HasComment("A description of the transform.");
            entity.Property(e => e.FromDatumId).HasComment("Id of datum this transforms from.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The unique name given to the transform.");
            entity.Property(e => e.ToDatumId).HasComment("Id of datum this transforms to.");

            entity.HasOne(d => d.FromDatum).WithMany(p => p.TransformFromDatum)
                .HasForeignKey(d => d.FromDatumId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Transform_01");

            entity.HasOne(d => d.ToDatum).WithMany(p => p.TransformToDatum)
                .HasForeignKey(d => d.ToDatumId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Transform_02");
        });

        modelBuilder.Entity<UNITCONVERSION1>(entity =>
        {
            entity.HasKey(e => new { e.UNITSFROM, e.UNITSTO }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("UNITCONVERSION", "dbo", tb =>
                {
                    tb.HasComment(" Data loading order: 3 ");
                    tb.HasTrigger("T_UNITCONVERSION_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.UNITSFROM)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UNITSTO)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MULTIPLIER).HasDefaultValue(1.0);

            entity.HasOne(d => d.UNITSFROMNavigation).WithMany(p => p.UNITCONVERSION1UNITSFROMNavigation)
                .HasForeignKey(d => d.UNITSFROM)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UNITCONVERSION_UNITSFROM");

            entity.HasOne(d => d.UNITSTONavigation).WithMany(p => p.UNITCONVERSION1UNITSTONavigation)
                .HasForeignKey(d => d.UNITSTO)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UNITCONVERSION_UNITSTO");
        });

        modelBuilder.Entity<UNITS>(entity =>
        {
            entity.HasKey(e => e.UNITS1).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("UNITS", "dbo", tb =>
                {
                    tb.HasComment("A reference table. Define the units that may be associated with data in other areas in the database. ");
                    tb.HasTrigger("T_UNITS_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.UNITS1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UNITS");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITSTYPE)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.UNITSTYPENavigation).WithMany(p => p.UNITS)
                .HasForeignKey(d => d.UNITSTYPE)
                .HasConstraintName("FK_UNITS_UNITSTYPE");
        });

        modelBuilder.Entity<UNITSTYPE>(entity =>
        {
            entity.HasKey(e => e.UNITSTYPE1).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("UNITSTYPE", "dbo", tb => tb.HasComment("A reference table. Define the units that may be associated with data in other areas in the database. "));

            entity.Property(e => e.UNITSTYPE1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UNITSTYPE");
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Unit>(entity =>
        {
            entity.HasKey(e => e.UnitId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("Unit", "AcqMetaSystem", tb => tb.HasComment("Details the units the meta system is aware of."));

            entity.HasIndex(e => e.Abbreviation, "UQ_Unit_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.UnitId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Abbreviation)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("Standard abbreviation of the unit.");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .HasComment("Description of the unit's purpose.");
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("Full name of the unit.");
            entity.Property(e => e.IsInternal).HasComment("Is this a built-in unit that cannot be deleted.");
            entity.Property(e => e.IsMetric).HasComment("Is this unit in the metric system.");
            entity.Property(e => e.Symbol)
                .HasMaxLength(10)
                .HasComment("Symbol used for the unit.");
            entity.Property(e => e.UnitType)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The unit type, e.g. Mass, Volume, etc.");
        });

        modelBuilder.Entity<UnitConversion>(entity =>
        {
            entity.HasKey(e => e.UnitConversionId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("UnitConversion", "AcqMetaSystem", tb => tb.HasComment("Details the units the meta system is aware of."));

            entity.HasIndex(e => new { e.SourceId, e.TargetId }, "IDX_UnitConversion_01").HasFillFactor(80);

            entity.HasIndex(e => new { e.SourceId, e.TargetId }, "UQ_UnitConversion_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.UnitConversionId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.Conversion)
                .IsRequired()
                .HasComment("Expression to perform the conversion.")
                .HasColumnType("xml");
            entity.Property(e => e.SourceId).HasComment("Id of the source unit.");
            entity.Property(e => e.TargetId).HasComment("Id of the target unit.");

            entity.HasOne(d => d.Source).WithMany(p => p.UnitConversionSource)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnitConversion_01");

            entity.HasOne(d => d.Target).WithMany(p => p.UnitConversionTarget)
                .HasForeignKey(d => d.TargetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnitConversion_02");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("User", "AcqPresentation", tb =>
                {
                    tb.HasComment("The Users of the system.");
                    tb.HasTrigger("T_User_OD");
                });

            entity.HasIndex(e => e.UserName, "IDX_User_01").HasFillFactor(80);

            entity.HasIndex(e => e.UserLogin, "UQ_User_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.UserId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.DefaultProfileId).HasComment("The users default profile.");
            entity.Property(e => e.Description).HasComment("The Description of the user.");
            entity.Property(e => e.IsDisabled).HasComment("Is the user Disabled.");
            entity.Property(e => e.Settings)
                .HasComment("The xml data containing all the settings for the user.")
                .HasColumnType("xml");
            entity.Property(e => e.UserLogin)
                .IsRequired()
                .HasMaxLength(254)
                .HasComment("The Users Login (user id).");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(254)
                .HasComment("The name of the user.");

            entity.HasOne(d => d.DefaultProfile).WithMany(p => p.User)
                .HasForeignKey(d => d.DefaultProfileId)
                .HasConstraintName("FK_User_01");

            entity.HasMany(d => d.Role).WithMany(p => p.User)
                .UsingEntity<Dictionary<string, object>>(
                    "UserRole",
                    r => r.HasOne<Role>().WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_01"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserRole_02"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId").HasAnnotation("SqlServer:FillFactor", 80);
                        j.ToTable("UserRole", "AcqPresentation", tb => tb.HasComment("Details the Roles a user is associated with."));
                        j.IndexerProperty<int>("UserId").HasComment("The user.");
                        j.IndexerProperty<int>("RoleId").HasComment("The Role the user is associated with.");
                    });
        });

        modelBuilder.Entity<UserObjectCategory>(entity =>
        {
            entity.HasKey(e => e.UserObjectCategoryId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("UserObjectCategory", "AcqPresentation", tb =>
                {
                    tb.HasComment("Stores details of the categories that can be used to group objects for displaying to the user.");
                    tb.HasTrigger("T_UserObjectCategory_IU");
                    tb.HasTrigger("T_UserObjectCategory_OD");
                    tb.HasTrigger("T_UserObjectCategory_OIU");
                });

            entity.HasIndex(e => new { e.Name, e.ParentUserObjectCategoryId, e.UserId }, "UQ_UserObjectCategory_01")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.UserObjectCategoryId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.DataSourceId)
                .HasDefaultValueSql("([AcqMetaSystem].[GetManualDataSourceId]())")
                .HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.IsHidden).HasComment("Whether or not this category should be hidden from users.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("The name of the category.");
            entity.Property(e => e.OrderNumber).HasComment("The order in which the category should be displayed within its parent category.");
            entity.Property(e => e.ParentUserObjectCategoryId).HasComment("The parent user object category, if there is one.");
            entity.Property(e => e.UserId).HasComment("The user this category belongs to. If null, the category is public.");

            entity.HasOne(d => d.DataSource).WithMany(p => p.UserObjectCategory)
                .HasForeignKey(d => d.DataSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserObjectCategory_03");

            entity.HasOne(d => d.ParentUserObjectCategory).WithMany(p => p.InverseParentUserObjectCategory)
                .HasForeignKey(d => d.ParentUserObjectCategoryId)
                .HasConstraintName("FK_UserObjectCategory_01");

            entity.HasOne(d => d.User).WithMany(p => p.UserObjectCategory)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserObjectCategory_02");
        });

        modelBuilder.Entity<VSCORE>(entity =>
        {
            entity.HasKey(e => e.CID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("VSCORE", "dbo", tb =>
                {
                    tb.HasTrigger("T_VSCORE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_VSCORE_P_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_VSCORE_U");
                });

            entity.Property(e => e.CID).ValueGeneratedNever();

            entity.HasOne(d => d.PIDNavigation).WithMany(p => p.VSCORE)
                .HasForeignKey(d => d.PID)
                .HasConstraintName("FK_VSCORE_VSCOREREF");
        });

        modelBuilder.Entity<VSCORECODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("VSCORECODE", "dbo", tb => tb.HasTrigger("T_VSCORECODE_IU"));

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VSCOREDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.CID, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("VSCOREDETAILS", "dbo");

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CIDNavigation).WithMany(p => p.VSCOREDETAILS)
                .HasForeignKey(d => d.CID)
                .HasConstraintName("FK_VSCOREDETAILS_VSCORE");

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.VSCOREDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VSCOREDETAILS_VSCORECODE");
        });

        modelBuilder.Entity<VSCOREFIELD>(entity =>
        {
            entity.HasKey(e => new { e.FIELDTABLE, e.FIELDNAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("VSCOREFIELD", "dbo", tb =>
                {
                    tb.HasTrigger("T_VSCOREFIELD_D");
                    tb.HasTrigger("T_VSCOREFIELD_IU");
                    tb.HasTrigger("T_VSCOREFIELD_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_VSCOREFIELD_P_CACHE_UPDATE_IUD");
                });

            entity.HasIndex(e => e.PID, "IDX_VSCOREFIELD_01").HasFillFactor(80);

            entity.HasIndex(e => e.CTYPE, "IDX_VSCOREFIELD_02").HasFillFactor(80);

            entity.HasIndex(e => e.FIELDTABLE, "IDX_VSCOREFIELD_03").HasFillFactor(80);

            entity.Property(e => e.FIELDTABLE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FIELDNAME)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EXTERNALFIELD)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EXTERNALTABLE)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CTYPENavigation).WithMany(p => p.VSCOREFIELD)
                .HasForeignKey(d => d.CTYPE)
                .HasConstraintName("FK_VSCOREFIELD_VSTYPE");

            entity.HasOne(d => d.PIDNavigation).WithMany(p => p.VSCOREFIELD)
                .HasForeignKey(d => d.PID)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_VSCOREFIELD_VSCOREREF");
        });

        modelBuilder.Entity<VSCOREIDENTITY>(entity =>
        {
            entity.HasKey(e => e.VSCID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("VSCOREIDENTITY", "dbo");

            entity.Property(e => e.DUMMY)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VSCORELOOKUP>(entity =>
        {
            entity.HasKey(e => e.CID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("VSCORELOOKUP", "dbo", tb =>
                {
                    tb.HasTrigger("T_VSCORELOOKUP_D");
                    tb.HasTrigger("T_VSCORELOOKUP_I");
                    tb.HasTrigger("T_VSCORELOOKUP_IU");
                    tb.HasTrigger("T_VSCORELOOKUP_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_VSCORELOOKUP_P_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_VSCORELOOKUP_U");
                });

            entity.HasIndex(e => e.LOOKUP, "IDX_VSCORELOOKUP_01").HasFillFactor(80);

            entity.Property(e => e.CID).ValueGeneratedNever();
            entity.Property(e => e.ACTIVE).HasDefaultValue((byte)1);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.LOOKUP)
                .IsRequired()
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.REPORTDESC)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.SUBGROUP)
                .HasMaxLength(254)
                .IsUnicode(false);

            entity.HasOne(d => d.CIDNavigation).WithOne(p => p.VSCORELOOKUP)
                .HasForeignKey<VSCORELOOKUP>(d => d.CID)
                .HasConstraintName("FK_VSCORELOOKUP_VSCORE");
        });

        modelBuilder.Entity<VSCORERANGE>(entity =>
        {
            entity.HasKey(e => e.CID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("VSCORERANGE", "dbo", tb =>
                {
                    tb.HasTrigger("T_VSCORERANGE_D");
                    tb.HasTrigger("T_VSCORERANGE_I");
                    tb.HasTrigger("T_VSCORERANGE_IU");
                    tb.HasTrigger("T_VSCORERANGE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_VSCORERANGE_P_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_VSCORERANGE_U");
                });

            entity.HasIndex(e => e.LUBOUNDS, "IDX_VSCORERANGE_01").HasFillFactor(80);

            entity.Property(e => e.CID).ValueGeneratedNever();
            entity.Property(e => e.DMAX)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.DMIN)
                .HasMaxLength(12)
                .IsUnicode(false);

            entity.HasOne(d => d.CIDNavigation).WithOne(p => p.VSCORERANGE)
                .HasForeignKey<VSCORERANGE>(d => d.CID)
                .HasConstraintName("FK_VSCORERANGE_VSCORE");
        });

        modelBuilder.Entity<VSCOREREF>(entity =>
        {
            entity.HasKey(e => e.PID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("VSCOREREF", "dbo", tb =>
                {
                    tb.HasTrigger("T_VSCOREREF_P_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_VSCOREREF_U");
                });

            entity.HasIndex(e => e.PIDNAME, "UQ_VSCOREREF")
                .IsUnique()
                .HasFillFactor(80);

            entity.Property(e => e.PID).ValueGeneratedNever();
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.PIDNAME)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VSCOREREFIDENTITY>(entity =>
        {
            entity.HasKey(e => e.VSPID).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("VSCOREREFIDENTITY", "dbo");

            entity.Property(e => e.DUMMY)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VSPROJECT>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.CID }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("VSPROJECT", "dbo", tb =>
                {
                    tb.HasTrigger("T_VSPROJECT_IU");
                    tb.HasTrigger("T_VSPROJECT_MS_CACHE_UPDATE_IUD");
                });

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.CIDNavigation).WithMany(p => p.VSPROJECT)
                .HasForeignKey(d => d.CID)
                .HasConstraintName("FK_VSPROJECT_VSCORE");
        });

        modelBuilder.Entity<VSSTYLING>(entity =>
        {
            entity.HasKey(e => new { e.CID, e.STID }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("VSSTYLING", "dbo", tb =>
                {
                    tb.HasTrigger("T_VSSTYLING_D");
                    tb.HasTrigger("T_VSSTYLING_IU");
                    tb.HasTrigger("T_VSSTYLING_P_CACHE_UPDATE_IUD");
                });

            entity.HasIndex(e => e.CID, "IDX_VSSTYLING_01").HasFillFactor(80);

            entity.HasIndex(e => e.STID, "IDX_VSSTYLING_02").HasFillFactor(80);

            entity.HasIndex(e => e.BLANK, "IDX_VSSTYLING_03").HasFillFactor(80);

            entity.Property(e => e.FONT)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.PATTERN)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CIDNavigation).WithMany(p => p.VSSTYLING)
                .HasForeignKey(d => d.CID)
                .HasConstraintName("FK_VSSTYLING_VSCORE");
        });

        modelBuilder.Entity<VSTYPE>(entity =>
        {
            entity.HasKey(e => e.CTYPE).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("VSTYPE", "dbo", tb => tb.HasTrigger("T_VSTYPE_MS_CACHE_UPDATE_IUD"));

            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VUL_COLLARS>(entity =>
        {
            entity.HasKey(e => e.HOLEID);

            entity.ToTable("VUL_COLLARS", "dbo");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ADJ_YEAR).HasComputedColumnSql("(case when datepart(year,[PD_201508_LOMP])<datepart(year,getdate()) then datepart(year,getdate()) else datepart(year,[PD_201508_LOMP]) end)", false);
            entity.Property(e => e.CAL_MONTH)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComputedColumnSql("(right('00'+CONVERT([varchar](2),datepart(month,[PD_201508_LOMP])),(2)))", false);
            entity.Property(e => e.CAL_YEAR).HasComputedColumnSql("(datepart(year,[PD_201508_LOMP]))", false);
            entity.Property(e => e.CMNTS_COLLAR).IsUnicode(false);
            entity.Property(e => e.COMMENTS_TECH).IsUnicode(false);
            entity.Property(e => e.DATE_CLEARED).HasColumnType("datetime");
            entity.Property(e => e.DATE_INTERP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATE_PEGGED).HasColumnType("datetime");
            entity.Property(e => e.DND)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DRILLED_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DSTAT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EAST).HasComputedColumnSql("(isnull(case when [SURV_EAST] IS NOT NULL then [SURV_EAST] when [MWD_EAST] IS NOT NULL then [MWD_EAST] when [PLAN_EAST] IS NOT NULL then [PLAN_EAST]  end,(-999)))", false);
            entity.Property(e => e.ENDDATE).HasColumnType("datetime");
            entity.Property(e => e.GDP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GEOPHYS_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GPH_SURVEY_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLE_STATUS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.INTERP_BY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LEASE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOGGED_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOGGEO_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MACHINE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MD_2013_LOM).HasColumnType("datetime");
            entity.Property(e => e.MD_201508_LOMP).HasColumnType("datetime");
            entity.Property(e => e.MD_2015_ACCEL).HasColumnType("datetime");
            entity.Property(e => e.MD_30MONTH).HasColumnType("datetime");
            entity.Property(e => e.MD_TAILS_2015).HasColumnType("datetime");
            entity.Property(e => e.MINE_PLAN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MODEL_AREA)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MODEL_RELEASE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MSTAT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MTH_PERIOD)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasComputedColumnSql("((CONVERT([char](4),datepart(year,[PD_201508_LOMP]))+'_')+right('00'+CONVERT([varchar](2),datepart(month,[PD_201508_LOMP])),(2)))", false);
            entity.Property(e => e.MWD_SURVEY_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NORTH).HasComputedColumnSql("(isnull(case when [SURV_NORTH] IS NOT NULL then [SURV_NORTH] when [MWD_NORTH] IS NOT NULL then [MWD_NORTH] when [PLAN_NORTH] IS NOT NULL then [PLAN_NORTH]  end,(-999)))", false);
            entity.Property(e => e.PATTERN)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasComputedColumnSql("(case when substring(CONVERT([varchar],CONVERT([int],[PLAN_EAST])),(6),(1))='5' then '25x25' when substring(CONVERT([varchar],CONVERT([int],[PLAN_EAST])),(5),(2))='50' then '50x50' when substring(CONVERT([varchar],CONVERT([int],[PLAN_EAST])),(5),(2))='00' then '100x100' else 'NA' end)", false);
            entity.Property(e => e.PD_201508_LOMP).HasColumnType("datetime");
            entity.Property(e => e.PHOTOS)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PHOTO_PATH).IsUnicode(false);
            entity.Property(e => e.PHOTO_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PLANNED_AREA)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PROGRAM_ID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.QTR)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasComputedColumnSql("('Q'+CONVERT([char],datepart(quarter,[PD_201508_LOMP])))", false);
            entity.Property(e => e.QTR_PERIOD)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasComputedColumnSql("((CONVERT([char](4),datepart(year,[PD_201508_LOMP]))+'_Q')+CONVERT([char],datepart(quarter,[PD_201508_LOMP])))", false);
            entity.Property(e => e.REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.REJDEF)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RIGID_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RL).HasComputedColumnSql("(isnull(case when [SURV_RL] IS NOT NULL then [SURV_RL] when [MWD_RL] IS NOT NULL then [MWD_RL] when [PLAN_RL] IS NOT NULL then [PLAN_RL]  end,(-999)))", false);
            entity.Property(e => e.RTK_SURVEY_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SHORTID)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComputedColumnSql("(case when [HOLEID] like 'RHRC%' then right([HOLEID],len([HOLEID])-(4))  end)", true);
            entity.Property(e => e.STARTDATE).HasColumnType("datetime");
            entity.Property(e => e.SUB_REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SUMP)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComputedColumnSql("(case when (CONVERT([float],[PLANNED_DEPTH])-CONVERT([float],[WATER_DEPTH]))>(6) then 'YES' else 'NO' end)", false);
            entity.Property(e => e.SURVEY_YN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TWIN_IDS)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasDefaultValue("NA");
            entity.Property(e => e.TYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALIDATED_DATE).HasColumnType("datetime");
            entity.Property(e => e.VALID_BY)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VW_B_Samples_Available>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VW_B_Samples_Available", "dbo");

            entity.Property(e => e.Drum_ID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VW_SamplePickup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VW_SamplePickup", "dbo");

            entity.Property(e => e.GDP)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<View>(entity =>
        {
            entity.HasKey(e => e.ViewId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("View", "AcqPresentation", tb =>
                {
                    tb.HasComment("Details information pertaining to a saved View.");
                    tb.HasTrigger("T_View_IU");
                    tb.HasTrigger("T_View_OD");
                });

            entity.HasIndex(e => e.Label, "IDX_View_01");

            entity.HasIndex(e => e.ViewGlobalId, "UQ_View_01").IsUnique();

            entity.Property(e => e.ViewId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.CanvasId).HasComment("The Canvas that this view belongs to.");
            entity.Property(e => e.CreatorId).HasComment("The Creator of the View.");
            entity.Property(e => e.DataSourceId)
                .HasDefaultValueSql("([AcqMetaSystem].[GetManualDataSourceId]())")
                .HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.IsReadOnly).HasComment("A flag specifying whether or not the record should be able to be updated.");
            entity.Property(e => e.IsWebEnabled).HasComment("Flag indicating whether this view is available for viewing in a web application.");
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("The Label for the View.");
            entity.Property(e => e.Tags)
                .HasMaxLength(500)
                .HasComment("Comma separated tags identifying the purpose of the view to allow simple searches.");
            entity.Property(e => e.ViewData)
                .IsRequired()
                .HasComment("The xml data comprising the View.")
                .HasColumnType("xml");
            entity.Property(e => e.ViewGlobalId)
                .HasDefaultValueSql("(newid())")
                .HasComment("A globally unique identifier which can be used to identify the view, even if it is copied or moved between databases.");

            entity.HasOne(d => d.Canvas).WithMany(p => p.View)
                .HasForeignKey(d => d.CanvasId)
                .HasConstraintName("FK_View_01");

            entity.HasOne(d => d.Creator).WithMany(p => p.View)
                .HasForeignKey(d => d.CreatorId)
                .HasConstraintName("FK_View_02");

            entity.HasOne(d => d.DataSource).WithMany(p => p.View)
                .HasForeignKey(d => d.DataSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_View_03");

            entity.HasMany(d => d.UserObjectCategory).WithMany(p => p.View)
                .UsingEntity<Dictionary<string, object>>(
                    "ViewUserObjectCategory",
                    r => r.HasOne<UserObjectCategory>().WithMany()
                        .HasForeignKey("UserObjectCategoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ViewUserObjectCategory_01"),
                    l => l.HasOne<View>().WithMany()
                        .HasForeignKey("ViewId")
                        .HasConstraintName("FK_ViewUserObjectCategory_02"),
                    j =>
                    {
                        j.HasKey("ViewId", "UserObjectCategoryId").HasAnnotation("SqlServer:FillFactor", 80);
                        j.ToTable("ViewUserObjectCategory", "AcqPresentation", tb =>
                            {
                                tb.HasTrigger("T_ViewUserObjectCategory_D");
                                tb.HasTrigger("T_ViewUserObjectCategory_IU");
                            });
                        j.HasIndex(new[] { "UserObjectCategoryId" }, "IDX_ViewUserObjectCategory_01");
                    });
        });

        modelBuilder.Entity<ViewCompound>(entity =>
        {
            entity.HasKey(e => e.ViewCompoundId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("ViewCompound", "AcqPresentation", tb =>
                {
                    tb.HasComment("Details information pertaining to the links between a saved view and the compounds that comprise it.");
                    tb.HasTrigger("T_ViewCompound_IUD_02");
                });

            entity.HasIndex(e => e.CompoundId, "IDX_ViewCompound_01");

            entity.Property(e => e.ViewCompoundId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.CompoundId).HasComment("A Compound used by the View. This is nullable such that, if the compound is temporarily deleted, the details of the view are not accidently deleted.");
            entity.Property(e => e.FilterId).HasComment("The FilterId related to this ViewCompound.");
            entity.Property(e => e.ViewCompoundData)
                .IsRequired()
                .HasComment("The xml data comprising the ViewCompound.")
                .HasColumnType("xml");
            entity.Property(e => e.ViewId).HasComment("The related View for the ViewCompound.");

            entity.HasOne(d => d.Filter).WithMany(p => p.ViewCompound)
                .HasForeignKey(d => d.FilterId)
                .HasConstraintName("FK_ViewCompound_02");

            entity.HasOne(d => d.View).WithMany(p => p.ViewCompound)
                .HasForeignKey(d => d.ViewId)
                .HasConstraintName("FK_ViewCompound_01");
        });

        modelBuilder.Entity<VirtualField>(entity =>
        {
            entity.HasKey(e => e.VirtualFieldId).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("VirtualField", "AcqMetaSystem", tb =>
                {
                    tb.HasComment("Details the virtual fields in the system and where their attributes and values are sourced.");
                    tb.HasTrigger("T_VirtualField_OD");
                });

            entity.HasIndex(e => e.ValueColumnId, "IDX_VirtualField_01").HasFillFactor(80);

            entity.HasIndex(e => new { e.Name, e.ValueColumnId, e.CodeColumnId }, "UQ_AcqMetaSystem_VirtualField_01").IsUnique();

            entity.Property(e => e.VirtualFieldId).HasComment("The auto incrementing integer primary key.");
            entity.Property(e => e.CodeColumnId).HasComment("The Code Column, the source of the attribute information for this virtual field.");
            entity.Property(e => e.CodeId).HasComment("If the primary key of the virtual code table is a surrogate integer, the value of that field for this virtual field.");
            entity.Property(e => e.CodeName)
                .HasMaxLength(100)
                .HasComment("The name of the virtual field without the multiple level information, so it can be tracked back to the relevant code table.");
            entity.Property(e => e.DataSourceId)
                .HasDefaultValueSql("([AcqMetaSystem].[GetManualDataSourceId]())")
                .HasComment("The data source which the details of this record were primarily obtained from.");
            entity.Property(e => e.Datatype)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("The Datatype of the virtual field.");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .HasComment("A description of the purpose of the virtual field.")
                .UseCollation("Latin1_General_CS_AS");
            entity.Property(e => e.IsParentCompulsory).HasComment("Is the parent virtual field value compulsory when trying to determine this virtual field.");
            entity.Property(e => e.IsReadOnly).HasComment("Whether the virtual field should be read only.");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("The Name of the virtual field, including any information pertaining to multiple levels.");
            entity.Property(e => e.ValueColumnId).HasComment("The value column, the source of the values for the virtual field.");

            entity.HasOne(d => d.CodeColumn).WithMany(p => p.VirtualFieldCodeColumn)
                .HasForeignKey(d => d.CodeColumnId)
                .HasConstraintName("FK_VirtualField_01");

            entity.HasOne(d => d.DataSource).WithMany(p => p.VirtualField)
                .HasForeignKey(d => d.DataSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VirtualField_03");

            entity.HasOne(d => d.ValueColumn).WithMany(p => p.VirtualFieldValueColumn)
                .HasForeignKey(d => d.ValueColumnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VirtualField_02");
        });

        modelBuilder.Entity<WATERCODE>(entity =>
        {
            entity.HasKey(e => e.NAME).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("WATERCODE", "dbo", tb =>
                {
                    tb.HasComment("Virtual field names are stored in this table for Water compound definitions. ");
                    tb.HasTrigger("T_WATERCODE_MS_CACHE_UPDATE_IUD");
                    tb.HasTrigger("T_WATERCODE_UI");
                });

            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DATATYPE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DESCRIPTION)
                .HasMaxLength(254)
                .IsUnicode(false);
            entity.Property(e => e.UNITS)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DATATYPENavigation).WithMany(p => p.WATERCODE)
                .HasForeignKey(d => d.DATATYPE)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WATERCODE_DATATYPE");
        });

        modelBuilder.Entity<WATERDETAILS>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.WATERFROM, e.WATERTO, e.WATERDATE, e.NAME }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("WATERDETAILS", "dbo", tb =>
                {
                    tb.HasComment("The virtual fields names and associated values are stored in this table. ");
                    tb.HasTrigger("LastModifiedUTWaterDetails");
                    tb.HasTrigger("T_WD_VAL");
                });

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.WATERDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NAME)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VALUE)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.NAMENavigation).WithMany(p => p.WATERDETAILS)
                .HasForeignKey(d => d.NAME)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WATERDETAILS_WATERCODE");
        });

        modelBuilder.Entity<WATERTABLE>(entity =>
        {
            entity.HasKey(e => new { e.PROJECTCODE, e.HOLEID, e.WATERFROM, e.WATERTO, e.WATERDATE }).HasAnnotation("SqlServer:FillFactor", 80);

            entity.ToTable("WATERTABLE", "dbo", tb =>
                {
                    tb.HasComment("The main table for Water compound forms. The Water set of tables are for technical studies of water on site. ");
                    tb.HasTrigger("LastModifiedUTWaterTable");
                    tb.HasTrigger("T_WT_CAS");
                    tb.HasTrigger("T_WT_CON_I");
                    tb.HasTrigger("T_WT_CON_U");
                });

            entity.Property(e => e.PROJECTCODE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.WATERDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.COMMENTS)
                .HasMaxLength(254)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WETCOMP>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("WETCOMP", "dbo");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLETYPE)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<_2024GeologyCodes>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("2024GeologyCodes", "dbo");

            entity.Property(e => e.Geology)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Geology_Short)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Hardness)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hardness_Short)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryLith)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryLith_Short)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SecondaryLith)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SecondaryLith_Short)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Texture)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Texture_Short)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<aaDHSamp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSamp", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSamp2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSamp2", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSampQC_DUP>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSampQC_DUP", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSampQC_DUP_P1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSampQC_DUP_P1", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSampQC_DUP_P2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSampQC_DUP_P2", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSampQC_LABCHCK>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSampQC_LABCHCK", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSampQC_LABCHCK_P1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSampQC_LABCHCK_P1", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSampQC_LABDUP>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSampQC_LABDUP", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSampQC_PULPREAS>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSampQC_PULPREAS", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSampQC_PULPSP>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSampQC_PULPSP", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSampQC_RESAMPLE>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSampQC_RESAMPLE", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSampQC_WETBULK>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSampQC_WETBULK", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSampQC_WETBULK_P1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSampQC_WETBULK_P1", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CHECKID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DUPLICATENO)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSamp_P1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSamp_P1", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSamp_P2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSamp_P2", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<aaDHSamp_P3>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSamp_P3", "dbo");

            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOADDATE).HasColumnType("datetime");
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<aaDHSamp_P3_V2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSamp_P3_V2", "dbo");

            entity.Property(e => e.DSC)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LABJOBNO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LOADDATE).HasColumnType("datetime");
            entity.Property(e => e.NAME)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<aaDHSamp_Quarantine>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aaDHSamp_Quarantine", "dbo");

            entity.Property(e => e.AssayResult)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DSC)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DataSet)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Element)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GenericMethod)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.LABJOBNO)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LOADDATE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LabCode)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LabElement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NAME)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OrigMethod)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Repeat)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.SAMPLEID)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.sysAssayStatus)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<r201_20191122>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("r201_20191122", "dbo");

            entity.Property(e => e.Date_Interpreted).HasColumnType("datetime");
            entity.Property(e => e.GEOZONE)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HOLEID)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Interpreted_By)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MODELRELEASE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PROJECTCODE)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Strand)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}