// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;

namespace RHOKSAutomationConsole.EFACQ;

/// <summary>
/// Defines a schedule that can be used to define when external tasks should be run.
/// </summary>
public partial class Schedule
{
    /// <summary>
    /// The auto incrementing integer primary key.
    /// </summary>
    public int ScheduleId { get; set; }

    /// <summary>
    /// The name of the schedule. This is not required.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// Whether the schedule is enabled (1) or disabled (0).
    /// </summary>
    public bool IsEnabled { get; set; }

    /// <summary>
    /// How frequently a task should be run for this schedule. This field is a bit flag.
    /// 					1  = Once only
    /// 					4  = Every day
    /// 					8  = Weekly (days of week can be specified by FrequencyInterval)
    /// 					16 = Monthly (the numbered day of the month will be specified by FrequencyInterval)
    /// 					32 = Monthly relative (FrequencyInterval and FrequencyRelativeInterval determine the days in the month)
    /// 				
    /// </summary>
    public int FrequencyType { get; set; }

    /// <summary>
    /// Further defines when a task should be run for this schedule. See the relevant
    /// 					freq_interval documentation at https://msdn.microsoft.com/en-us/library/ms178644.aspx.
    /// 				
    /// </summary>
    public int FrequencyInterval { get; set; }

    /// <summary>
    /// Further defines when a task should be run for this schedule. This is only used when
    /// 					FrequencyType is 32 (monthly relative). It&apos;s been modified slightly from SQL&apos;s implementation to
    /// 					cater for the 5th day of the month. This field is a bit flag.
    /// 					0  = Unused
    /// 					1  = First (e.g. First Wednesday every month)
    /// 					2  = Second
    /// 					4  = Third
    /// 					8  = Fourth
    /// 					16 = Fifth
    /// 					32 = Last
    /// 				
    /// </summary>
    public int FrequencyRelativeInterval { get; set; }

    /// <summary>
    /// The first date that a task or event occurs.
    /// </summary>
    public int ActiveStartDate { get; set; }

    /// <summary>
    /// The last date that a task or event can occur.
    /// </summary>
    public int? ActiveEndDate { get; set; }

    /// <summary>
    /// The time of day that a task using this schedule should be run.
    /// 					Time is formatted HHMMSS, using a 24-hour clock.
    /// 				
    /// </summary>
    public int ActiveStartTime { get; set; }

    /// <summary>
    /// The time of day that a task using this schedule should be terminated, if it is still running.
    /// 					Time is formatted HHMMSS, using a 24-hour clock.
    /// 				
    /// </summary>
    public int? ActiveEndTime { get; set; }

    public int? FrequencySubDayType { get; set; }

    public int? FrequencySubDayInterval { get; set; }

    public virtual ICollection<AdmJob> AdmJob { get; set; } = new List<AdmJob>();

    public virtual ICollection<CacheGroup> CacheGroup { get; set; } = new List<CacheGroup>();

    public virtual ICollection<PropertyObject> PropertyObjectGlobal { get; set; } = new List<PropertyObject>();
}