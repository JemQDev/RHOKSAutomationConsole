// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;

namespace RHOKSAutomationConsole.EFACQ;

/// <summary>
/// Details the virtual fields in the system and where their attributes and values are sourced.
/// </summary>
public partial class VirtualField
{
    /// <summary>
    /// The auto incrementing integer primary key.
    /// </summary>
    public int VirtualFieldId { get; set; }

    /// <summary>
    /// The Name of the virtual field, including any information pertaining to multiple levels.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// The value column, the source of the values for the virtual field.
    /// </summary>
    public int ValueColumnId { get; set; }

    /// <summary>
    /// The Code Column, the source of the attribute information for this virtual field.
    /// </summary>
    public int? CodeColumnId { get; set; }

    /// <summary>
    /// The name of the virtual field without the multiple level information, so it can be tracked back to the relevant code table.
    /// </summary>
    public string CodeName { get; set; }

    /// <summary>
    /// The Datatype of the virtual field.
    /// </summary>
    public string Datatype { get; set; }

    /// <summary>
    /// Is the parent virtual field value compulsory when trying to determine this virtual field.
    /// </summary>
    public bool IsParentCompulsory { get; set; }

    /// <summary>
    /// The data source which the details of this record were primarily obtained from.
    /// </summary>
    public short DataSourceId { get; set; }

    /// <summary>
    /// If the primary key of the virtual code table is a surrogate integer, the value of that field for this virtual field.
    /// </summary>
    public int? CodeId { get; set; }

    /// <summary>
    /// Whether the virtual field should be read only.
    /// </summary>
    public bool IsReadOnly { get; set; }

    /// <summary>
    /// A description of the purpose of the virtual field.
    /// </summary>
    public string Description { get; set; }

    public virtual DatabaseColumn CodeColumn { get; set; }

    public virtual ICollection<CompoundField> CompoundField { get; set; } = new List<CompoundField>();

    public virtual DataSource DataSource { get; set; }

    public virtual DatabaseColumn ValueColumn { get; set; }
}