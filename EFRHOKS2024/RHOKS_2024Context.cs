// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace RHOKSAutomationConsole.EFRHOKS2024;

public partial class RHOKS_2024Context : DbContext
{
    public RHOKS_2024Context(DbContextOptions<RHOKS_2024Context> options)
        : base(options)
    {
    }

    public virtual DbSet<ACQ_DRILLHOLES> ACQ_DRILLHOLES { get; set; }

    public virtual DbSet<CollarPickup> CollarPickup { get; set; }

    public virtual DbSet<Companies> Companies { get; set; }

    public virtual DbSet<CompanyTypes> CompanyTypes { get; set; }

    public virtual DbSet<CoordCheck> CoordCheck { get; set; }

    public virtual DbSet<DrillholePegging> DrillholePegging { get; set; }

    public virtual DbSet<LASData> LASData { get; set; }

    public virtual DbSet<LASHeader> LASHeader { get; set; }

    public virtual DbSet<LASParameter> LASParameter { get; set; }

    public virtual DbSet<MineSites> MineSites { get; set; }

    public virtual DbSet<PlodActivity> PlodActivity { get; set; }

    public virtual DbSet<PlodActivity1> PlodActivity1 { get; set; }

    public virtual DbSet<PlodAlerts> PlodAlerts { get; set; }

    public virtual DbSet<PlodAlerts1> PlodAlerts1 { get; set; }

    public virtual DbSet<PlodComments> PlodComments { get; set; }

    public virtual DbSet<PlodConsumables> PlodConsumables { get; set; }

    public virtual DbSet<PlodDetails> PlodDetails { get; set; }

    public virtual DbSet<PlodEquipment> PlodEquipment { get; set; }

    public virtual DbSet<PlodEquipment1> PlodEquipment1 { get; set; }

    public virtual DbSet<PlodHeader> PlodHeader { get; set; }

    public virtual DbSet<PlodHeader1> PlodHeader1 { get; set; }

    public virtual DbSet<PlodHole> PlodHole { get; set; }

    public virtual DbSet<PlodHoleDetails> PlodHoleDetails { get; set; }

    public virtual DbSet<RangerDrillRigs> RangerDrillRigs { get; set; }

    public virtual DbSet<RangerPlodActivity> RangerPlodActivity { get; set; }

    public virtual DbSet<RangerPlodConsumables> RangerPlodConsumables { get; set; }

    public virtual DbSet<ReportActivity> ReportActivity { get; set; }

    public virtual DbSet<ReportHeader> ReportHeader { get; set; }

    public virtual DbSet<Shifts> Shifts { get; set; }

    public virtual DbSet<WSGActivities> WSGActivities { get; set; }

    public virtual DbSet<WSGServices> WSGServices { get; set; }

    public virtual DbSet<WSGVehicles> WSGVehicles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ACQ_DRILLHOLES>(entity =>
        {
            entity.HasKey(e => new { e.HOLEID, e.DEPTH, e.STARTDEPTH, e.ENDDEPTH });

            entity.ToTable("ACQ_DRILLHOLES", "Admin");

            entity.Property(e => e.HOLEID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DrillingShift)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ExistingPlod).HasDefaultValue(false);
            entity.Property(e => e.GEO)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.GeoFull)
                .HasMaxLength(125)
                .IsUnicode(false);
            entity.Property(e => e.Geologist)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PLAN_REGION)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.PLAN_REGIONPIT)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PLAN_SUBREGIONPIT)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.REGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RIGID)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SUBREGION)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TABLET)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CollarPickup>(entity =>
        {
            entity.HasKey(e => new { e.Drillhole, e.DateCollarPickupFile, e.DateCollarPickup });

            entity.ToTable("CollarPickup", "Survey");

            entity.Property(e => e.Drillhole)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CollarPeggedEasting).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.CollarPeggedNorthing).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.CollarPeggedRL).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.CollarPickupComment)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CollarPickupEasting).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.CollarPickupMethod)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CollarPickupNorthing).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.CollarPickupRL).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.CollarPlannedEasting).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.CollarPlannedNorthing).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.CollarPlannedRL).HasColumnType("decimal(6, 3)");
        });

        modelBuilder.Entity<Companies>(entity =>
        {
            entity.HasKey(e => e.CompanyID);

            entity.ToTable("Companies", "Admin");

            entity.Property(e => e.CompanyID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CompanyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyType)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.CompanyTypeNavigation).WithMany(p => p.Companies)
                .HasForeignKey(d => d.CompanyType)
                .HasConstraintName("FK_Companies_CompanyTypes");
        });

        modelBuilder.Entity<CompanyTypes>(entity =>
        {
            entity.HasKey(e => e.CompanyTypeID);

            entity.ToTable("CompanyTypes", "Admin");

            entity.Property(e => e.CompanyTypeID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CompanyType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CoordCheck>(entity =>
        {
            entity.HasKey(e => e.HoleID).HasName("PK_PlodReportComparison");

            entity.ToTable("CoordCheck", "WSG");

            entity.Property(e => e.HoleID)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DrillholePegging>(entity =>
        {
            entity.HasKey(e => new { e.Drillhole, e.DatePegged, e.Easting, e.Northing }).HasName("PK_DrillholePegging_1");

            entity.Property(e => e.Drillhole)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Easting).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.Northing).HasColumnType("decimal(11, 3)");
            entity.Property(e => e.ClearedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.PeggedBy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RL).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.ReadyToDrill)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReadyToGrade)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LASData>(entity =>
        {
            entity.HasKey(e => e.WELL);

            entity.ToTable("LASData", "WSG");

            entity.Property(e => e.WELL)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.AZIMUTH).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.CALIPER).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.CAL_IRD_)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("CAL(IRD)");
            entity.Property(e => e.DENSITY).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.DENSITYH).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.DEN_CORR).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.DEN_CPS_IRD_)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("DEN_CPS(IRD)");
            entity.Property(e => e.DEN_IRD_)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("DEN(IRD)");
            entity.Property(e => e.DEPT).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.DIP).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.DISTANCE).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.EDEV).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.GAM_GAM)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("GAM-GAM");
            entity.Property(e => e.GAM_IRD_)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("GAM(IRD)");
            entity.Property(e => e.LSD).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.LSD_CORR).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.NDEV).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.RES_IRD_)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("RES(IRD)");
            entity.Property(e => e.SANG).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.SANGB).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.SSD).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.SUSCEP).HasColumnType("decimal(8, 2)");
        });

        modelBuilder.Entity<LASHeader>(entity =>
        {
            entity.HasKey(e => e.WELL);

            entity.ToTable("LASHeader", "WSG");

            entity.Property(e => e.WELL)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.CNTY)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.COMP)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.DATE)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FLD)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.LIC)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.LOC)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.NULL).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.SRVC)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.SRVY)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.STAT)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.STEP).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.STOP).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.STRT).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.UWI)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LASParameter>(entity =>
        {
            entity.HasKey(e => e.WELL);

            entity.ToTable("LASParameter", "WSG");

            entity.Property(e => e.WELL)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.ARTM)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.BS).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.CASB)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CASD).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.CASL)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CAST)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CASX)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DMF)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DPTM)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DTFL)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.EAST).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.FIID)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.FILE)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FPH)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.FTYP)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.LMF)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.LOGU)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.LOTD).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.MATR)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.MCRS)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.MCTP)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.MDEN).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.MFRF)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.MFTP)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.MRS).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.MST)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.MTP).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.MUDS)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.NRTH).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.PD)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.PDEV)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.RECB)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.RIGN)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.SRC)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.TRUK).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.VERS)
                .HasMaxLength(8)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MineSites>(entity =>
        {
            entity.HasKey(e => e.MineSiteID);

            entity.ToTable("MineSites", "Admin");

            entity.Property(e => e.MineSiteID)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MineSiteCompany)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MineSiteName)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.MineSiteCompanyNavigation).WithMany(p => p.MineSites)
                .HasForeignKey(d => d.MineSiteCompany)
                .HasConstraintName("FK_MineSites_Companies");
        });

        modelBuilder.Entity<PlodActivity>(entity =>
        {
            entity.HasKey(e => new { e.PlodID, e.ActivityLine, e.ActivityID }).HasName("PK_PlodActivity_1");

            entity.ToTable("PlodActivity", "Ranger");

            entity.HasOne(d => d.Plod).WithMany(p => p.PlodActivity)
                .HasForeignKey(d => d.PlodID)
                .HasConstraintName("FK_PlodActivity_DrillPlod");
        });

        modelBuilder.Entity<PlodActivity1>(entity =>
        {
            entity.HasKey(e => new { e.Vehicle, e.Date, e.HourFrom, e.HourTo, e.Activity }).HasName("PK__Activity__60369F310A7DD7D1");

            entity.ToTable("PlodActivity", "WSG");

            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HourFrom).HasPrecision(0);
            entity.Property(e => e.HourTo).HasPrecision(0);
            entity.Property(e => e.Activity)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.Density).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Dummy).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Geologist)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HoleCondition)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HoleID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Magsus).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.PlodHeader1).WithMany(p => p.PlodActivity1)
                .HasForeignKey(d => new { d.Vehicle, d.Date })
                .HasConstraintName("FK_Activity_DrillPlod");
        });

        modelBuilder.Entity<PlodAlerts>(entity =>
        {
            entity.HasKey(e => new { e.PlodID, e.AlertNumber }).HasName("PK_PlodAlerts_1");

            entity.ToTable("PlodAlerts", "Ranger");

            entity.Property(e => e.AlertDescription)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.AlertType)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Plod).WithMany(p => p.PlodAlerts)
                .HasForeignKey(d => d.PlodID)
                .HasConstraintName("FK_PlodAlerts_DrillPlod");
        });

        modelBuilder.Entity<PlodAlerts1>(entity =>
        {
            entity.HasKey(e => e.Vehicle);

            entity.ToTable("PlodAlerts", "WSG");

            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AlertDescription)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.AlertType)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PlodComments>(entity =>
        {
            entity.HasKey(e => e.PlodID);

            entity.ToTable("PlodComments", "Ranger");

            entity.Property(e => e.PlodID).ValueGeneratedNever();
            entity.Property(e => e.DrillerComment).IsUnicode(false);
            entity.Property(e => e.GeologistComment).IsUnicode(false);

            entity.HasOne(d => d.Plod).WithOne(p => p.PlodComments)
                .HasForeignKey<PlodComments>(d => d.PlodID)
                .HasConstraintName("FK_PlodComments_DrillPlod");
        });

        modelBuilder.Entity<PlodConsumables>(entity =>
        {
            entity.HasKey(e => new { e.PlodID, e.ConsumableLine });

            entity.ToTable("PlodConsumables", "Ranger");

            entity.Property(e => e.ConsumableUnit)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HoleNumber)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.Plod).WithMany(p => p.PlodConsumables)
                .HasForeignKey(d => d.PlodID)
                .HasConstraintName("FK_PlodConsumables_DrillPlod");
        });

        modelBuilder.Entity<PlodDetails>(entity =>
        {
            entity.HasKey(e => new { e.Vehicle, e.Date }).HasName("PK_Details");

            entity.ToTable("PlodDetails", "WSG");

            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DrillersInRod_m).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.InRod_m).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.OpenHole_m).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.PCTInRod).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.PCTLogged).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.PCTOpenHole).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TotalLogged_m).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.PlodHeader1).WithOne(p => p.PlodDetails)
                .HasForeignKey<PlodDetails>(d => new { d.Vehicle, d.Date })
                .HasConstraintName("FK_Details_DrillPlod");
        });

        modelBuilder.Entity<PlodEquipment>(entity =>
        {
            entity.HasKey(e => new { e.PlodID, e.EquipmentLine });

            entity.ToTable("PlodEquipment", "Ranger");

            entity.Property(e => e.EquipmentID)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.Plod).WithMany(p => p.PlodEquipment)
                .HasForeignKey(d => d.PlodID)
                .HasConstraintName("FK_PlodEquipment_DrillPlod");
        });

        modelBuilder.Entity<PlodEquipment1>(entity =>
        {
            entity.HasKey(e => new { e.Vehicle, e.Date, e.Service, e.Manufacturer, e.ToolType }).HasName("PK_Equipment");

            entity.ToTable("PlodEquipment", "WSG");

            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Service)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ToolType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SerialNumber)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.PlodHeader1).WithMany(p => p.PlodEquipment1)
                .HasForeignKey(d => new { d.Vehicle, d.Date })
                .HasConstraintName("FK_Equipment_DrillPlod");
        });

        modelBuilder.Entity<PlodHeader>(entity =>
        {
            entity.HasKey(e => e.DP_Plod).HasName("PK_DrillPlod_1");

            entity.ToTable("PlodHeader", "Ranger");

            entity.Property(e => e.DP_Plod).ValueGeneratedNever();
            entity.Property(e => e.DP_Geologist)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DP_Location)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DP_MineSite)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DP_Rig)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DP_Shift)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DP_MineSiteNavigation).WithMany(p => p.PlodHeader)
                .HasForeignKey(d => d.DP_MineSite)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DrillPlod_MineSites");

            entity.HasOne(d => d.DP_RigNavigation).WithMany(p => p.PlodHeader)
                .HasForeignKey(d => d.DP_Rig)
                .HasConstraintName("FK_DrillPlod_DrillRigs");

            entity.HasOne(d => d.DP_ShiftNavigation).WithMany(p => p.PlodHeader)
                .HasForeignKey(d => d.DP_Shift)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DrillPlod_Shifts");
        });

        modelBuilder.Entity<PlodHeader1>(entity =>
        {
            entity.HasKey(e => new { e.DP_Vehicle, e.DP_Date }).HasName("PK_DrillPlod");

            entity.ToTable("PlodHeader", "WSG");

            entity.Property(e => e.DP_Vehicle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DP_Client)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DP_Lease)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DP_Location)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.DP_Operator)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DP_Project)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PlodHole>(entity =>
        {
            entity.HasKey(e => new { e.PlodID, e.HoleLine, e.HoleNumber });

            entity.ToTable("PlodHole", "Ranger");

            entity.Property(e => e.HoleNumber)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Azi).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Dip).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DrillEnd).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DrillStart).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DrillTotal).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.HolePurpose)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.Plod).WithMany(p => p.PlodHole)
                .HasForeignKey(d => d.PlodID)
                .HasConstraintName("FK_PlodHole_DrillPlod");
        });

        modelBuilder.Entity<PlodHoleDetails>(entity =>
        {
            entity.HasKey(e => new { e.PlodID, e.DetailLine }).HasName("PK_PlodHoleDetails_1");

            entity.ToTable("PlodHoleDetails", "Ranger");

            entity.Property(e => e.DetailEnd).HasPrecision(0);
            entity.Property(e => e.DetailStart).HasPrecision(0);
            entity.Property(e => e.HoleNumber)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.Plod).WithMany(p => p.PlodHoleDetails)
                .HasForeignKey(d => d.PlodID)
                .HasConstraintName("FK_PlodHoleDetails_DrillPlod");
        });

        modelBuilder.Entity<RangerDrillRigs>(entity =>
        {
            entity.HasKey(e => e.DrillRigID).HasName("PK_DrilLRigs");

            entity.ToTable("RangerDrillRigs", "Admin");

            entity.Property(e => e.DrillRigID)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.DrillRigCompany)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DrillRigName)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.DrillRigCompanyNavigation).WithMany(p => p.RangerDrillRigs)
                .HasForeignKey(d => d.DrillRigCompany)
                .HasConstraintName("FK_DrillRigs_CompanyTypes");
        });

        modelBuilder.Entity<RangerPlodActivity>(entity =>
        {
            entity.HasKey(e => e.ActivityID).HasName("PK_DrillPlodTasks");

            entity.ToTable("RangerPlodActivity", "Admin");

            entity.Property(e => e.ActivityDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ActivityNumber)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ActivityReason)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RangerPlodConsumables>(entity =>
        {
            entity.HasKey(e => e.ConsumableID).HasName("PK_DrillPlodConsumables");

            entity.ToTable("RangerPlodConsumables", "Admin");

            entity.Property(e => e.ConsumableDescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ReportActivity>(entity =>
        {
            entity.HasKey(e => new { e.Vehicle, e.Date, e.HoleID });

            entity.ToTable("ReportActivity", "WSG");

            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HoleID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Activity)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.HourFrom).HasPrecision(0);
            entity.Property(e => e.HourTo).HasPrecision(0);
        });

        modelBuilder.Entity<ReportHeader>(entity =>
        {
            entity.HasKey(e => new { e.Vehicle, e.Date, e.HoleID }).HasName("PK_WellReport");

            entity.ToTable("ReportHeader", "WSG");

            entity.Property(e => e.Vehicle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HoleID)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Shifts>(entity =>
        {
            entity.HasKey(e => e.ShiftID);

            entity.ToTable("Shifts", "Admin");

            entity.Property(e => e.ShiftID)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ShiftName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WSGActivities>(entity =>
        {
            entity.HasKey(e => e.ActivityID).HasName("PK__Activiti__45F4A7F103C38915");

            entity.ToTable("WSGActivities", "Admin");

            entity.Property(e => e.ActivityID)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WSGServices>(entity =>
        {
            entity.HasKey(e => e.ServiceID).HasName("PK_Services");

            entity.ToTable("WSGServices", "Admin");

            entity.Property(e => e.ServiceID)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WSGVehicles>(entity =>
        {
            entity.HasKey(e => e.VehicleID).HasName("PK_Vehicles");

            entity.ToTable("WSGVehicles", "Admin");

            entity.Property(e => e.VehicleID)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}